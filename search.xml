<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（十一）</title>
      <link href="/2022/03/06/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-shi-yi/"/>
      <url>/2022/03/06/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-shi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="我的订单"><a href="#我的订单" class="headerlink" title="我的订单"></a>我的订单</h1><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0093p0kdyj20ak0imn0r.jpg" alt="我的订单.png"></p><h2 id="获取历史订单数据"><a href="#获取历史订单数据" class="headerlink" title="获取历史订单数据"></a>获取历史订单数据</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// pages/my-order/my-order.vue</span><span class="token comment">// 省略部分代码</span><span class="token keyword">const</span> db <span class="token operator">=</span> wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> _ <span class="token operator">=</span> db<span class="token punctuation">.</span>command<span class="token keyword">const</span> good_collect <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'order-data'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Price <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'e-commerce_price'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span>        Price<span class="token punctuation">,</span>         res_data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">async</span> <span class="token function">get_menu</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> field_obj <span class="token operator">=</span> <span class="token punctuation">{</span>                    transac_status<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    table_number<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    order_time<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    sett_amount<span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span>                <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">'order_time'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>field_obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>res_data <span class="token operator">=</span> res<span class="token punctuation">.</span>data            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">onLoad</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get_menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="选择人数页面"><a href="#选择人数页面" class="headerlink" title="选择人数页面"></a>选择人数页面</h1><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h009ekvbdsj20af0in0wd.jpg" alt="选择人数.png"></p><h2 id="扫描二维码获取桌号"><a href="#扫描二维码获取桌号" class="headerlink" title="扫描二维码获取桌号"></a>扫描二维码获取桌号</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// pages/index/index.vue</span><span class="token comment">// 省略部分代码</span><span class="token function">onLoad</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>table_number <span class="token operator">=</span> e<span class="token punctuation">.</span>number    wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'table_num'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h009w45uflj20iv0rgn5m.jpg" alt="e.png"></p><h2 id="查询当前桌号结账状态"><a href="#查询当前桌号结账状态" class="headerlink" title="查询当前桌号结账状态"></a>查询当前桌号结账状态</h2><ul><li><p>当前桌号历史订单已结束，即开始新订单</p></li><li><p>当前桌号存在历史订单未结账，则跳转到订单详情页</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// pages/index/index.vue</span><span class="token comment">// 省略部分代码</span>methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">query_order</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>table_number<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>table_number<span class="token punctuation">,</span> transac_status<span class="token operator">:</span> <span class="token string">'unsettled'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                wx<span class="token punctuation">.</span><span class="token function">reLaunch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    url<span class="token operator">:</span> <span class="token string">'/pages/order-details/details'</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//TODO handle the exception</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">onLoad</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>table_number <span class="token operator">=</span> e<span class="token punctuation">.</span>number    wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'table_num'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>number<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择人数"><a href="#选择人数" class="headerlink" title="选择人数"></a>选择人数</h2><p>通过 <code>wx.setStorageSync('number_of_diners', item)</code> 接口保存选择人数</p><h2 id="点击开始跳转点单页面"><a href="#点击开始跳转点单页面" class="headerlink" title="点击开始跳转点单页面"></a>点击开始跳转点单页面</h2><p>通过 <code>x.getStorageSync('number_of_diners')</code> 和 <code>wx.getStorageSync('table_num')</code> 接口获取桌号和人数</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（十）</title>
      <link href="/2022/03/05/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-shi/"/>
      <url>/2022/03/05/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="订单详情页"><a href="#订单详情页" class="headerlink" title="订单详情页"></a>订单详情页</h1><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz93xhbd9j20ao0ii41w.jpg" alt="订单详情页.png"></p><h2 id="获取订单数据"><a href="#获取订单数据" class="headerlink" title="获取订单数据"></a>获取订单数据</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// pages/order-details/details.vue</span><span class="token comment">// 省略部分代码</span><span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        Price<span class="token punctuation">,</span>        overall<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        other_data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        comp_data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        goods_data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">get_menu</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> field_obj <span class="token operator">=</span> <span class="token punctuation">{</span>number_of_diners<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> transac_status<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> order_receiving<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> openid<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span>            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>table_number<span class="token operator">:</span> <span class="token string">'002'</span><span class="token punctuation">,</span> transac_status<span class="token operator">:</span> <span class="token string">'unsettled'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>field_obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> res_data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>menu            res_data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>overall <span class="token operator">+=</span> item<span class="token punctuation">.</span>goods_list<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>other_data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>comp_data <span class="token operator">=</span> res_data            <span class="token keyword">this</span><span class="token punctuation">.</span>goods_data <span class="token operator">=</span> res_data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    backup_data<span class="token operator">:</span> item<span class="token punctuation">.</span>backup_data<span class="token punctuation">,</span>                    goods_list<span class="token operator">:</span> item<span class="token punctuation">.</span>goods_list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    max<span class="token operator">:</span> item<span class="token punctuation">.</span>goods_list<span class="token punctuation">.</span>length                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">onLoad</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get_menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>Collection.where(condition: Object)</code> 指定查询条件，返回带新查询条件的新的集合引用</p></li><li><p><code>Collection.field(projection: Object)</code> 指定返回结果中记录需返回的字段。方法接受一个必填对象用于指定需返回的字段，对象的各个 key 表示要返回或不要返回的字段，value 传入 true|false（或 1|-1）表示要返回还是不要返回</p></li></ul><h2 id="点击展开全部"><a href="#点击展开全部" class="headerlink" title="点击展开全部"></a>点击展开全部</h2><p>实现思路：</p><p>通过 <code>max</code> 值来判断是否已经展示全部</p><ul><li><p>大于3，折叠多余数据</p></li><li><p>小于3，展示全部</p></li></ul><p><code>comp_data</code> 存放完整数据</p><p><code>goods_data</code> 存放前三项数据，<code>goods_data[0]</code> 表示第一次下单的前三项数据</p><p>点击 <code>index</code> 对应的展开全部按钮，更新该次 <code>goods_data[index]</code> 下单的所有数据，并将对应的 <code>max</code> 值标记为0表示已展示全部隐藏展开全部按钮。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// psges/order-details/details.vue</span><span class="token comment">// 省略部分代码</span>methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">opEn</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'goods_list'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>comp_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>goods_list<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加菜"><a href="#加菜" class="headerlink" title="加菜"></a>加菜</h2><p>点击加菜按钮跳转到点单页面，用到 <code>wx.reLaunch(Object object)</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// psges/order-details/details.vue</span><span class="token comment">// 省略部分代码</span>methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">add_Dish</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wx<span class="token punctuation">.</span><span class="token function">reLaunch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token operator">:</span> <span class="token string">'/pages/home-page/page'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 wx.navigateTo、wx.redirectTo、wx.reLaunch、wx.switchTab 和 wx.navigateBack 的区别（留坑）</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（九）</title>
      <link href="/2022/03/05/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-jiu/"/>
      <url>/2022/03/05/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-jiu/</url>
      
        <content type="html"><![CDATA[<h1 id="计算每一天销售额"><a href="#计算每一天销售额" class="headerlink" title="计算每一天销售额"></a>计算每一天销售额</h1><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol><li>获取seven_day_sales数据表数据</li></ol><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz0tikeoyj20an042t9i.jpg" alt="seven_day_sales数据表"></p><ol start="2"><li>获取当前日期记录</li></ol><ul><li><p>无记录，新增当前日期销售记录</p></li><li><p>有记录，将当前订单总价与该日期销售额相加</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// config/Date_anaysis.js</span><span class="token keyword">const</span> db <span class="token operator">=</span> wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> _ <span class="token operator">=</span> db<span class="token punctuation">.</span>command<span class="token keyword">const</span> seven <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'seven_day_sales'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">analysis</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token function">sameday</span> <span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> sales_value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token keyword">await</span> seven<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>time<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">await</span> seven<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>data<span class="token operator">:</span> <span class="token punctuation">{</span>time<span class="token punctuation">,</span> sales_value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">let</span> total_amount <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sales_value<span class="token punctuation">)</span> <span class="token operator">+</span> sales_value<span class="token keyword">let</span> final_data <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">await</span> seven<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>data<span class="token operator">:</span> <span class="token punctuation">{</span>sales_value<span class="token operator">:</span>total_amount<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token string">'错误'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>analysis<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="小程序端调用订阅消息接口"><a href="#小程序端调用订阅消息接口" class="headerlink" title="小程序端调用订阅消息接口"></a>小程序端调用订阅消息接口</h1><p>订阅消息接口：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/subscribe-message/wx.requestSubscribeMessage.html">wx.requestSubscribeMessage(Object object)</a></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz2y5o9ktj20yt0ozdky.jpg" alt="订阅消息模板.png"></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz383c6knj20ns0ev75k.jpg" alt="订阅消息模板详情.png"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// pages/home-page-page.vue</span><span class="token comment">// 省略部分代码</span>methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">placean_order</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wx<span class="token punctuation">.</span><span class="token function">requestSubscribeMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            tmplIds<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>tmplIds<span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sub_database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sub_database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz1l1segsj20j20rjk03.jpg" alt="订阅消息.png"></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz3nzi0s6j20f20lldif.jpg" alt="服务通知.png"></p><h1 id="使用-GoEasy"><a href="#使用-GoEasy" class="headerlink" title="使用 GoEasy"></a>使用 GoEasy</h1><p><a href="https://www.goeasy.io/cn/docs/goeasy-2.x/pubsub/message/client-pub-sub.html">Websocket消息发送和接收 - GoEasy PubSub</a></p><h2 id="小程序端"><a href="#小程序端" class="headerlink" title="小程序端"></a>小程序端</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// main.js</span><span class="token comment">// 省略部分代码</span><span class="token keyword">import</span> GoEasy <span class="token keyword">from</span> <span class="token string">'goeasy'</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>goeasy <span class="token operator">=</span> GoEasy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token operator">:</span><span class="token string">"hangzhou.goeasy.io"</span><span class="token punctuation">,</span>  <span class="token comment">//若是新加坡区域：singapore.goeasy.io</span>    appkey<span class="token operator">:</span><span class="token string">"您的common key"</span><span class="token punctuation">,</span>    modules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'pubsub'</span><span class="token punctuation">]</span><span class="token comment">//根据需要，传入‘pubsub’或'im’，或数组方式同时传入</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// App.vue</span><span class="token comment">// 省略部分代码</span><span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//建立连接</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>goeasy<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        id<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">//pubsub选填，im必填</span>        data<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//必须是一个对象，pubsub选填，im必填，用于上下线提醒和查询在线用户列表时，扩展更多的属性</span>        <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//连接成功</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span> <span class="token comment">//连接成功</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">onFailed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//连接失败</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">onProgress</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">attempts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//连接或自动重连中</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接或自动重连中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// src/main.js</span><span class="token comment">// 省略部分代码</span><span class="token keyword">import</span> GoEasy <span class="token keyword">from</span> <span class="token string">'goeasy'</span><span class="token comment">// 即时通讯：订单提醒</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>goeasy <span class="token operator">=</span> GoEasy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host<span class="token operator">:</span> <span class="token string">"hangzhou.goeasy.io"</span><span class="token punctuation">,</span>  <span class="token comment">//若是新加坡区域：singapore.goeasy.io</span>  appkey<span class="token operator">:</span> <span class="token string">"您的common key"</span><span class="token punctuation">,</span>  modules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'pubsub'</span><span class="token punctuation">]</span><span class="token comment">//根据需要，传入‘pubsub’或'im’，或数组方式同时传入</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// src/App.vue</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 订单数存入本地缓存</span>    <span class="token keyword">const</span> order_num <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"order_num"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>order_num <span class="token operator">||</span> order_num <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'order_num'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//1.建立连接</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>goeasy<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        id<span class="token operator">:</span><span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token comment">//pubsub选填，im必填</span>        data<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"avatar"</span><span class="token operator">:</span><span class="token string">"/www/xxx.png"</span><span class="token punctuation">,</span><span class="token string">"nickname"</span><span class="token operator">:</span><span class="token string">"Neo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//必须是一个对象，pubsub选填，im必填，用于上下线提醒和查询在线用户列表时，扩展更多的属性</span>        <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token comment">//连接成功</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span> <span class="token comment">//连接成功</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sub_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">onFailed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">//连接失败</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">onProgress</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">attempts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">//连接或自动重连中</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接或自动重连中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">// 2.接收订阅消息</span>    <span class="token function">sub_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> pubsub <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>goeasy<span class="token punctuation">.</span>pubsub<span class="token punctuation">;</span>        pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            channel<span class="token operator">:</span> <span class="token string">"my_channel"</span><span class="token punctuation">,</span><span class="token comment">//替换为您自己的channel</span>            <span class="token function-variable function">onMessage</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> order_num_a <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"order_num"</span><span class="token punctuation">)</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'order_num'</span><span class="token punctuation">,</span><span class="token function">Number</span><span class="token punctuation">(</span>order_num_a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">const</span> order_num_b <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"order_num"</span><span class="token punctuation">)</span>                <span class="token comment">// console.log(order_num_b)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'order_remind'</span><span class="token punctuation">,</span><span class="token function">Number</span><span class="token punctuation">(</span>order_num_b<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// console.log(message);</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Channel订阅成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">onFailed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Channel订阅失败, 错误编码："</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">" 错误信息："</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz3i4tqbaj20yv0km45x.jpg" alt="后台订阅消息.png"></p><h1 id="即时通讯功能新订单提醒"><a href="#即时通讯功能新订单提醒" class="headerlink" title="即时通讯功能新订单提醒"></a>即时通讯功能新订单提醒</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// pages/home-page/page.vue</span><span class="token comment">// 省略部分代码</span>methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">push_message</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> pubsub <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>goeasy<span class="token punctuation">.</span>pubsub        pubsub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            channel<span class="token operator">:</span> <span class="token string">"my_channel"</span><span class="token punctuation">,</span><span class="token comment">//替换为您自己的channel</span>            message<span class="token operator">:</span> <span class="token string">"小程序端发送"</span><span class="token punctuation">,</span><span class="token comment">//替换为您想要发送的消息内容</span>            <span class="token function-variable function">onSuccess</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"消息发布成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">onFailed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"消息发送失败，错误编码："</span><span class="token operator">+</span>error<span class="token punctuation">.</span>code<span class="token operator">+</span><span class="token string">" 错误信息："</span><span class="token operator">+</span>error<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz3leb0l9g21gt0ogk7z.gif" alt="订单提醒.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reduce的一点小理解</title>
      <link href="/2022/02/18/reduce-de-yi-dian-xiao-li-jie/"/>
      <url>/2022/02/18/reduce-de-yi-dian-xiao-li-jie/</url>
      
        <content type="html"><![CDATA[<p>前阵子在项目中有用到 <code>reduce()</code> 方法，当时不是很理解，后来空了学习了一下，有了一点小收获，记之~</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p><code>Array.prototype.reduce()</code>  方法对数组中的每个元素执行指定回调函数，将其结果汇总为单个返回值。这个方法接收两个参数：</p><ul><li><p>回调函数（必选），执行数组中每个值 (如果没有提供初始值则第一个值除外)的函数，包含四个参数：</p><ul><li><p>accumulator（累计器），累计回调的返回值，值为上一次调用回调时返回的累积值或者初始值</p></li><li><p>currentValue，数组中正在处理的元素</p></li><li><p>index，数组中正在处理的当前元素的索引。如果提供了初始值，则起始索引号为0，否则从索引1起始</p></li><li><p>array，调用reduce()的数组，即源数组</p></li></ul></li><li><p>初始值（可选），作为第一次调用回调函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的<strong>空数组</strong>上调用 <code>reduce()</code> 将报错</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 1 + 2 + 3</span><span class="token comment">// 6</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 1 + 1 + 2 + 3</span><span class="token comment">// 7</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 报错</span><span class="token comment">// Uncaught TypeError: Reduce of empty array with no initial value</span><span class="token comment">// at Array.reduce (&lt;anonymous&gt;)</span><span class="token comment">// at &lt;anonymous&gt;:1:4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="filter-find-forEach-map-reduce-的对比"><a href="#filter-find-forEach-map-reduce-的对比" class="headerlink" title="filter/find/forEach/map/reduce 的对比"></a>filter/find/forEach/map/reduce 的对比</h1><p>这几个方法我总是会混淆，列了个表格方便对比</p><table><thead><tr><th>方法名</th><th>描述</th><th>语法</th><th>参数1</th><th>参数2</th><th>返回值</th></tr></thead><tbody><tr><td>filter</td><td>返回满足所提供回调函数筛选条件的所有元素或空数组</td><td>var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</td><td>用来测试数组的每个元素的函数。返回 <code>true</code> 表示该元素通过测试，保留该元素，<code>false</code> 则不保留。它接受以下三个参数：<br><strong>element</strong> 当前遍历到的元素<br><code>index</code><strong>可选</strong> 当前遍历到的索引<br><code>array</code><strong>可选</strong> 数组本身</td><td>执行回调时用作<code>this</code> 的对象</td><td>一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组</td></tr><tr><td>find</td><td>返回满足所提供回调函数筛选条件的第一个元素的值或 <code>undefined</code></td><td>arr.find(callback(element[, index[, array]])[, thisArg])</td><td>在数组每一项上执行的函数，它接受以下三个参数：<br><strong>element</strong> 当前遍历到的元素<br><code>index</code><strong>可选</strong> 当前遍历到的索引<br><code>array</code><strong>可选</strong> 数组本身</td><td>执行回调时用作<code>this</code> 的对象</td><td>数组中第一个满足所提供测试函数的元素的值，否则返回 <code>undefined</code></td></tr><tr><td>forEach</td><td>对数组的每个元素执行一次提供的回调函数</td><td>arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</td><td>为数组中每个元素执行的函数，它接受以下三个参数：<br><strong>element</strong> 当前遍历到的元素<br><code>index</code><strong>可选</strong> 当前遍历到的索引<br><code>array</code><strong>可选</strong> 数组本身</td><td>执行回调时用作<code>this</code> 的对象</td><td><code>undefined</code></td></tr><tr><td>map</td><td>返回数组中的每个元素调用一次提供的函数后组合形成的新数组</td><td>var new_array = arr.map(function callback(currentValue[, index[, array]]) {  <br>// Return element for new_array  <br>}[, thisArg])</td><td>生成新数组元素的函数，它接受以下三个参数：<br><strong>element</strong> 当前遍历到的元素<br><code>index</code><strong>可选</strong> 当前遍历到的索引<br><code>array</code><strong>可选</strong> 数组本身</td><td>执行回调时用作<code>this</code> 的对象</td><td>一个由原数组每个元素执行回调函数的结果组成的新数组</td></tr><tr><td>reduce</td><td>返回数组中的每个元素升序调用一次提供的函数后汇总而成的值</td><td>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</td><td>执行数组中每个值 (如果没有提供 <code>initialValue则第一个值除外</code>)的函数，它接受以下四个参数：<br><strong><code>accumulator</code></strong>  累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或<code>initialValue</code><br><strong>element</strong> 当前遍历到的元素<br><code>index</code><strong>可选</strong> 当前遍历到的索引<br><code>array</code><strong>可选</strong> 数组本身</td><td>作为第一次调用 <code>callback</code>函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素</td><td>函数累计处理的结果</td></tr></tbody></table><h2 id="使用-reduce-实现-filter"><a href="#使用-reduce-实现-filter" class="headerlink" title="使用 reduce 实现 filter"></a>使用 reduce 实现 filter</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>filterUsingReduce<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">filterUsingReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filterArray<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        filterArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> filterArray    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filterUsingReduce</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentValue <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// [16]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-reduce-实现-find"><a href="#使用-reduce-实现-find" class="headerlink" title="使用 reduce 实现 find"></a>使用 reduce 实现 find</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>findUsingReduce<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">findUsingReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">findArray<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>findArray <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">&amp;&amp;</span> findArray<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        findArray <span class="token operator">=</span> currentValue        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">===</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> findArray <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">&amp;&amp;</span> findArray<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        findArray <span class="token operator">=</span> <span class="token keyword">undefined</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> findArray    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findUsingReduce</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentValue <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// [4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-reduce-实现-forEach"><a href="#使用-reduce-实现-forEach" class="headerlink" title="使用 reduce 实现 forEach"></a>使用 reduce 实现 forEach</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEachUsingReduce<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">forEachUsingReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">forEachArray<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">forEachUsingReduce</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>element<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>element<span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// a: a1</span><span class="token comment">// b: b1</span><span class="token comment">// c: c1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-reduce-实现-map"><a href="#使用-reduce-实现-map" class="headerlink" title="使用 reduce 实现 map"></a>使用 reduce 实现 map</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mapUsingReduce<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mapUsingReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mappedArray<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mappedArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span>      <span class="token keyword">return</span> mappedArray    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">mapUsingReduce</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentValue <span class="token operator">+</span> index <span class="token operator">+</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// [5, 9, 15, 23]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p><a href="https://juejin.cn/post/6844904025310117901">自从学会了 Array.reduce() ，再也离不开它</a></p><p><a href="https://juejin.cn/post/6916087983808626701">以前我没得选，现在我只想用 Array.prototype.reduce</a></p><p><a href="https://juejin.cn/post/6844903870154588168#heading-6">生动形象解释forEach、filter、map、some、every、find、findIndex、reduce间的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（十二）</title>
      <link href="/2022/01/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi-er/"/>
      <url>/2022/01/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi-er/</url>
      
        <content type="html"><![CDATA[<h1 id="生成小程序码"><a href="#生成小程序码" class="headerlink" title="生成小程序码"></a>生成小程序码</h1><p>接口：<a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html">wxacode.get</a></p><p>通过该接口生成的小程序码，永久有效，有数量限制</p><p>HTTPS 调用：<code>POST https://api.weixin.qq.com/wxa/getwxacode?access_token=ACCESS_TOKEN</code></p><h1 id="提交桌号到数据库"><a href="#提交桌号到数据库" class="headerlink" title="提交桌号到数据库"></a>提交桌号到数据库</h1><p>实现思路：</p><ol><li><p>获取请求内容（桌号）</p></li><li><p>验证桌号是否已经存在</p></li><li><p>通过 HTTPS 调用接口生成该桌号的小程序码 </p></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// router/qr-code/code.js</span><span class="token comment">// 添加桌号</span><span class="token comment">// 省略部分代码</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/qrcode'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>table<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">postcode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('table_qr_code').where({table:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>table<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).get()</span><span class="token template-punctuation string">`</span></span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'该桌号已存在'</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> res_code <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">qrcode</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>      <span class="token keyword">const</span> res_img <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">buffer</span><span class="token punctuation">(</span><span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res_code<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token keyword">let</span> code_image <span class="token operator">=</span> <span class="token string">'https://'</span> <span class="token operator">+</span> res_img      <span class="token keyword">let</span> table_data <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('table_qr_code').add({data:{time:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',table:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>table<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',code:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code_image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}})</span><span class="token template-punctuation string">`</span></span>      <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> table_data<span class="token punctuation">)</span>      <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'添加成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// config/code-img.js</span><span class="token comment">// 给二进制图片重新命名</span><span class="token keyword">let</span> <span class="token function-variable function">Code</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> orderCode <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    orderCode <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  orderCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> orderCode  <span class="token keyword">return</span> orderCode <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>Code<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// config/checking.js</span><span class="token comment">// 桌号为空校验</span><span class="token comment">// 省略部分代码</span><span class="token keyword">class</span> <span class="token class-name">postcode</span> <span class="token keyword">extends</span> <span class="token class-name">checking</span> <span class="token punctuation">{</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'桌号不能为空'</span><span class="token punctuation">]</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Errunder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Blank</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// config/databaseapi.js</span><span class="token comment">// 生成小程序码</span><span class="token keyword">class</span> <span class="token class-name">getToken</span> <span class="token punctuation">{</span>  <span class="token comment">// 省略部分代码</span>  <span class="token keyword">async</span> <span class="token function">qrcode</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">gettoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> <span class="token constant">OBJ</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token operator">:</span> <span class="token string">'pages/index/index?number='</span> <span class="token operator">+</span> number<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> colldata <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>Qrcode <span class="token operator">+</span> token<span class="token punctuation">,</span> <span class="token constant">OBJ</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>responseType<span class="token operator">:</span> <span class="token string">'arraybuffer'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> colldata    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// cos/cos.js</span><span class="token comment">// 二进制上传</span><span class="token comment">// 省略部分代码</span><span class="token keyword">let</span> <span class="token function-variable function">buffer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    cos<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      Bucket<span class="token punctuation">,</span>      Region<span class="token punctuation">,</span>      Key<span class="token operator">:</span> filename<span class="token punctuation">,</span>      Body<span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Location<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="请求桌号数据"><a href="#请求桌号数据" class="headerlink" title="请求桌号数据"></a>请求桌号数据</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// router/qr-code/code.js</span><span class="token comment">// 获取桌号</span><span class="token comment">// 省略部分代码</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/getqrcode'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>page<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">let</span> sk <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('table_qr_code').orderBy('time', 'desc').limit(10).skip(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sk<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">).get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span>total<span class="token operator">:</span> res<span class="token punctuation">.</span>pager<span class="token punctuation">.</span>Total<span class="token punctuation">}</span>    <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span>result<span class="token operator">:</span> data<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>total<span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查询前7天数据"><a href="#查询前7天数据" class="headerlink" title="查询前7天数据"></a>查询前7天数据</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// router/qr-code/code.js</span><span class="token comment">// 获取前7天数据</span><span class="token comment">// 省略部分代码</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/salesvolume'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> catedays <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token string">'days'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>catedays<span class="token punctuation">)</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('seven_day_sales').where({time:db.command.in(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)}).orderBy('time','asc').field({time:true,sales_value:true}).get()</span><span class="token template-punctuation string">`</span></span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        sales_value<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span>sales_value<span class="token punctuation">,</span>        time<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span>time<span class="token punctuation">,</span>        unix<span class="token operator">:</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> days <span class="token operator">=</span> catedays<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        sales_value<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        time<span class="token operator">:</span> item<span class="token punctuation">,</span>        unix<span class="token operator">:</span> <span class="token function">moment</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> ab <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">let</span> removal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>data<span class="token punctuation">,</span> <span class="token operator">...</span>days<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">.</span>time<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        obj<span class="token punctuation">[</span>item<span class="token punctuation">.</span>time<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> prev    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> res_sort <span class="token operator">=</span> removal<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span>unix <span class="token operator">-</span> <span class="token constant">B</span><span class="token punctuation">.</span>unix<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> res_sort<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（八）</title>
      <link href="/2021/12/29/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-ba/"/>
      <url>/2021/12/29/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-ba/</url>
      
        <content type="html"><![CDATA[<h1 id="生成订单编号"><a href="#生成订单编号" class="headerlink" title="生成订单编号"></a>生成订单编号</h1><p>实现思路：当前时间戳 + 10位整数随机数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// config\order.js</span><span class="token keyword">let</span> <span class="token function-variable function">Code</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> orderCode <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>orderCode <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span>orderCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> orderCode<span class="token keyword">return</span> orderCode<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>Code<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="调用订阅消息接口"><a href="#调用订阅消息接口" class="headerlink" title="调用订阅消息接口"></a>调用订阅消息接口</h1><p>以下使用说明摘自<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/subscribe-message.html">文档</a></p><p>步骤一：获取模板 ID</p><p>登录小程序 -&gt; 功能 -&gt; 订阅消息 -&gt; 公共模板库 -&gt; 搜索’商家确认订单通知’并选用 -&gt; 复制模板ID</p><p>步骤二：获取下发权限</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">wx<span class="token punctuation">.</span><span class="token function">requestSubscribeMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  tmplIds<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'模板ID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">success</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>步骤三：调用接口下发订阅消息</p><p>服务端调用，见 <a href="https://april-cl.github.io/2021/12/26/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi-yi/#toc-heading-7">微信订阅消息</a></p><h1 id="提交订单"><a href="#提交订单" class="headerlink" title="提交订单"></a>提交订单</h1><h2 id="订单数据库设计"><a href="#订单数据库设计" class="headerlink" title="订单数据库设计"></a>订单数据库设计</h2><pre class="line-numbers language-none"><code class="language-none">[{table_number:桌号number_of_diners:用餐人数order_time:下单时间sett_amount:交易金额order_no:订单编号transac_status:结账状态=&gt;未结账:'unsettled'|已结账:'success'order_receiving:接单状态=&gt;未接单:'mis_orders'|已接单:'rec_order'menu:[{goods_list:[购物车里的菜单]}//第一次下单{goods_list:[购物车里的菜单]}//第二次下单{}n次]下单的菜品：第一次下单;{二次,三次,n次}=&gt;加菜}]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="考虑需求"><a href="#考虑需求" class="headerlink" title="考虑需求"></a>考虑需求</h2><ol><li>客户初次提交订单</li><li>客户加单</li></ol><p>依据 <code>transac_status</code> 结账状态和 <code>table_number</code> 当前桌号判断。</p><p>向数据查询当前桌号并且未结账记录</p><ul><li>无记录则表示之前的订单已结，此单为初次点单，向数据库创建新纪录</li><li>有记录则表示该桌号此单为加单，向数据库修改记录</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">sub_database</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopping_card<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>total_price <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> sett_amount <span class="token operator">=</span> <span class="token number">0</span>    res<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>sett_amount <span class="token operator">+=</span> item<span class="token punctuation">.</span>total_price<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> order <span class="token operator">=</span> <span class="token punctuation">{</span>        table_number<span class="token operator">:</span> <span class="token string">'004'</span><span class="token punctuation">,</span>        number_of_diners<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        order_time<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        sett_amount<span class="token punctuation">,</span>        order_no<span class="token operator">:</span> <span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transac_status<span class="token operator">:</span> <span class="token string">'unsettled'</span><span class="token punctuation">,</span>        order_receiving<span class="token operator">:</span> <span class="token string">'mis_orders'</span><span class="token punctuation">,</span>        menu<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>backup_data<span class="token operator">:</span> <span class="token string">'备用字段'</span><span class="token punctuation">,</span> goods_list<span class="token operator">:</span> res<span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> add_goods <span class="token operator">=</span> <span class="token punctuation">{</span>backup_data<span class="token operator">:</span> <span class="token string">'备用字段'</span><span class="token punctuation">,</span> goods_list<span class="token operator">:</span> res<span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>table_number<span class="token operator">:</span> <span class="token string">'004'</span><span class="token punctuation">,</span> transac_status<span class="token operator">:</span> <span class="token string">'unsettled'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sett_amount<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>data<span class="token operator">:</span> order<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> total_amount <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sett_amount<span class="token punctuation">)</span> <span class="token operator">+</span> sett_amount            <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                data<span class="token operator">:</span> <span class="token punctuation">{</span>                    sett_amount<span class="token operator">:</span> total_amount<span class="token punctuation">,</span>                    order_receiving<span class="token operator">:</span> <span class="token string">'mis_orders'</span><span class="token punctuation">,</span>                    menu<span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>add_goods<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">await</span> dishes_data<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>data<span class="token operator">:</span> <span class="token punctuation">{</span>                monthlysale<span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> time_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">analysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sameday</span><span class="token punctuation">(</span>time_data<span class="token punctuation">,</span> sett_amount<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（十一）</title>
      <link href="/2021/12/26/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi-yi/"/>
      <url>/2021/12/26/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="订单管理页"><a href="#订单管理页" class="headerlink" title="订单管理页"></a>订单管理页</h1><h2 id="前端接口"><a href="#前端接口" class="headerlink" title="前端接口"></a>前端接口</h2><p>获取订单：obtainorder</p><p>获取菜单详情：vieworder</p><p>接单：receiving</p><p>结账：checkout</p><h2 id="获取订单信息"><a href="#获取订单信息" class="headerlink" title="获取订单信息"></a>获取订单信息</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/obtainorder'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>page<span class="token punctuation">,</span> transac_status<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">let</span> sk <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>  <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>transac_status <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    param<span class="token punctuation">[</span><span class="token string">'transac_status'</span><span class="token punctuation">]</span> <span class="token operator">=</span> transac_status  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">delete</span> param<span class="token punctuation">.</span>transac_status  <span class="token punctuation">}</span>  <span class="token keyword">let</span> <span class="token constant">OBJ</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('order-data').where(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">OBJ</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">).orderBy('order_time', 'desc').field({menu: false}).limit(10).skip(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sk<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">).get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span>total<span class="token operator">:</span> res<span class="token punctuation">.</span>pager<span class="token punctuation">.</span>Total<span class="token punctuation">}</span>    <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span>result<span class="token operator">:</span> data<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>total<span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200.</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取菜单详情"><a href="#获取菜单详情" class="headerlink" title="获取菜单详情"></a>获取菜单详情</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/vieworder'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('order-data').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').field({menu: true}).get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现接单"><a href="#实现接单" class="headerlink" title="实现接单"></a>实现接单</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/receiving'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span>  <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('order-data').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').update({data:{order_receiving:'rec_order'}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'已接单，快上菜吧'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现结账"><a href="#实现结账" class="headerlink" title="实现结账"></a>实现结账</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/checkout'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> openid<span class="token punctuation">,</span> sett_amount<span class="token punctuation">,</span> order_no<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">let</span> newmoney <span class="token operator">=</span> <span class="token function">Price</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>sett_amount<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> subscribe <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'amount1'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'value'</span><span class="token operator">:</span> newmoney<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'time2'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'value'</span><span class="token operator">:</span> time<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'character_string3'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">'value'</span><span class="token operator">:</span> order_no<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('order-data').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').update({data:{transac_status:'success'}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>openid<span class="token punctuation">,</span> subscribe<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'结账成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="微信订阅消息"><a href="#微信订阅消息" class="headerlink" title="微信订阅消息"></a>微信订阅消息</h2><p>登录小程序 -&gt; 功能 -&gt; 订阅消息 -&gt; 公共模板库 -&gt; 搜索’商家确认订单通知’并选用 -&gt; 复制模板ID</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// databaseapi.js</span><span class="token keyword">let</span> Subscribe <span class="token operator">=</span> <span class="token string">'https://api.weixin.qq.com/cgi-bin/message/subscribe/send?access_token='</span><span class="token keyword">class</span> <span class="token class-name">getToken</span> <span class="token punctuation">{</span>  <span class="token comment">// 一些代码</span>  <span class="token keyword">async</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">touser<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">gettoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> <span class="token constant">OBJ</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        touser<span class="token punctuation">,</span>        data<span class="token punctuation">,</span>        template_id<span class="token operator">:</span> <span class="token string">'上面复制的模板ID'</span><span class="token punctuation">,</span>        page<span class="token operator">:</span> <span class="token string">'pages/my-order/my-order'</span><span class="token punctuation">,</span>        miniprogram_state<span class="token operator">:</span> <span class="token string">'developer'</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> colldata <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>Subscribe <span class="token operator">+</span> token<span class="token punctuation">,</span> <span class="token constant">OBJ</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token string">'success'</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（七）</title>
      <link href="/2021/12/20/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-qi/"/>
      <url>/2021/12/20/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="详情页组件"><a href="#详情页组件" class="headerlink" title="详情页组件"></a>详情页组件</h1><h2 id="封装组件"><a href="#封装组件" class="headerlink" title="封装组件"></a>封装组件</h2><p>在 <code>pages\home-page\components</code> 目录创建 <code>goods-details.vue</code>，布局样式代码略</p><h2 id="调用组件"><a href="#调用组件" class="headerlink" title="调用组件"></a>调用组件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Details<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Details<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Details <span class="token keyword">from</span> <span class="token string">'./components/goods-details.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>components<span class="token operator">:</span><span class="token punctuation">{</span>Details<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切换显示菜品详情"><a href="#切换显示菜品详情" class="headerlink" title="切换显示菜品详情"></a>切换显示菜品详情</h2><p>实现思路同 <a href="https://april-cl.github.io/2021/12/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-liu/#toc-heading-4">切换显示关闭购物车</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"popup_item()"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Details v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"popupItem"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Details<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Details <span class="token keyword">from</span> <span class="token string">'./components/goods-details.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>components<span class="token operator">:</span> <span class="token punctuation">{</span>Details<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                popupItem<span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">pop_Shopping</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>popupItem <span class="token operator">=</span> value<span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// goods-details.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"close()"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">close</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">popup_item</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>实现思路：通过 <code>v-bind</code> 将父组件向购物车组件动态赋值，用一个对象 <code>pro_details</code> 存储父组件当前点击菜品数据，详情页组件通过 <code>props</code> 接收菜品数据</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in goods"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(itemgood, good_index) in item.good_query"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"good_index"</span> @click<span class="token operator">=</span><span class="token string">"popup_item(true, index, good_index, item.cid, itemgood)"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Details v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"popupItem"</span> <span class="token operator">:</span>pro_details<span class="token operator">=</span><span class="token string">"pro_details"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Details<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Details <span class="token keyword">from</span> <span class="token string">'./components/goods-details.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>components<span class="token operator">:</span> <span class="token punctuation">{</span>Details<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                pro_details<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">popup_item</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>popupItem <span class="token operator">=</span> value<span class="token keyword">this</span><span class="token punctuation">.</span>pro_details <span class="token operator">=</span> <span class="token punctuation">{</span>index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// goods-details.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"details-name"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>pro_details<span class="token punctuation">.</span>itemgood<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        props<span class="token operator">:</span> <span class="token punctuation">{</span>pro_details<span class="token operator">:</span> Object<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同步计算菜品加减"><a href="#同步计算菜品加减" class="headerlink" title="同步计算菜品加减"></a>同步计算菜品加减</h2><p>见 <a href="https://april-cl.github.io/2021/12/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-wu/">实战篇笔记 扫码点餐小程序云开发小程序端（五）</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（六）</title>
      <link href="/2021/12/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-liu/"/>
      <url>/2021/12/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="购物车组件"><a href="#购物车组件" class="headerlink" title="购物车组件"></a>购物车组件</h1><h2 id="封装组件"><a href="#封装组件" class="headerlink" title="封装组件"></a>封装组件</h2><p>在 <code>pages\home-page\components</code> 目录创建 <code>shopping-cart.vue</code>，布局样式代码略</p><h2 id="调用组件"><a href="#调用组件" class="headerlink" title="调用组件"></a>调用组件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Cart<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Cart<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Cart <span class="token keyword">from</span> <span class="token string">'./components/shopping-cart.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>components<span class="token operator">:</span><span class="token punctuation">{</span>Cart<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切换显示关闭购物车"><a href="#切换显示关闭购物车" class="headerlink" title="切换显示关闭购物车"></a>切换显示关闭购物车</h2><h3 id="点击父组件"><a href="#点击父组件" class="headerlink" title="点击父组件"></a>点击父组件</h3><p>实现思路：用一个布尔值标记购物车显隐状态，当值为 <code>true</code> 时，购物车显示，此时若点击父组件控制购物车显隐状态开关，值切换为 <code>false</code>，购物车关闭</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"pop_Shopping(!card)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Cart v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Cart<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Cart <span class="token keyword">from</span> <span class="token string">'./components/shopping-cart.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>components<span class="token operator">:</span> <span class="token punctuation">{</span>Cart<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                card<span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">pop_Shopping</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>card <span class="token operator">=</span> value<span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="点击子组件（即购物车组件）"><a href="#点击子组件（即购物车组件）" class="headerlink" title="点击子组件（即购物车组件）"></a>点击子组件（即购物车组件）</h3><p>实现思路：点击时调用父组件<code>pop_Shopping</code> 函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// shopping-cart.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"close()"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">close</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">pop_Shopping</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加菜品进购物车"><a href="#添加菜品进购物车" class="headerlink" title="添加菜品进购物车"></a>添加菜品进购物车</h2><p>实现思路：通过 <code>v-bind</code> 将父组件向购物车组件动态赋值，用一个数组 <code>shopping_card</code> 存储父组件中要加入购物车的菜品，购物车组件通过 <code>props</code> 接收菜品数据</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Cart v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"card"</span> <span class="token operator">:</span>shopping_card<span class="token operator">=</span><span class="token string">"shopping_card"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Cart<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Cart <span class="token keyword">from</span> <span class="token string">'./components/shopping-cart.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>components<span class="token operator">:</span> <span class="token punctuation">{</span>Cart<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                shopping_card<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">plus</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">{</span>quantity<span class="token punctuation">,</span> image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> _id<span class="token punctuation">}</span> <span class="token operator">=</span> itemgood<span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>good_query<span class="token punctuation">[</span>good_index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span>image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token constant">QU</span><span class="token punctuation">,</span> unit<span class="token punctuation">,</span> total_price<span class="token operator">:</span> unitprice <span class="token operator">*</span> <span class="token constant">QU</span><span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shopping_Cart</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">reduce</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">{</span>quantity<span class="token punctuation">,</span> image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> _id<span class="token punctuation">}</span> <span class="token operator">=</span> itemgood<span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>good_query<span class="token punctuation">[</span>good_index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span>image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token constant">QU</span><span class="token punctuation">,</span> unit<span class="token punctuation">,</span> total_price<span class="token operator">:</span> unitprice <span class="token operator">*</span> <span class="token constant">QU</span><span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shopping_Cart</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">shopping_Cart</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopping_card<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// shopping-cart.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in shopping_card"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"goods-list"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"item.quantity &gt; 0"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"goods-list-image"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>image <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"item.image[0].url"</span> mode<span class="token operator">=</span><span class="token string">"aspectFill"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>image<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"goods-list-name"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list-text"</span><span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>text<span class="token operator">&gt;</span>￥<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>text<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>total_price<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"goods-quantity"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>quantity<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        props<span class="token operator">:</span> <span class="token punctuation">{</span>shopping_card<span class="token operator">:</span> Array<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 <code>plus</code> 和 <code>reduce</code> 为加减菜品函数，见 <a href="https://april-cl.github.io/2021/12/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-wu/">实战篇笔记 扫码点餐小程序云开发小程序端（五）</a></p><h2 id="清空购物车所有菜品"><a href="#清空购物车所有菜品" class="headerlink" title="清空购物车所有菜品"></a>清空购物车所有菜品</h2><p>实现思路：父组件封装好清空数据的接口，子组件进行调用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">empty_data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopping_card <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">this</span><span class="token punctuation">.</span>itemize<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>sale_quantity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>item<span class="token punctuation">.</span>good_query<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">T</span></span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// shopping-cart.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"empTy()"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">empTy</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">empty_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（五）</title>
      <link href="/2021/12/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-wu/"/>
      <url>/2021/12/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="菜品数量加减"><a href="#菜品数量加减" class="headerlink" title="菜品数量加减"></a>菜品数量加减</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in goods"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(itemgood, good_index) in item.good_query"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"good_index"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>view @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"reduce(index, good_index, item.cid, itemgood)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>view @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"plus(index, good_index, item.cid, itemgood)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Cart<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Cart<span class="token operator">&gt;</span><span class="token operator">&lt;</span>Details<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Details<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Cart <span class="token keyword">from</span> <span class="token string">'./components/shopping-cart.vue'</span>    <span class="token keyword">import</span> Details <span class="token keyword">from</span> <span class="token string">'./components/goods-details.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>components<span class="token operator">:</span> <span class="token punctuation">{</span>Cart<span class="token punctuation">,</span>Details<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                card<span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">plus</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span>quantity<span class="token punctuation">,</span> image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> _id<span class="token punctuation">}</span> <span class="token operator">=</span> itemgood                <span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>good_query<span class="token punctuation">[</span>good_index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">)</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">reduce</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span>quantity<span class="token punctuation">,</span> image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> _id<span class="token punctuation">}</span> <span class="token operator">=</span> itemgood                <span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>good_query<span class="token punctuation">[</span>good_index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">shopping_Cart_add_sub</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> unitprice</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopping_card<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopping_card<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'total_price'</span><span class="token punctuation">,</span> <span class="token constant">QU</span> <span class="token operator">*</span> unitprice<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Vue.set(object, propertyName, value)</code> 向响应式对象中添加一个 property，并确保这个新 property 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新 property，因为 Vue 无法探测普通的新增 property (比如 this.myObject.newProperty = ‘hi’)</p></blockquote><blockquote><p><code>.stop</code> 阻止事件继续传播</p></blockquote><hr><p>下面内容需结合购物车和菜品详情页一起看，可先略过</p><h1 id="购物车菜品数量加减"><a href="#购物车菜品数量加减" class="headerlink" title="购物车菜品数量加减"></a>购物车菜品数量加减</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// shopping-cart.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in shopping_card"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"reduce(index, item.quantity, item._id, item.cid, item.good_index, item.unitprice)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"plus(index, item.quantity, item._id, item.cid, item.good_index, item.unitprice)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">reduce</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> unitprice</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">shopping_Cart_add_sub</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> unitprice<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">plus</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> unitprice</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">shopping_Cart_add_sub</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> unitprice<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="详情页菜品数量加减"><a href="#详情页菜品数量加减" class="headerlink" title="详情页菜品数量加减"></a>详情页菜品数量加减</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// goods-details.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"reduce(pro_details)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"plus(pro_details)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        props<span class="token operator">:</span> <span class="token punctuation">{</span>pro_details<span class="token operator">:</span> Object<span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">plus</span><span class="token punctuation">(</span><span class="token parameter">pro_details</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> <span class="token punctuation">{</span>index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood<span class="token punctuation">}</span> <span class="token operator">=</span> pro_details                <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>itemgood<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">pro_details</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> <span class="token punctuation">{</span>index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood<span class="token punctuation">}</span> <span class="token operator">=</span> pro_details                <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>看了眼归档竟停了5天没写🤦🏻 一开始是因为拔牙疼了两天没有心思，后面突如其来的疫情和被困在家的神兽又搞得没点空闲🤦🏻</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烟火集——火锅</title>
      <link href="/2021/12/11/yan-huo-ji-huo-guo/"/>
      <url>/2021/12/11/yan-huo-ji-huo-guo/</url>
      
        <content type="html"><![CDATA[<p>广东的冬天冷热无常，天冷的时候计划好打火锅，隔天就升温了。But！对吃货来说，天气算什么呢😏</p><p>小夫妻忙碌了半天准备食材，邀上三五好友，虽然中间出现一些不愉快的插曲，但幸好最终大家吃得满足🍲</p><p>此处表扬本场黑马——『炸腐竹』，好吃到意外🏆</p><p>另外，『牛肉丸』选手也发挥出优秀的水平👏</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gx9aq74s11j235s2dc1kz.jpg" alt="火锅.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 菜谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（四）</title>
      <link href="/2021/12/09/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-si/"/>
      <url>/2021/12/09/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-si/</url>
      
        <content type="html"><![CDATA[<h1 id="菜单左右联动"><a href="#菜单左右联动" class="headerlink" title="菜单左右联动"></a>菜单左右联动</h1><p>需求：</p><ol><li><p>滚动右边菜品栏时，当该分类详情模块顶部接触到滚动区域的顶部，左边对应的分类栏高亮，并且显示在可视区域</p></li><li><p>点击左边分类栏高亮显示，右边菜品栏滚动到该分类顶部菜品所在位置（类似于 HTML 里的锚点功能）</p></li></ol><h2 id="滚动右边菜品联动左边分类"><a href="#滚动右边菜品联动左边分类" class="headerlink" title="滚动右边菜品联动左边分类"></a>滚动右边菜品联动左边分类</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>使用微信小程序提供的API <code>wx.createSelectorQuery</code> 创建节点查询器，获取右边菜品栏每一个分类菜品的高度</p></li><li><p>用一个数组变量 <code>heightset</code> 存储右边每一个分类菜品的高度</p></li><li><p>用一个变量 <code>trigger</code> 记录当前左边所在类目选中的值</p></li><li><p>用一个变量 <code>tophei</code> 记录滚动时距离顶部的高度</p></li><li><p>右边菜品栏滚动时获取当前滚动的高度</p><ul><li><p>若该高度大于 <code>tophei</code>，右边菜品栏向下滚动，若该高度大于 <code>heightset</code> 中 <code>trigger</code> 对应的高度时跳转下一个分类</p></li><li><p>若该高度小于 <code>tophei</code>，右边菜品栏向上滚动，若该高度小于 <code>heightset</code> 中 <code>trigger</code> 对应的高度时跳转上一个分类</p></li></ul></li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">goods_height</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heightset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> cate_height <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createSelectorQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    query<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">'.rig-height'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    query<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            cate_height <span class="token operator">+=</span> item<span class="token punctuation">.</span>height            <span class="token keyword">this</span><span class="token punctuation">.</span>heightset<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cate_height<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">scroll</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>scrollTop    <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tophei<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heightset<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>trigger<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>trigger <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heightset<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>trigger <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>trigger <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tophei <span class="token operator">=</span> scrollTop<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="点击左边分类联动右边菜品"><a href="#点击左边分类联动右边菜品" class="headerlink" title="点击左边分类联动右边菜品"></a>点击左边分类联动右边菜品</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>利用<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">文档</a>提供的 <code>scroll-into-view</code>实现类似于锚点的效果，用一个变量 <code>scroll_into</code> 记录当前视图元素 id 值（此前已设置为对应分类的 cid），点击左边分类时将该分类的 cid 赋值给 <code>scroll_into</code> </p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">itemIze</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> cid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>trigger <span class="token operator">=</span> index    <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_into <span class="token operator">=</span> cid    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 防止因为已经点击过而不能二次触发</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_into <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（三）</title>
      <link href="/2021/12/07/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-san/"/>
      <url>/2021/12/07/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-san/</url>
      
        <content type="html"><![CDATA[<h1 id="创建云函数"><a href="#创建云函数" class="headerlink" title="创建云函数"></a>创建云函数</h1><p>创建uniapp项目时， 如果勾选了 <code>启用uniCloud</code> ，会创建一个uniCloud云开发环境，因为前面在创建项目的时候没有勾选 <code>启用uniCloud</code> 选项，所以这里需要自己创建云服务空间。</p><p>在 <code>HBuilderX</code> 编辑器打开 <code>manifest.json</code> 源码视图，在 <code>mp-weixin</code> 选项新增 cloudfunctionRoot 字段，指定本地已存在的目录作为云开发的本地根目录</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"mp-weixin"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"appid"</span> <span class="token operator">:</span> <span class="token string">"APPID"</span><span class="token punctuation">,</span>    <span class="token string">"setting"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"urlCheck"</span> <span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"usingComponents"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"cloudfunctionRoot"</span><span class="token operator">:</span> <span class="token string">"cloudfunctions/"</span>  <span class="token comment">// +</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>HBuilderX</code> 运行微信开发者工具，在微信开发者工具编辑器中新建 <code>cloudfunctions</code> 目录，然后右键 <code>新建Node.js云函数</code></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gx4lixk5hfj207m0a6myn.jpg"></p><p>点击刚创建的云函数目录，右键 <code>在内建终端打开</code>，执行 <code>npm install --save wx-server-sdk@latest</code> 【文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/wx-server-sdk.html">在云函数中使用 wx-server-sdk</a>】</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gx4lrwwrqwj20ji0o6gzl.jpg"></p><p>在 <code>cloudfunctions/Dish-manage/index.js</code> 文件中编写云函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 云函数入口文件</span><span class="token keyword">const</span> cloud <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'wx-server-sdk'</span><span class="token punctuation">)</span>cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  env<span class="token operator">:</span> <span class="token string">'改为你自己的云环境id'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> db <span class="token operator">=</span> cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> _ <span class="token operator">=</span> db<span class="token punctuation">.</span>command<span class="token keyword">const</span> category <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'dishes-category'</span><span class="token punctuation">)</span><span class="token comment">//菜品类目数据库</span><span class="token keyword">const</span> dishes <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'dishes-data'</span><span class="token punctuation">)</span><span class="token comment">//菜品所有数据</span><span class="token comment">// 云函数入口函数event:可以接到前端传来的值</span>exports<span class="token punctuation">.</span><span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// 1.请求数据库的菜品类目的数据</span><span class="token comment">// 2.请求所有菜品的数据</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res_cate <span class="token operator">=</span> <span class="token keyword">await</span> category<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token operator">:</span>_<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// console.log(res_cate.data)</span>      <span class="token keyword">const</span> res_dis <span class="token operator">=</span> <span class="token keyword">await</span> dishes<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>onsale<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> newdata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      res_dis<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span>category<span class="token punctuation">,</span>cid<span class="token punctuation">,</span><span class="token operator">...</span>data<span class="token punctuation">}</span> <span class="token operator">=</span> item        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>newdata<span class="token punctuation">[</span>cid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          newdata<span class="token punctuation">[</span>cid<span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">{</span>            category<span class="token punctuation">,</span>            cid<span class="token punctuation">,</span>            good_query<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        newdata<span class="token punctuation">[</span>cid<span class="token punctuation">]</span><span class="token punctuation">.</span>good_query<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>newdata<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>      <span class="token keyword">return</span><span class="token punctuation">{</span>        res_cate<span class="token operator">:</span>res_cate<span class="token punctuation">.</span>data<span class="token punctuation">,</span>        res_dis<span class="token operator">:</span>list      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> error  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>右键 <code>启动云函数本地调试</code></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gx4mgilkvrj217w0nzk0n.jpg"></p><p>能正确返回结果即成功，再右键选择 <code>上传并部署：云端安装依赖（不上传node_modules）</code>，查看云开发控制台中云函数列表是否部署成功</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gx4mkmbq6lj20x309fn0j.jpg"></p><h1 id="小程序端调用云函数"><a href="#小程序端调用云函数" class="headerlink" title="小程序端调用云函数"></a>小程序端调用云函数</h1><ol><li>小程序端初始化</li></ol><p>调用云函数、数据库、存储、云托管等 API 时，都需要指定所需访问的云环境 ID，意即指定访问哪个环境下的云函数/数据库/存储/云托管/…资源。有两种方式进行指定：1.使用默认示例 <code>wx.cloud</code>；2.为各个环境使用单独的实例</p><p>这里使用默认示例 <code>wx.cloud</code> 指定所需访问的云环境 ID</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// App.vue</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  env<span class="token operator">:</span> 云环境 <span class="token constant">ID</span><span class="token punctuation">,</span>  traceUser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>小程序端调用</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// pages\home-page\page.vue</span>methods<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">dishEs</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">callFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">'要调用的云函数名称'</span><span class="token punctuation">,</span>       data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 传递给云函数的参数</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（二）</title>
      <link href="/2021/12/06/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-er/"/>
      <url>/2021/12/06/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-er/</url>
      
        <content type="html"><![CDATA[<p>根据设计稿在 <code>pages\页面.vue</code> 文件中写好页面布局和样式，此处不述</p><h1 id="pages-json-文件"><a href="#pages-json-文件" class="headerlink" title="pages.json 文件"></a>pages.json 文件</h1><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等。<a href="https://uniapp.dcloud.io/collocation/pages">官网</a></p><p>以下内容摘自文档</p><h2 id="配置项列表"><a href="#配置项列表" class="headerlink" title="配置项列表"></a>配置项列表</h2><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th></tr></thead><tbody><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">globalStyle</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=pages">pages</a></td><td align="left">Object Array</td><td align="left">是</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=easycom">easycom</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=tabbar">tabBar</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=condition">condition</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=subpackages">subPackages</a></td><td align="left">Object Array</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=preloadrule">preloadRule</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/workers.html">workers</a></td><td align="left">String</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=leftwindow">leftWindow</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=topwindow">topWindow</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=rightwindow">rightWindow</a></td><td align="left">Object</td><td align="left">否</td></tr></tbody></table><h2 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h2><p><code>uni-app</code> 通过 pages 节点配置应用由哪些页面组成，pages 节点接收一个数组，数组每个项都是一个对象，其属性值如下：</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">path</td><td align="left">String</td><td align="left">配置页面路径</td></tr><tr><td align="left">style</td><td align="left">Object</td><td align="left">配置页面窗口表现</td></tr></tbody></table><blockquote><p>注意</p><ul><li>pages节点的第一项为应用入口页（即首页）</li><li>应用中新增/减少页面，都需要对 pages 数组进行修改</li><li>文件名不需要写后缀，框架会自动寻找路径下的页面资源</li></ul></blockquote><p>代码示例：</p><p>开发目录为：</p><pre class="line-numbers language-none"><code class="language-none">┌─pages               │  ├─index│  │  └─index.vue    │  └─login│     └─login.vue    ├─static             ├─main.js       ├─App.vue          ├─manifest.json  └─pages.json         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则需要在 pages.json 中填写</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"pages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"path"</span><span class="token operator">:</span> <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>             <span class="token string">"style"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token string">"path"</span><span class="token operator">:</span> <span class="token string">"pages/login/login"</span><span class="token punctuation">,</span>             <span class="token string">"style"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（一）</title>
      <link href="/2021/12/03/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-yi/"/>
      <url>/2021/12/03/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="页面设计"><a href="#页面设计" class="headerlink" title="页面设计"></a>页面设计</h1><ol><li><p>欢迎页</p></li><li><p>选桌页</p></li><li><p>点餐页</p></li><li><p>菜品详情页</p></li><li><p>订单详情页</p></li><li><p>我的订单页</p></li></ol><h1 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h1><ol><li><p>打开 <code>HBuilderX</code> 创建一个默认模板的 <code>uni-app</code> 项目</p></li><li><p>在 <code>manifest.json</code> 文件配置 <code>appid</code></p></li><li><p>在 <code>pages</code> 目录创建页面文件</p></li><li><p>在 <code>pages.json</code> 文件配置路由信息</p></li><li><p>工具栏 -&gt; 运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具</p></li></ol><blockquote><p>一些乱七八糟的碎碎念<br>    原本是边做项目边写笔记的，这样记的也要清晰一些，上个月因为小孩肠胃炎+全家食物中毒+一些柴米油盐的琐事，每天用于学习的时间就愈发少了，有点无奈🍂<br>    生活一地鸡毛，扫扫还是要继续的阿</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（十）</title>
      <link href="/2021/11/07/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi/"/>
      <url>/2021/11/07/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="菜品类目页"><a href="#菜品类目页" class="headerlink" title="菜品类目页"></a>菜品类目页</h1><h2 id="前端接口"><a href="#前端接口" class="headerlink" title="前端接口"></a>前端接口</h2><p>添加菜品类目：addcategor</p><p>获取菜品类目：obtaincate</p><h2 id="添加菜品类目"><a href="#添加菜品类目" class="headerlink" title="添加菜品类目"></a>添加菜品类目</h2><ol><li>校验函数校验是否为空</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">catecheck</span> <span class="token keyword">extends</span> <span class="token class-name">checking</span> <span class="token punctuation">{</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'请输入菜品类目'</span><span class="token punctuation">]</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Errunder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Blank</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>菜品类目数据库集合设计</li></ol><pre class="line-numbers language-none"><code class="language-none">[{cid：'a+时间戳',//分类idcount：number,//该分类下有多少商品value: '菜品类目',label: '菜品类目',sele_quantity:0,//小程序端用户在该分类下添加了多少商品}]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.数据库操作语句</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').where({label:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).get()</span><span class="token template-punctuation string">`</span></span><span class="token comment">// 获取数据库指定类目的记录，若有记录则该类目已存在</span><span class="token keyword">const</span> cate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').add({data:{value:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',label:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',count:0,sele_quantity:0}})</span><span class="token template-punctuation string">`</span></span><span class="token comment">// 向数据库添加菜品类目记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>使用前面封装过的 <code>getToken().posteve(dataUrl, query)</code> 接口查询是否已存在，若不存在则向数据库添加记录，反之返回客户端已存在响应</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'该类目已存在'</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> cate<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'添加成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'添加失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取菜品类目"><a href="#获取菜品类目" class="headerlink" title="获取菜品类目"></a>获取菜品类目</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/obtaincate'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>page<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">let</span> sk <span class="token operator">=</span> page <span class="token operator">*</span> <span class="token number">10</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').orderBy('cid','desc').limit(10).skip('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sk<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span>total<span class="token operator">:</span>res<span class="token punctuation">.</span>pager<span class="token punctuation">.</span>Total<span class="token punctuation">}</span>    <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span>result<span class="token operator">:</span>data<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>total<span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h2><ul><li><code>ctx.query</code> 获取解析的查询字符串, 当没有查询字符串时，返回一个空对象</li><li><code>Collection.orderBy(fieldPath: string, string: order)</code> 指定查询排序条件</li><li><code>Collection.limit(value: number)</code> 指定查询结果集数量上限</li><li><code>Collection.skip(offset: number)</code> 指定查询返回结果时从指定序列后的结果开始返回，常用于分页</li></ul><h1 id="菜品管理页"><a href="#菜品管理页" class="headerlink" title="菜品管理页"></a>菜品管理页</h1><h2 id="前端接口-1"><a href="#前端接口-1" class="headerlink" title="前端接口"></a>前端接口</h2><p>获取菜品单位：obtainunit</p><p>添加菜品单位：dishunit</p><p>获取菜品：obtaindishes</p><p>上架菜品：uploaddishes</p><p>下架菜品：fromsale</p><p>修改上架的菜品：modifydishes</p><h2 id="获取菜品单位"><a href="#获取菜品单位" class="headerlink" title="获取菜品单位"></a>获取菜品单位</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/obtainunit'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishunit').get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加菜品单位"><a href="#添加菜品单位" class="headerlink" title="添加菜品单位"></a>添加菜品单位</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/dishunit'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> unid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>unit<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">unitcheck</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishunit').where({label:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">const</span> cate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishunit').add({data:{value:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',label:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',unid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'该菜品单位已存在'</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> cate<span class="token punctuation">)</span>      <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'添加成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'添加失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取菜品"><a href="#获取菜品" class="headerlink" title="获取菜品"></a>获取菜品</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/obtaindishes'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>page<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">let</span> sk <span class="token operator">=</span> page <span class="token operator">*</span> <span class="token number">10</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-data').orderBy('time', 'desc').limit(10).skip(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sk<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">).get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span>total<span class="token operator">:</span>res<span class="token punctuation">.</span>pager<span class="token punctuation">.</span>Total<span class="token punctuation">}</span>    <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span>result<span class="token operator">:</span>data<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>total<span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="上架菜品"><a href="#上架菜品" class="headerlink" title="上架菜品"></a>上架菜品</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/uploaddishes'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> category<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> image<span class="token punctuation">,</span> value<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">putoncheck</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> category<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> image<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-data').add({data:{    category:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',name:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',unitprice:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unitprice<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,unit:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',image:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,quantity:0,onsale:true,cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',time:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',monthlysale:0  }})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').where({cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).update({data:{count:db.command.inc(1)}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span><span class="token string">'提交成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'提交失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下架菜品"><a href="#下架菜品" class="headerlink" title="下架菜品"></a>下架菜品</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/fromsale'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> value<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-data').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').update({data:{onsale:false}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').where({cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).update({data:{count:db.command.inc(-1)}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'下架成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改上架的菜品"><a href="#修改上架的菜品" class="headerlink" title="修改上架的菜品"></a>修改上架的菜品</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/modifydishes'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> category<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> image<span class="token punctuation">,</span> value<span class="token punctuation">,</span> valueBefore<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">putoncheck</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> category<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> image<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-data').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').update({data:{    category:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',name:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',unitprice:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unitprice<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,unit:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',image:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,quantity:0,onsale:true,cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',time:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'  }})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">let</span> countBefore <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').where({cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>valueBefore<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).update({data:{count:db.command.inc(-1)}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">let</span> countAfter <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').where({cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).update({data:{count:db.command.inc(1)}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> countBefore<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> countAfter<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'修改成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（九）</title>
      <link href="/2021/10/31/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-jiu/"/>
      <url>/2021/10/31/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-jiu/</url>
      
        <content type="html"><![CDATA[<h1 id="商家信息校验"><a href="#商家信息校验" class="headerlink" title="商家信息校验"></a>商家信息校验</h1><ul><li><p>商家信息表单字段：</p><ul><li>店铺名称</li><li>店铺地址</li><li>店铺logo</li></ul></li><li><p>需校验：</p><ul><li>所有字段不得为空</li><li>不能有空格符</li></ul><p>  在不满足条件的情况点击提交给用户相应的提醒</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">Arrfun</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">Parameter</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> bvc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bvc <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>bvc<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">202</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">Blank</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> vbn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vbn<span class="token punctuation">)</span>    <span class="token keyword">let</span> bvc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>vbn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bvc <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>bvc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="上传商家信息数据到数据库"><a href="#上传商家信息数据到数据库" class="headerlink" title="上传商家信息数据到数据库"></a>上传商家信息数据到数据库</h1><p>使用<a href="https://april-cl.github.io/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-si/">实战篇笔记 扫码点餐小程序云开发（四）</a>封装的 <code>getToken().posteve(dataUrl, query)</code> API接口</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/uploadshop'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> logo<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">shopinfor</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> logo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('shop-infor').add({data:{name:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',address:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',logo:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>logo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'提交成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'提交失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="从数据库拉取商家信息数据"><a href="#从数据库拉取商家信息数据" class="headerlink" title="从数据库拉取商家信息数据"></a>从数据库拉取商家信息数据</h1><p>使用<a href="https://april-cl.github.io/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-si/">实战篇笔记 扫码点餐小程序云开发（四）</a>封装的 <code>getToken().posteve(dataUrl, query)</code> API接口</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/obtainshop'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('shop-infor').get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>Tripurl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'提交失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="修改店铺信息"><a href="#修改店铺信息" class="headerlink" title="修改店铺信息"></a>修改店铺信息</h1><p>使用<a href="https://april-cl.github.io/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-si/">实战篇笔记 扫码点餐小程序云开发（四）</a>封装的 <code>getToken().posteve(dataUrl, query)</code> API接口</p><p>和初次设置共用同一页面，通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.doc.html">Collection.doc(id: string): Document</a> 获取集合中指定记录的引用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/modifyshop'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> logo<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">shopinfor</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> logo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('shop-infor').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').update({data:{name:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',address:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',logo:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>logo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'修改成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'修改失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（八）</title>
      <link href="/2021/10/28/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-ba/"/>
      <url>/2021/10/28/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-ba/</url>
      
        <content type="html"><![CDATA[<h1 id="腾讯云对象存储"><a href="#腾讯云对象存储" class="headerlink" title="腾讯云对象存储"></a>腾讯云对象存储</h1><p>对象存储（Cloud Object Storage，COS）是腾讯云提供的一种存储海量文件的分布式存储服务，具有高扩展性、低成本、可靠安全等优点。</p><p><a href="https://cloud.tencent.com/document/product/436">文档传送门</a></p><h2 id="安装-SDK"><a href="#安装-SDK" class="headerlink" title="安装 SDK"></a>安装 SDK</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i cos-nodejs-sdk-v5 --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h2><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvvictlcjtj21hb0nldpp.jpg"></p><h2 id="获取-SecretId、SecretKey"><a href="#获取-SecretId、SecretKey" class="headerlink" title="获取 SecretId、SecretKey"></a>获取 SecretId、SecretKey</h2><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvv43hchszj215o0dz79v.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvv43s4pppj21h90gxgsb.jpg"></p><h2 id="使用-Upload-File-接口"><a href="#使用-Upload-File-接口" class="headerlink" title="使用 Upload File 接口"></a>使用 Upload File 接口</h2><p>Upload File 实现高级上传，传入参数 SliceSize 可以控制文件大小超出一个数值（默认1MB）时自动使用分块上传，否则使用简单上传</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">COS</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cos-nodejs-sdk-v5'</span><span class="token punctuation">)</span><span class="token keyword">var</span> cos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">COS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  SecretId<span class="token operator">:</span> <span class="token string">'SECRETID'</span><span class="token punctuation">,</span>  SecretKey<span class="token operator">:</span> <span class="token string">'SECRETKEY'</span><span class="token punctuation">,</span>  Protocol<span class="token operator">:</span> <span class="token string">'https:'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> Bucket <span class="token operator">=</span> <span class="token string">'examplebucket-1250000000'</span><span class="token keyword">let</span> Region <span class="token operator">=</span> <span class="token string">'COS_REGION'</span><span class="token keyword">let</span> <span class="token function-variable function">codfun</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    cos<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      Bucket<span class="token punctuation">,</span>      Region<span class="token punctuation">,</span>      Key<span class="token operator">:</span> filename<span class="token punctuation">,</span>        <span class="token comment">// 对象在存储桶中的唯一标识</span>      FilePath<span class="token operator">:</span> path        <span class="token comment">// 本地文件路径</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Location<span class="token punctuation">)</span> <span class="token comment">// 对象的外网访问域名</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由页调用接口"><a href="#路由页调用接口" class="headerlink" title="路由页调用接口"></a>路由页调用接口</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span>upload<span class="token punctuation">,</span> codfun<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../cos/cos.js'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/uploadres'</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">codfun</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>file<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在-postman-发送请求"><a href="#在-postman-发送请求" class="headerlink" title="在 postman 发送请求"></a>在 postman 发送请求</h2><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvvj46tytij20z60mbgvd.jpg" alt="nodemon-upload3.png"></p><h2 id="服务器端接受到文件"><a href="#服务器端接受到文件" class="headerlink" title="服务器端接受到文件"></a>服务器端接受到文件</h2><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvvj4i8lk1j21100hh43u.jpg" alt="nodemon-upload4.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（七）</title>
      <link href="/2021/10/27/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-qi/"/>
      <url>/2021/10/27/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><p>Multer 是一个 node.js 中间件，用于处理 multipart/form-data 类型的表单数据，它主要用于上传文件。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> multer --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.npmjs.com/package/multer">NPM multer</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="文件上传中间件"><a href="#文件上传中间件" class="headerlink" title="文件上传中间件"></a>文件上传中间件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@koa/multer'</span><span class="token punctuation">)</span><span class="token keyword">const</span> storage <span class="token operator">=</span> multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 配置上传文件的目录</span>  <span class="token function-variable function">destination</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'upload/image'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 更改文件名防止重名</span>  <span class="token function-variable function">filename</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>    <span class="token keyword">let</span> fileFormat <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileFormat<span class="token punctuation">)</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token string">'.'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileFormat<span class="token punctuation">[</span>fileFormat<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>storage<span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>upload<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路由页"><a href="#路由页" class="headerlink" title="路由页"></a>路由页</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>upload<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../cos/cos.js'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/uploadres'</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'111111'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 postman 中向 <code>localhost:5000/api/uploadres</code> 发送 <code>POST</code> 请求可看到文件已保存以及服务端响应</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvtsiwhbetj206t02xq38.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvtslr0w76j207j02fq38.jpg"></p><blockquote><p>单纯想吐个槽😑<br>原本做的时候是没问题的，第二天才想着要截图又重新在 postman 发个请求结果死活发不过去，看 commit 也没修改过什么嘛，重新来一遍也不行，后来把 console.log 注释就可以了（￣.￣）写代码是一门玄学，平心静气，love &amp; peace …</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（六）</title>
      <link href="/2021/10/21/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-liu/"/>
      <url>/2021/10/21/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="实现登录功能"><a href="#实现登录功能" class="headerlink" title="实现登录功能"></a>实现登录功能</h1><p>思路：</p><ol><li><p>获取请求字段值</p></li><li><p>使用数据库查询语句 <code>db.collection("表名").where({查询条件键值对}).get()</code></p></li><li><p>判断查询结果，若没有返回数据则提示<code>账号或密码有误</code>，反之登录成功</p></li></ol><h1 id="验证-token-合法性"><a href="#验证-token-合法性" class="headerlink" title="验证 token 合法性"></a>验证 token 合法性</h1><p>使用 <code>basic-auth</code> 解析前端在 header 中传来的 token，使用 <a href="https://github.com/auth0/node-jsonwebtoken#jwtsignpayload-secretorprivatekey-options-callback"><code>jwt.verify(token, secretOrPublicKey, [options, callback])</code></a> 验证 token 合法性</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（五）</title>
      <link href="/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-wu/"/>
      <url>/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="前端字段参数校验"><a href="#前端字段参数校验" class="headerlink" title="前端字段参数校验"></a>前端字段参数校验</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">checking</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> <span class="token operator">...</span>obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> ctx    <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 校验前端传来的值为undefined</span>  <span class="token function">Errunder</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> bvc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bvc <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span><span class="token string">'参数填写错误'</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 校验前端传来的值</span>  <span class="token comment">// field：要校验的字段</span>  <span class="token comment">// msg：报错信息</span>  <span class="token comment">// num：下标</span>  <span class="token function">ValidField</span> <span class="token punctuation">(</span><span class="token parameter">field<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token comment">// 校验手机号码格式</span>      <span class="token string">'phone'</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[3456789]\d{9}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">// 密码校验：6-20位数字和字母结合</span>      <span class="token string">'password'</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?![\d]+$)(?![a-zA-Z]+$)(?![^\da-zA-Z]+$).{6,20}$</span><span class="token regex-delimiter">/</span></span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token number">202</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注册商家账号"><a href="#注册商家账号" class="headerlink" title="注册商家账号"></a>注册商家账号</h1><p>思路：</p><ol><li><p>使用查询语句向数据库查询手机号码之前是否已经注册过</p></li><li><p>已经注册过：返回响应结果“已经注册过了”</p></li><li><p>还没有注册过：根据注册时间生成 <code>uid</code>，使用 <code>JSON.stringify()</code> 格式化生成新纪录，向数据库执行增加记录操作</p></li></ol><h1 id="生成-token-令牌"><a href="#生成-token-令牌" class="headerlink" title="生成 token 令牌"></a>生成 token 令牌</h1><p>1.什么是Token？<br>在计算机身份认证中是令牌（临时）的意思，在词法分析中是标记的意思。一般我们所说的的token大多是指用于身份验证的token</p><p>2.为什么使用token?<br>我们需要每次都知道当前请求的人是谁，但是又不想每次都让他提交用户名和密码，这时就需要有一个等同于用户名密码也能够标识用户身份的东西，即—token.</p><p>3.基于Token的身份验证方法<br>客户端使用用户名和密码请求登录<br>服务端收到请求，验证登录是否成功<br>验证成功后，服务端会返回一个Token给客户端，反之，返回身份验证失败的信息<br>客户端收到Token后把Token用一种方式存储起来,如( cookie / localstorage / sessionstorage / 其他 )<br>客户端每次发起请求时都会将Token发给服务端<br>服务端收到请求后，验证Token的合法性，合法就返回客户端所需数据，反之，返回验证失败的信息</p><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token keyword">const</span> security <span class="token operator">=</span> <span class="token punctuation">{</span>  secretKey<span class="token operator">:</span> <span class="token string">'abcdefg'</span><span class="token punctuation">,</span>  expiresIn<span class="token operator">:</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">gentoken</span> <span class="token punctuation">(</span><span class="token parameter">uid<span class="token punctuation">,</span> scope <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>secretKey<span class="token punctuation">,</span> expiresIn<span class="token punctuation">}</span> <span class="token operator">=</span> security  <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span>uid<span class="token punctuation">,</span> scope<span class="token punctuation">}</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">,</span> <span class="token punctuation">{</span>expiresIn<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> token<span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>gentoken<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（四）</title>
      <link href="/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-si/"/>
      <url>/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-si/</url>
      
        <content type="html"><![CDATA[<h1 id="操作数据库记录"><a href="#操作数据库记录" class="headerlink" title="操作数据库记录"></a>操作数据库记录</h1><p>在 <code>databaseapi.js</code> 文件中进行数据记录增删改查</p><p>思路：</p><ol><li><p>定义一个变量存储云环境 ID</p></li><li><p>定义一个变量存储对应操作的请求 URL</p></li><li><p>通过 <code>axios.post()</code> 方法向指定 URL 发送请求，请求数据为 <code>env</code> （云环境 ID）和 <code>query</code> （数据库操作语句返回值），返回一个 JSON 数据包</p></li></ol><p>示例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// databaseapi.js</span><span class="token keyword">let</span> env <span class="token operator">=</span> cloudID<span class="token keyword">let</span> AddUrl <span class="token operator">=</span> <span class="token string">'https://api.weixin.qq.com/tcb/databaseadd?access_token='</span><span class="token keyword">class</span> <span class="token class-name">getToken</span> <span class="token punctuation">{</span>  <span class="token comment">//调用云开发http api接口</span>  <span class="token keyword">async</span> <span class="token function">posteve</span><span class="token punctuation">(</span><span class="token parameter">dataUrl<span class="token punctuation">,</span> query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">gettoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>dataUrl <span class="token operator">+</span> token<span class="token punctuation">,</span> <span class="token punctuation">{</span>env<span class="token punctuation">,</span> query<span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>errcode <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>data      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token string">'请求出错'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app.js</span><span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection("ceshi").add({data:{name:'name'}})</span><span class="token template-punctuation string">`</span></span><span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h2><p>请求地址</p><pre class="line-numbers language-none"><code class="language-none">POST https://api.weixin.qq.com/tcb/databaseadd?access_token=ACCESS_TOKEN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h2><p>请求地址</p><pre class="line-numbers language-none"><code class="language-none">POST https://api.weixin.qq.com/tcb/databasedelete?access_token=ACCESS_TOKEN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>请求地址</p><pre class="line-numbers language-none"><code class="language-none">POST https://api.weixin.qq.com/tcb/databaseupdate?access_token=ACCESS_TOKEN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h2><p>请求地址</p><pre class="line-numbers language-none"><code class="language-none">POST https://api.weixin.qq.com/tcb/databasequery?access_token=ACCESS_TOKEN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（三）</title>
      <link href="/2021/10/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-san/"/>
      <url>/2021/10/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-san/</url>
      
        <content type="html"><![CDATA[<h1 id="获取云开发调用凭证"><a href="#获取云开发调用凭证" class="headerlink" title="获取云开发调用凭证"></a>获取云开发调用凭证</h1><p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/quickstart.html">微信官方文档</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html">auth.getAccessToken</a></p><ol><li>安装 <code>axios</code></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">npm install axios <span class="token operator">--</span>save        <span class="token comment">// Ajax请求模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>创建数据库操作接口文件 <code>databaseapi.js</code></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./handle.js'</span><span class="token punctuation">)</span><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET'</span>   <span class="token comment">// APPID、APPSECRET 需自己传入</span><span class="token keyword">class</span> <span class="token class-name">getToken</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">async</span> <span class="token function">gettoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> token<span class="token punctuation">.</span>data<span class="token punctuation">.</span>access_token      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token string">'获取 token 错误'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>getToken<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>调用数据库操作api接口</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// login.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span>getToken<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../config/databaseapi.js'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gettoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（二）</title>
      <link href="/2021/10/16/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-er/"/>
      <url>/2021/10/16/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-er/</url>
      
        <content type="html"><![CDATA[<h1 id="设置全局异常处理中间件"><a href="#设置全局异常处理中间件" class="headerlink" title="设置全局异常处理中间件"></a>设置全局异常处理中间件</h1><ul><li><p>在开发中，为了及时的反馈信息，与前端对接好，异常处理，是后端必须去做的一种事情，反馈正确的信息，可以加快bug的解决</p></li><li><p>在 node中，由于基本都是异步方法，所以，为了能够处理好异步的异常，我们需要使用 async/await来解决</p></li></ul><ol><li>创建异常基类</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// handle.js</span><span class="token keyword">class</span> <span class="token class-name">result</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建处理异常中间件</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// abnormal.js</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./handle.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">abnormal</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> isresult <span class="token operator">=</span> err <span class="token keyword">instanceof</span> <span class="token class-name">result</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isresult<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>        msg<span class="token operator">:</span> err<span class="token punctuation">.</span>msg      <span class="token punctuation">}</span>      ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> err<span class="token punctuation">.</span>code    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>        msg<span class="token operator">:</span> <span class="token string">'服务器反生错误'</span>      <span class="token punctuation">}</span>      ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">500</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> abnormal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>注册全局异常处理中间件</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app.js</span><span class="token keyword">const</span> abnormal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config/abnormal.js'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>abnormal<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="统一返回给前端的-JSON-格式"><a href="#统一返回给前端的-JSON-格式" class="headerlink" title="统一返回给前端的 JSON 格式"></a>统一返回给前端的 JSON 格式</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// result.js</span><span class="token keyword">class</span> <span class="token class-name">result</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> msg<span class="token operator">=</span><span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> extra<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> ctx    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data    <span class="token keyword">this</span><span class="token punctuation">.</span>extra <span class="token operator">=</span> extra  <span class="token punctuation">}</span>  <span class="token function">answer</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>      msg<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">,</span>      data<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>      extra<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>extra    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="https://blog.csdn.net/pig_is_duck/article/details/107916036?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_aggregation-2-107916036.pc_agg_rank_aggregation&amp;utm_term=node+%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86&amp;spm=1000.2123.3001.4430">KOA — 5. 全局异常处理</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烟火集——湿炒牛河</title>
      <link href="/2021/10/16/yan-huo-ji-shi-chao-niu-he/"/>
      <url>/2021/10/16/yan-huo-ji-shi-chao-niu-he/</url>
      
        <content type="html"><![CDATA[<p>做为一个常年在外生活的潮汕人，肠粉和牛肉粿的味道始终在我的乡愁中萦绕。尝试自己动手做过，肠粉一直复刻不出那种味道，不正宗的湿炒牛河倒是做了几回挺得我意的（感觉灵魂还是在于沙茶酱😋）</p><h1 id="用料"><a href="#用料" class="headerlink" title="用料"></a>用料</h1><table><thead><tr><th>食材</th><th>用量</th></tr></thead><tbody><tr><td>牛肉</td><td>根据用餐人数</td></tr><tr><td>粿条</td><td>根据用餐人数</td></tr><tr><td>鸡蛋</td><td>随意</td></tr><tr><td>酱油</td><td>适量（用于炒粿条）</td></tr><tr><td>酱油</td><td>两勺（用于湿炒料汁）</td></tr><tr><td>沙茶酱</td><td>一勺（用于腌制牛肉）</td></tr><tr><td>沙茶酱</td><td>一勺（用于湿炒料汁）</td></tr><tr><td>食用油</td><td>适量（用于腌制牛肉）</td></tr><tr><td>食用油</td><td>适量（用于炒牛河）</td></tr><tr><td>蚝油</td><td>一勺</td></tr><tr><td>生粉</td><td>适量（用于腌制牛肉）</td></tr><tr><td>生粉</td><td>适量（用于湿炒料汁）</td></tr><tr><td>水</td><td>半碗</td></tr></tbody></table><p>此菜谱用量不求精准，因为大多数时候我并没有按上面的量放</p><p>锅具：铸铁炒锅</p><h1 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h1><ul><li><p>牛肉切薄片后浸泡于清水中，出血水后沥干，加『食用油』、『沙茶酱』、『生粉』进行腌制</p></li><li><p>『鸡蛋』磕入碗中打散备着</p></li><li><p>调湿炒料汁：『沙茶酱』 + 『酱油』 + 『蚝油』 + 『生粉』 + 『水』</p></li></ul><h1 id="湿炒步骤"><a href="#湿炒步骤" class="headerlink" title="湿炒步骤"></a>湿炒步骤</h1><ol><li><p>大火起锅烧干水分，转小火放油烧至有点小烟，放入鸡蛋液小炒至无流动液体状态（鸡蛋留在锅中亦可）</p></li><li><p>放入粿条炒至干爽状态，加入鸡蛋酱油调味炒均匀起锅</p></li><li><p>热油加入牛肉炒至变色</p></li><li><p>加入湿炒料汁大火煮开</p></li><li><p>将炒熟的牛肉码在粿条上，淋上料汁即可</p></li></ol><h1 id="成品图"><a href="#成品图" class="headerlink" title="成品图"></a>成品图</h1><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gvgjypeoxoj6334334qv802.jpg" alt="湿炒牛河.jpg"></p><p>这个菜谱做出来的是不能和外面买的相比，但解解馋还是OK的😎</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 菜谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（一）</title>
      <link href="/2021/10/15/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-yi/"/>
      <url>/2021/10/15/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>依旧是写在前面的碎碎念：💭<br>    学习编程我觉得最好的方式就是动手写代码⌨️<br>    相对于阅读文档，在提出需求解决需求的过程中以主动探索为驱动对于我来说能够更快速掌握技巧并加深印象🧠<br>    之前做过的项目也都会在笔记本上作记录，但后来发现这种纸质记录优势查询起来有些困难也不太利于回顾，所以现在要慢慢养成用博客来记录的习惯☺️</p></blockquote><h1 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h1><ol><li><p>使用 <code>npm init</code> 初始化项目</p></li><li><p>安装所需要的框架模块</p></li></ol><pre class="line-numbers language-none"><code class="language-none">npm install koa --save                  //koa框架npm install koa-json --save             //返回给前端的json对象npm install koa-bodyparser --save       //post提交的对象npm install koa-router --save           //路由npm install koa2-cors --sav             //解决跨区npm install nodemon --save              //启动服务器端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建 <code>.gitignore</code> 文件</li></ol><pre class="line-numbers language-none"><code class="language-none">/.idea/node_modulespackage-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>创建入口文件 <code>app.js</code></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-json'</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2-cors'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>在编辑器终端输入 <code>nodemon app.js</code></li></ol><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gvgigm0j4yj60ba0440u002.jpg"></p><p>搭建完成🎉</p><h1 id="访问登录页"><a href="#访问登录页" class="headerlink" title="访问登录页"></a>访问登录页</h1><ol><li>创建登录页 <code>login.js</code></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'login.js'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在 <code>app.js</code> 注入接口</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router/login/login.js'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> login<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>在编辑器终端输入 <code>nodemon app.js</code></p></li><li><p>在浏览器访问 <code>http://localhost:4000/api/register</code></p></li><li><p>回到编辑器终端可以看到</p></li></ol><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gvgixcu0boj60ay04v3zy02.jpg"></p><p>访问成功🎉</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烟火集——鲍鱼鸡汤</title>
      <link href="/2021/10/07/yan-huo-ji-bao-yu-ji-tang/"/>
      <url>/2021/10/07/yan-huo-ji-bao-yu-ji-tang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言<br>    最近刚好想把日常菜谱记录下来，以往都是记在了下厨房，前两天写博客突然想到反正是记录，那就开个 Tag 来写菜谱叭~</p></blockquote><p>首次尝试炖鲍鱼鸡汤，本来我是对此类补汤无感的，但味道竟意外地好喝，所以记下来🤤</p><h1 id="用料"><a href="#用料" class="headerlink" title="用料"></a>用料</h1><table><thead><tr><th>食材</th><th>用量</th></tr></thead><tbody><tr><td>鲍鱼</td><td>5个</td></tr><tr><td>鸡架</td><td>1只</td></tr><tr><td>鱼胶</td><td>一小把</td></tr><tr><td>石斛</td><td>一小把</td></tr><tr><td>红枣</td><td>一小把</td></tr><tr><td>姜</td><td>一片</td></tr><tr><td>盐</td><td>3小勺</td></tr><tr><td>开水</td><td>5碗</td></tr></tbody></table><p>此菜谱用量不求精准，根据用餐人数调整用量🙆</p><p>炖汤电器：隔水炖</p><h1 id="泡发清洗准备"><a href="#泡发清洗准备" class="headerlink" title="泡发清洗准备"></a>泡发清洗准备</h1><ul><li><p>鱼胶提前泡水，此次泡了约3个小时</p></li><li><p>鲍鱼洗干净，可以用牙刷刷鲍鱼壳</p></li><li><p>鸡架洗干净，鸡架买的时候叫老板娘切成小块</p></li><li><p>红枣洗干净</p></li><li><p>石斛洗干净</p></li></ul><h1 id="炖汤过程"><a href="#炖汤过程" class="headerlink" title="炖汤过程"></a>炖汤过程</h1><ol><li><p>将洗净的鲍鱼带壳放入电饭锅中</p></li><li><p>先把鸡架焯水，即冷水下锅，同时放入姜片去腥，水沸腾后撇去浮沫至不再或仅有少量浮沫产生，将鸡架捞起放入凉水中洗净表面后放入电炖锅中</p></li><li><p>将洗净的红枣、石斛和鱼胶放入电炖锅中</p></li><li><p>倒入煮开的生命源泉</p></li><li><p>调整炖汤时间为3.5h，开始炖起✨</p></li><li><p>剩余0.1h时加入适量盐（这次实际上是加了4勺，喝着感觉咸了）</p></li></ol><p>稍稍等待片刻，美味即将到来🍲</p><p>哈哈哈这里应该放个成品图，但是今晚着急喝没拍好，下次补图📷</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 菜谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析 URL</title>
      <link href="/2021/10/07/qian-xi-url/"/>
      <url>/2021/10/07/qian-xi-url/</url>
      
        <content type="html"><![CDATA[<h1 id="URL（统一资源定位符）"><a href="#URL（统一资源定位符）" class="headerlink" title="URL（统一资源定位符）"></a>URL（统一资源定位符）</h1><p>通常是指用户在浏览器中输入的地址</p><pre class="line-numbers language-none"><code class="language-none">URL=协议://域名或IP:端口/路径?查询参数#锚点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><p>服务器一般使用两种协议：<code>HTTP</code>和<code>HTTPS</code></p><h1 id="域名或IP"><a href="#域名或IP" class="headerlink" title="域名或IP"></a>域名或IP</h1><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>IP 主要约定了两件事：</p><ol><li>如何定位一台设备，比如说我家在某市某区某村某门牌号，这就是我家的物理 IP</li><li>如何封装数据报文以跟其他设备交流</li></ol><p>IP 分为：</p><ol><li>内网 IP</li></ol><p>路由器在家中创建一个内网，家里通过路由器上网的设备会分配一个内网 IP</p><ol start="2"><li>外网 IP</li></ol><p>用户向网络服务商租用带宽所分配的 IP</p><p>外网 IP 和内网 IP 的互相访问需要经过路由器中转，但在同一网络的设备可以直接互相访问</p><p>特殊 IP</p><ol><li>127.0.0.1 表示自己</li><li>localhost 通过 host 指定为自己</li><li>0.0.0.0 不表示任何设备</li></ol><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>域名可以说是一个 IP 地址的代称，目的是为了便于记忆后者</p><p>可以通过 <code>ping</code> 命令获取一个域名对应的 IP</p><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv65e6xhasj60d205cq6i02.jpg" alt="ping截图.png"></p><p>域名和 IP 通过 <code>DNS</code> 对应起来，它们之间可以是一对多的关系</p><ul><li>一个域名对应多个 IP</li></ul><p>均衡负载，防止一台服务器崩溃，假想一下若是阿里域名只对应了一个 IP，双十一的访问量激增会导致怎样的后果</p><ul><li>一个 IP 对应多个域名</li></ul><p>共享主机。预算不足优选。</p><p>延伸：xxx.github.io 和 yyy.github.io 有同一个一级域名（github.io），但是是两个不同的网站</p><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>一个端口提供一种服务，就像你无法在电影院的售票口买到爆米花</p><p><a href="https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8">端口维基百科</a></p><p>端口和 IP 缺一不可</p><h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><p>可以用于请求不同页面</p><h1 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a>查询参数</h1><p>可以在同一页面显示不同内容</p><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv65j1b5b9j61bl0c0q8402.jpg" alt="查询参数.png"></p><h1 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h1><p>可以定位到页面位置，不会发送到服务器</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈浏览器的 Event Loop</title>
      <link href="/2021/10/02/tan-tan-event-loop/"/>
      <url>/2021/10/02/tan-tan-event-loop/</url>
      
        <content type="html"><![CDATA[<p>关于 Event Loop 网络上的文章写得很详尽，多看几篇反复思考勤动笔记录大致就能明白些了，这也是我一贯的学习方法。</p><p>在了解 Event Loop 之前先理解什么是<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack">执行栈（调用栈）</a>，记住，<strong>执行栈是存储</strong> <em><strong>函数调用</strong></em> <strong>的栈结构，遵循先进后出的原则</strong>（我因为这一点没想明白所以花了好多时间 😭）</p><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p>先看下这个形象的<a href="https://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html">类比</a></p><p>把计算机的核心 CPU 比作一座时刻运行的工厂。</p><p>进程就好比工厂的车间，它代表 CPU 所能处理的单个任务。任一时刻，CPU 总是运行一个进程，其他进程处于非运行状态。『进程是 CPU 资源分配的最小单位』</p><p>线程就好比车间里的工人，车间的房间（内存资源）对于工人共享的，这些工人协同完成一个任务。『线程是 CPU 调度的最小单位』</p><h1 id="单线程的-JavaScript"><a href="#单线程的-JavaScript" class="headerlink" title="单线程的 JavaScript"></a>单线程的 JavaScript</h1><p>所谓单线程，是指在 JavaScript 引擎中负责解释和执行 JavaScript 代码的线程唯一，同一时间上只能执行一件任务。假设 JavaScript 支持多线程，当一个线程在某 DOM 节点上添加内容，而另一个线程同时执行删除该 DOM 节点的任务，这时就会把浏览器搞懵了，所以，为了避免复杂性，从一诞生，JavaScript 就是单线程，这已经成了这门语言的核心特征。</p><h1 id="同步任务和异步任务"><a href="#同步任务和异步任务" class="headerlink" title="同步任务和异步任务"></a>同步任务和异步任务</h1><p>既然 JavaScript 是单线程的，那么当有多个任务则需要排队执行，如果前一个任务耗时很长，后一个任务就不得不一直等着，那么程序可能因为等待会出现假死状态，这对于一个用户体验很强的语言来说是非常不友好的。</p><p>为了解决这个问题，JavaScript 语言将任务的执行模式分为两种：同步和异步。</p><p>同步任务：必须等到结果来了之后才能做其他的事情，举例来说就是逛街时买衣服，你必须付了款才能把衣服带走。</p><p>异步任务：不需要等到结果来了才能继续往下走，等结果期间可以做其他的事情，结果来了会收到通知。举例来说就是要吃火锅，要排号等叫到了号才能进去吃，排号期间你可以继续逛街。</p><h1 id="执行栈和任务队列"><a href="#执行栈和任务队列" class="headerlink" title="执行栈和任务队列"></a>执行栈和任务队列</h1><p>JavaScript 的代码执行时：</p><ol><li><p>主线程会从上到下一步步的执行代码，同步任务会被依次加入执行栈中先执行。</p></li><li><p>主线程之外，还存在一个”任务队列”（task queue）。只要<strong>异步任务有了运行结果</strong>，就在”任务队列”之中放置一个事件。</p></li><li><p>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p></li><li><p>主线程不断重复上面的第三步。</p></li></ol><h1 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h1><p>那么问题来了，如果在执行异步任务回调事件的过程中突然有重要的数据需要获取，或是说有事件突然需要处理一下，按照队列遵循先进先出的原则，后来的事件都是被加在队尾等到前面的事件执行完了才会被执行。这个时候就催生了宏任务和微任务，微任务使得一些异步任务得到及时的处理。</p><p>也就是在上文 『<code>2. 主线程之外，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件</code>』 这一步中，将微任务放到本层循环的微任务队列（优先级高），将宏任务放到下层循环的宏任务队列（优先级低）。</p><p>这里也更正一下上文 『<code>3. 一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</code>』 ，应当是 『<code>一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"微任务任务队列"并将事件压入执行栈中执行至"微任务任务队列"为空（到这里也就是完成了一轮事件循环），完毕后将"宏任务队列"队头的第一个宏任务压入执行栈执行（后面就对应了上文步骤1、步骤2，有相关的微任务就进入微任务队列，宏任务就插到宏任务队列队尾）</code>』</p><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv4hdicllnj60p309nju202.jpg" alt="任务队列.png"></p><p>关于宏任务和微任务这有个<a href="https://juejin.cn/post/6844903657264136200#heading-0">例子</a>解释得很形象。</p><p>记住：<strong>在当前的微任务没有执行完成时，是不会执行下一个宏任务的</strong></p><p>先介绍一下(浏览器环境的)宏任务和微任务大致有哪些：</p><ul><li><p>宏任务</p><ul><li>script全部代码</li><li>setTimeout</li><li>setInterval    </li><li>I/O    </li><li>mouseover(之类的事件)</li><li>Web API大部分异步返回方法(XHR,fetch)</li></ul></li><li><p>微任务</p><ul><li>Promise.then catch finally</li><li>MutationObserver</li><li>queueMicrotask</li></ul></li></ul><h1 id="浏览器中的-Event-Loop"><a href="#浏览器中的-Event-Loop" class="headerlink" title="浏览器中的 Event Loop"></a>浏览器中的 Event Loop</h1><p>终于进入正题了，看前面的文字可能还有些晕乎，现在我们先来通过代码理解。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制这段代码到控制台，会发现输出顺序为：</p><pre class="line-numbers language-none"><code class="language-none">script startscript endpromise1promise2setTimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，联系上文提及的 <code>执行栈</code>、<code>宏任务</code>、<code>微任务</code> 来解释一下。</p><p>主线程会从上到下一步步的执行代码，同步任务会被依次加入执行栈中先执行，而异步任务会在任务队列中放置一个回调事件，等待执行栈清空后执行。而根据事件的优先级将事件划分到对应的宏任务和微任务队列中。</p><pre class="line-numbers language-none"><code class="language-none">宏任务：Run script | setTimeout callback 微任务：Promise then | Promise then执行栈：Promise callback控制台输入：script start | script end | promise1 | promise2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv3sj3wlrog60gc0e4k3h02.gif" alt="第一次执行"></p><p>到这里事件循环的第一层循环结束，开始第二层循环</p><pre class="line-numbers language-none"><code class="language-none">宏任务：setTimeout callback 微任务：执行栈：setTimeout callback控制台输入：script start | script end | promise1 | promise2 | setTimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv4hgiaujqg60gc0e4q4r02.gif" alt="第二次执行.gif"></p><p>动图体验戳<a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">这里</a></p><p>再来看一个比较复杂的案例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2 end'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1'</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1 Promise'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1 Promise then'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1 setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1 setTimeout Promise'</span><span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1 setTimeout Promise then'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise'</span><span class="token punctuation">)</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise then'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout2'</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout2 Promise'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout2 Promise then'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把代码copy到浏览器控制台运行可以看到如下输出</p><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv651lb5mij60jf09340102.jpg" alt="运行结果.png"></p><p>用上面同样的思路解释下</p><p>第一次循环</p><pre class="line-numbers language-none"><code class="language-none">宏任务Run script | setTimeout1 callback | setTimeout2 callback微任务async1 end | Promise then控制台输出script start | async2 end | Promise | script end | async1 end | Promise then<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第二次循环</p><pre class="line-numbers language-none"><code class="language-none">宏任务setTimeout1 callback | setTimeout2 callback | setTimeout1 setTimeout callback微任务setTimeout1 Promise then控制台输出setTimeout1 | setTimeout1 Promise | setTimeout1 Promise then<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第三次循环</p><pre class="line-numbers language-none"><code class="language-none">宏任务setTimeout2 callback | setTimeout1 setTimeout callback微任务setTimeout2 Promise then控制台输出setTimeout2 | setTimeout2 Promise | setTimeout2 Promise then<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第四次循环</p><pre class="line-numbers language-none"><code class="language-none">宏任务setTimeout1 setTimeout callback微任务setTimeout1 setTimeout Promise then控制台输出setTimeout1 setTimeout | setTimeout1 setTimeout Promise | setTimeout1 setTimeout Promise then<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>本来还要再写 Node.js 中的 Event Loop 的，但是因为时间关系而且我发现我的理解还是有些模糊，这个就留着搞明白了再写写~</p><p>参考文章：</p><p><a href="https://www.ruanyifeng.com/blog/2014/10/event-loop.html">JavaScript 运行机制详解：再谈Event Loop</a></p><p><a href="https://segmentfault.com/a/1190000038783854">我是这样理解EventLoop的</a></p><p><a href="https://juejin.cn/post/6844903764202094606#heading-19">一次弄懂Event Loop（彻底解决此类面试问题）</a></p><p><a href="https://juejin.cn/post/6844904106121936903">这一次，Event Loop 一波带走</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深夜吃糖，理解 async 和 await</title>
      <link href="/2021/09/29/shen-ye-chi-tang-li-jie-async-he-await/"/>
      <url>/2021/09/29/shen-ye-chi-tang-li-jie-async-he-await/</url>
      
        <content type="html"><![CDATA[<h1 id="async-关键字"><a href="#async-关键字" class="headerlink" title="async 关键字"></a>async 关键字</h1><p>放在函数声明之前，生成一个异步函数，保证函数的返回值为 promise</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"Hello"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1guwu5pbd5bj608m0370tg02.jpg" alt="async.png"></p><ul><li><p>将 async 关键字加到函数申明中，可以告诉它们返回的是 promise，而不是直接返回值</p></li><li><p>避免了同步函数为支持使用 await 带来的任何潜在开销</p></li><li><p>在函数声明为 async 时，JavaScript引擎会添加必要的处理以优化程序</p></li></ul><h1 id="await-关键字"><a href="#await-关键字" class="headerlink" title="await 关键字"></a>await 关键字</h1><p>await 只在异步函数里面才起作用。它可以放在任何异步的，基于 promise 的函数之前。它会暂停代码在该行上，直到 promise 完成，然后返回结果值。在暂停的同时，其他正在等待执行的代码就有机会执行了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">takeLongTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"long_time_value"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">takeLongTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1guxxujikq9j608v06gdgr02.jpg" alt="await.png"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://segmentfault.com/a/1190000007535316">理解 JavaScript 的 async/await</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/05/async.html">async 函数的含义和用法</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 uni-app（四）路由</title>
      <link href="/2021/09/28/xiao-bai-cai-bi-ji-uni-app-si-lu-you/"/>
      <url>/2021/09/28/xiao-bai-cai-bi-ji-uni-app-si-lu-you/</url>
      
        <content type="html"><![CDATA[<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>框架统一管理，需要在 pages.json 里配置每个路由页面的路径及页面样式。</p><h1 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h1><h2 id="使用-navigator-组件跳转"><a href="#使用-navigator-组件跳转" class="headerlink" title="使用 navigator 组件跳转"></a>使用 navigator 组件跳转</h2><p>类似 HTML 中的 <code>&lt;a&gt;</code> 组件，但只能跳转本地页面。目标页面必须在 pages.json 中注册。</p><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">String</td><td align="left"></td><td align="left">应用内的跳转链接，值为相对路径或绝对路径，注意不能加 <code>.vue</code> 后缀</td></tr><tr><td align="left">open-type</td><td align="left">String</td><td align="left">navigate</td><td align="left">跳转方式，有效值：navigate、redirect、switchTab、reLaunch、navigateBack、exit</td></tr><tr><td align="left">delta</td><td align="left">Number</td><td align="left"></td><td align="left">当 open-type 为 ‘navigateBack’ 时有效，表示回退的层数</td></tr><tr><td align="left">animation-type</td><td align="left">String</td><td align="left">pop-in/out</td><td align="left">当 open-type 为 navigate、navigateBack 时有效，窗口的显示/关闭动画效果</td></tr><tr><td align="left">animation-duration</td><td align="left">Number</td><td align="left">300</td><td align="left">当 open-type 为 navigate、navigateBack 时有效，窗口显示/关闭动画的持续时间。</td></tr><tr><td align="left">hover-class</td><td align="left">String</td><td align="left">navigator-hover</td><td align="left">指定点击时的样式类，当hover-class=”none”时，没有点击态效果</td></tr><tr><td align="left">hover-stop-propagation</td><td align="left">Boolean</td><td align="left">false</td><td align="left">指定是否阻止本节点的祖先节点出现点击态</td></tr><tr><td align="left">hover-start-time</td><td align="left">Number</td><td align="left">50</td><td align="left">按住后多久出现点击态，单位毫秒</td></tr><tr><td align="left">hover-stay-time</td><td align="left">Number</td><td align="left">600</td><td align="left">手指松开后点击态保留时间，单位毫秒</td></tr><tr><td align="left">target</td><td align="left">String</td><td align="left">self</td><td align="left">在哪个小程序目标上发生跳转，默认当前小程序，值域self/miniProgram</td></tr></tbody></table><h2 id="调用-API-跳转"><a href="#调用-API-跳转" class="headerlink" title="调用 API 跳转"></a>调用 API 跳转</h2><table><thead><tr><th align="left">API</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://uniapp.dcloud.io/api/router?id=navigateto">uni.navigateTo</a></td><td align="left">保留当前页面，跳转到应用内的某个页面，使用uni.navigateBack可以返回到原页面，相当于 open-type=”navigate”</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/api/router?id=redirectto">uni.redirectTo</a></td><td align="left">关闭当前页面，跳转到应用内的某个页面，相当于 open-type=”redirect”</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/api/router?id=relaunch">uni.reLaunch</a></td><td align="left">关闭所有页面，打开到应用内的某个页面，相当于 open-type=”reLaunch”</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/api/router?id=switchtab">uni.switchTab</a></td><td align="left">跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面，相当于 open-type=”switchTab”</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/api/router?id=navigateback">uni.navigateBack</a></td><td align="left">关闭当前页面，返回上一页面或多级页面，相当于 open-type=”navigateBack”</td></tr></tbody></table><h1 id="页面栈"><a href="#页面栈" class="headerlink" title="页面栈"></a>页面栈</h1><p>框架以栈的形式管理当前所有页面， 当发生路由切换的时候，页面栈的表现如下：</p><table><thead><tr><th>由方式</th><th>页面栈表现</th><th>触发时机</th></tr></thead><tbody><tr><td>初始化</td><td>新页面入栈</td><td>uni-app 打开的第一个页面</td></tr><tr><td>打开新页面</td><td>新页面入栈</td><td>调用 API <code>uni.navigateTo</code>、使用组件 <code>&lt;navigator open-type="navigator"/&gt;</code></td></tr><tr><td>页面重定向</td><td>当前页面出栈，新页面入栈</td><td>调用 API <code>uni.redirectTo</code>、使用组件 <code>&lt;navigator open-type="redirect"/&gt;</code></td></tr><tr><td>页面返回</td><td>页面不断出栈，直到目标返回页</td><td>调用 API <code>uni.navigateBack</code>、使用组件 <code>&lt;navigator open-type="navigateBack"/&gt;</code>、用户按左上角返回按钮、安卓用户点击物理back按键</td></tr><tr><td>Tab 切换</td><td>页面全部出栈，只留下新的 Tab 页面</td><td>调用 API <code>uni.switchTab</code>、使用组件 <code>&lt;navigator open-type="switchTab"/&gt;</code>、用户切换 Tab</td></tr><tr><td>重加载</td><td>页面全部出栈，只留下新的页面</td><td>调用 API <code>uni.reLaunch</code>、使用组件 <code>&lt;navigator open-type="reLaunch"/&gt;</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 uni-app（三）生命周期</title>
      <link href="/2021/09/24/xiao-bai-cai-bi-ji-uni-app-san-sheng-ming-zhou-qi/"/>
      <url>/2021/09/24/xiao-bai-cai-bi-ji-uni-app-san-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h1><blockquote><p>应用生命周期仅可在App.vue中监听，在其它页面监听无效</p></blockquote><table><thead><tr><th align="left">函数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">onLaunch</td><td align="left">当 <code>uni-app</code> 初始化完成时触发（全局只触发一次）</td></tr><tr><td align="left">onShow</td><td align="left">当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td align="left">onHide</td><td align="left">当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td align="left">onError</td><td align="left">当 <code>uni-app</code> 报错时触发</td></tr><tr><td align="left">onUniNViewMessage</td><td align="left">对 <code>nvue</code> 页面发送的数据进行监听</td></tr><tr><td align="left">onUnhandledRejection</td><td align="left">对未处理的 Promise 拒绝事件监听函数</td></tr><tr><td align="left">onPageNotFound</td><td align="left">页面不存在监听函数</td></tr><tr><td align="left">onThemeChange</td><td align="left">监听系统主题变化</td></tr></tbody></table><h1 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h1><blockquote><p>在每个页面中定义</p></blockquote><table><thead><tr><th align="left">函数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">onInit</td><td align="left">监听页面初始化，其参数同 onLoad 参数，为上个页面传递的数据，参数类型为 Object（用于页面传参），触发时机早于 onLoad</td></tr><tr><td align="left">onLoad</td><td align="left">监听页面加载，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参）</td></tr><tr><td align="left">onShow</td><td align="left">监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td></tr><tr><td align="left">onReady</td><td align="left">监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发</td></tr><tr><td align="left">onHide</td><td align="left">监听页面隐藏</td></tr><tr><td align="left">onUnload</td><td align="left">监听页面卸载</td></tr><tr><td align="left">onResize</td><td align="left">监听窗口尺寸变化</td></tr><tr><td align="left">onPullDownRefresh</td><td align="left">监听用户下拉动作，一般用于下拉刷新</td></tr><tr><td align="left">onReachBottom</td><td align="left">页面滚动到底部的事件（不是scroll-view滚到底），常用于下拉下一页数据</td></tr><tr><td align="left">onTabItemTap</td><td align="left">点击 tab 时触发，参数为Objec</td></tr><tr><td align="left">onShareAppMessage</td><td align="left">用户点击右上角分享</td></tr><tr><td align="left">onPageScroll</td><td align="left">监听页面滚动，参数为Object</td></tr><tr><td align="left">onNavigationBarButtonTap</td><td align="left">监听原生标题栏按钮点击事件，参数为Object</td></tr><tr><td align="left">onBackPress</td><td align="left">监听页面返回</td></tr><tr><td align="left">onNavigationBarSearchInputChanged</td><td align="left">监听原生标题栏搜索输入框输入内容变化事件</td></tr><tr><td align="left">onNavigationBarSearchInputConfirmed</td><td align="left">监听原生标题栏搜索输入框搜索事件，用户点击软键盘上的“搜索”按钮时触发。</td></tr><tr><td align="left">onNavigationBarSearchInputClicked</td><td align="left">监听原生标题栏搜索输入框点击事件（pages.json 中的 searchInput 配置 disabled 为 true 时才会触发）</td></tr><tr><td align="left">onShareTimeline</td><td align="left">监听用户点击右上角转发到朋友圈</td></tr><tr><td align="left">onAddToFavorites</td><td align="left">监听用户点击右上角收藏</td></tr></tbody></table><h1 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h1><blockquote><p>和 vue 组件中的生命周期一致</p></blockquote><table><thead><tr><th align="left">函数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">在实例初始化之后被调用</td></tr><tr><td align="left">created</td><td align="left">在实例创建完成后被立即调用</td></tr><tr><td align="left">beforeMount</td><td align="left">在挂载开始之前被调用</td></tr><tr><td align="left">mounted</td><td align="left">挂载到实例上去之后调用</td></tr><tr><td align="left">beforeUpdate</td><td align="left">数据更新时调用，发生在虚拟 DOM 打补丁之前</td></tr><tr><td align="left">updated</td><td align="left">由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子</td></tr><tr><td align="left">beforeDestroy</td><td align="left">实例销毁之前调用</td></tr><tr><td align="left">destroyed</td><td align="left">Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</td></tr></tbody></table><h1 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h1><ol><li>beforeCreate</li><li>onLoad</li><li>created</li><li>onShow</li><li>beforeMount</li><li>onReady</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>返回上一页时，会执行onUnLoad，并未执行destroyed，并未执行onHide</li><li>进入下一页时，会执行onHide</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 uni-app（二）基础篇</title>
      <link href="/2021/09/23/xiao-bai-cai-bi-ji-uni-app-er-ji-chu-pian/"/>
      <url>/2021/09/23/xiao-bai-cai-bi-ji-uni-app-er-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h1><ul><li>页面文件遵循 Vue 单文件组件 (SFC) 规范，即含三种类型的顶级语言块 <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code></li><li>组件标签靠近小程序规范，详见 <a href="https://uniapp.dcloud.io/component/">uni-app 组件规范</a>。uni-app 的组件分为基础组件和扩展组件。基础组件在 uni-app 框架中已经内置，比如 <code>&lt;view&gt;</code> 组件。扩展组件需要将组件导入项目中才可以使用</li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 wx 替换为 uni，详见 <a href="https://uniapp.dcloud.io/api/README">uni-app 接口规范</a></li><li>生命周期：<a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%E5%BA%94%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">应用生命周期</a>、<a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a>、<a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">组件生命周期（同 Vue 规范）</a></li><li>建议使用flex布局</li></ul><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>┌─uniCloud              云空间目录，阿里云为uniCloud-aliyun,腾讯云为uniCloud-tcb（详见uniCloud）<br>│─components            符合vue组件规范的uni-app组件目录<br>│  └─comp-a.vue         可复用的a组件<br>├─hybrid                App端存放本地html文件的目录，<a href="https://uniapp.dcloud.io/component/web-view">详见</a><br>├─platforms             存放各平台专用页面的目录，<a href="https://uniapp.dcloud.io/platform?id=%E6%95%B4%E4%BD%93%E7%9B%AE%E5%BD%95%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91">详见</a><br>├─pages                 业务页面文件存放的目录<br>│  ├─index<br>│  │  └─index.vue       index页面<br>│  └─list<br>│     └─list.vue        list页面<br>├─static                存放应用引用的本地静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此<br>├─uni_modules           存放<code>[uni_module](/uni_modules)</code>规范的插件。<br>├─wxcomponents          存放小程序组件的目录<br>├─main.js               Vue初始化入口文件<br>├─App.vue               应用配置，用来配置App全局样式以及监听应用生命周期<br>├─manifest.json         配置应用名称、appid、logo、版本等打包信息，<a href="https://uniapp.dcloud.io/collocation/manifest">详见</a><br>└─pages.json            配置页面路由、导航条、选项卡等页面类信息，<a href="https://uniapp.dcloud.io/collocation/pages">详见</a></p><h2 id="关于编译"><a href="#关于编译" class="headerlink" title="关于编译"></a>关于编译</h2><ul><li><p>static 目录下的文件均会被完整打包进去，且不会编译。该目录下的 js 文件不会被编译，如果里面有 es6 的代码，不经过转换直接运行，在手机设备上会报错。</p></li><li><p>非 static 目录下的文件（vue、js、css 等）只有被引用到才会被打包编译进去。</p></li></ul><h1 id="引入静态资源"><a href="#引入静态资源" class="headerlink" title="引入静态资源"></a>引入静态资源</h1><h2 id="模板内"><a href="#模板内" class="headerlink" title="模板内"></a>模板内</h2><p>可以使用相对路径或者绝对路径</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 绝对路径，/static指根目录下的static目录，在cli项目中/static指src目录下的static目录 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@/static/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 相对路径 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../static/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js文件"><a href="#js文件" class="headerlink" title="js文件"></a>js文件</h2><p>可以使用相对路径或者绝对路径</p><p>不支持使用 <code>/</code> 开头的方式引入</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 绝对路径，@指向项目根目录，在cli项目中@指向src目录</span><span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">'@/common/add.js'</span><span class="token comment">// 相对路径</span><span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">'../../common/add.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css引入"><a href="#css引入" class="headerlink" title="css引入"></a>css引入</h2><p>可以使用相对路径或者绝对路径</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 绝对路径 */</span><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/common/uni.css'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'@/common/uni.css'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span class="token comment">/* 相对路径 */</span><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../../common/uni.css'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 uni-app（一）初体验</title>
      <link href="/2021/09/10/xiao-bai-cai-bi-ji-xiao-cheng-xu-yi-chu-ti-yan/"/>
      <url>/2021/09/10/xiao-bai-cai-bi-ji-xiao-cheng-xu-yi-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<p>最近又开始鼓捣学习 uni-app 啦，虽然带娃基本没多少时间但我真的超爱学习新玩意带来的满足感的（读书时候要有这觉悟该多好哇😳）</p><p>按照以往的学习经验，首先要去官网看一遍教程，然后跟着示例撸一个 HelloWorld 出来。</p><p><a href="https://uniapp.dcloud.io/README">什么是 uni-app</a></p><p><a href="https://ask.dcloud.net.cn/article/id-35657__page-2">白话uni-app 【也是html、vue、小程序的区别】</a></p><p><a href="https://segmentfault.com/a/1190000015684864">vue和微信小程序的区别、比较</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信官方文档 · 小程序</a></p><p>PS：这个系列佛性更新，尽量把笔记记录下来 🤦</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie、Session、Token 到底是个啥</title>
      <link href="/2021/09/04/sha-sha-fen-bu-qing-zhi-cookie-session-token/"/>
      <url>/2021/09/04/sha-sha-fen-bu-qing-zhi-cookie-session-token/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-协议是一个无状态协议"><a href="#HTTP-协议是一个无状态协议" class="headerlink" title="HTTP 协议是一个无状态协议"></a>HTTP 协议是一个无状态协议</h1><p>HTTP是无状态的：在同一个连接中，两个执行成功的请求之间是没有关系的。这就带来了一个问题，用户没有办法在同一个网站中进行连续的交互，比如在一个电商网站里，用户把某个商品加入到购物车，切换一个页面后再次添加了商品，这两次添加商品的请求之间没有关联，浏览器无法知道用户最终选择了哪些商品。</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>既然 Web 服务器记不住东西，那么我们就在外部想办法记住。</p><p>以电商网站为例，当我们（客户端浏览器）第一次访问电商网站（服务端）时，电商网站给我们发放一张记录独特身份标识数据「会员卡」，格式为 <code>&lt;cookie名&gt;=&lt;cookie值&gt;</code>，放入到 <code>Set-Cookie</code> 字段里（即在响应头里面添加一个 <code>Set-Cookie</code> 选项），随着响应报文发给浏览器</p><pre class="line-numbers language-none"><code class="language-none">HTTP/1.0 200 OKContent-type: text/htmlSet-Cookie: test_cookie=test[页面内容]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器接收到「会员卡」字段以后就把这张「会员卡」保存起来。（以 Chrome 浏览器为例，可以打开浏览器控制台 -&gt; <code>Application</code> -&gt; <code>Cookies</code> 查看Cookie）</p><p>下次请求时浏览器会自动将此「会员卡」值放入到 <code>Cookie</code> 字段中发给服务端。</p><pre class="line-numbers language-none"><code class="language-none">GET /sample_page.html HTTP/1.1Host: www.example.orgCookie: test_cookie=test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>服务端收到请求报文后，发现Cookie字段中有值，就能根据此值识别用户的身份然后提供个性化的服务。</p><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gu67ok9y8tj60k108hq4y02.jpg" alt="Cookie.png"></p><p>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p><p>Cookie 保存在客户端中，按在客户端中的存储位置，可分为内存 Cookie 和硬盘 Cookie。内存 Cookie 由浏览器维护，保存在内存中，浏览器关闭即消失，存在时间短暂。硬盘 Cookie 保存在硬盘里，有过期时间，除非用户手动清理或到了过期时间，硬盘Cookie不会清除，存在时间较长。所以，按存在时间，可分为非持久 Cookie 和持久 Cookie 。</p><h2 id="Cookie-主要用途"><a href="#Cookie-主要用途" class="headerlink" title="Cookie 主要用途"></a>Cookie 主要用途</h2><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><h2 id="Cookie-语法"><a href="#Cookie-语法" class="headerlink" title="Cookie 语法"></a>Cookie 语法</h2><pre class="line-numbers language-none"><code class="language-none">Cookie: &lt;cookie-list&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;cookie-list&gt;</code>：一系列的名称/值对，形式为 <code>&lt;cookie-name&gt;=&lt;cookie-value&gt;</code>。名称/值对之间用分号和空格 (‘; ‘)隔开。设置 Cookie 的名称及相对应的值，都必须是<strong>字符串类型</strong> - 如果值为 Unicode 字符，需要为字符编码。 - 如果值为二进制数据，则需要使用 BASE64 编码。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><strong>domain</strong></td><td>指定了哪些主机可以接受 Cookie。如果不指定，默认为 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Origin">origin</a>，<strong>不包含子域名</strong>。如果指定了<code>Domain</code>，则一般包含子域名。因此，指定 <code>Domain</code> 比省略它的限制要少。</td></tr><tr><td><strong>path</strong></td><td>指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 <code>%x2F</code> (“/“) 作为路径分隔符，子路径也会被匹配。</td></tr><tr><td><strong>maxAge</strong></td><td>cookie 失效的时间，单位秒。如果为整数，则该 cookie 在 maxAge 秒后失效。如果为负数，该 cookie 为临时 cookie ，关闭浏览器即失效，浏览器也不会以任何形式保存该 cookie 。如果为 0，表示删除该 cookie 。默认为 -1。 - <strong>比 expires 好用</strong>。</td></tr><tr><td><strong>expires</strong></td><td>过期时间，在设置的某个时间点后该 cookie 就会失效。 一般浏览器的 cookie 都是默认储存的，当关闭浏览器结束这个会话的时候，这个 cookie 也就会被删除</td></tr><tr><td><strong>secure</strong></td><td>该 cookie 是否仅被使用安全协议传输。安全协议有 HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false。 当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效。</td></tr><tr><td><strong>httpOnly</strong></td><td><strong>如果给某个 cookie 设置了 httpOnly 属性，则无法通过 JS 脚本 读取到该 cookie 的信息，但还是能通过 Application 中手动修改 cookie，所以只是在一定程度上可以防止 XSS 攻击，不是绝对的安全</strong></td></tr></tbody></table><p>在上面提到查看 Cookie 的方式（打开浏览器控制台 -&gt; <code>Application</code> -&gt; <code>Cookies</code>），在详情面板可以发现 Cookie 是可编辑的，这就提供了 Cookie 被篡改的可能。另外，很多第三方可以获取到 Cookie，服务器无法判断 Cookie 是不是真实用户发送的，所以可以伪造 Cookie 实现登录进行一些 HTTP 请求。</p><p>为了防篡改 Cookie，有两种思路：</p><p>思路一：把信息隐藏在服务器中（Session）</p><p>思路二：加密（Token）</p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>Session 是另一种记录服务器和客户端会话状态的机制，它是基于 Cookie 实现的，在一次会话中将重要信息保存在 Session 中（Session 存储在服务器端），浏览器只记录 SessionId（一个 SessionId 对应一次会话请求，SessionId 存储在客户端的 Cookie 中）。</p><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gu7dewfgbaj60m106wgn302.jpg" alt="Session.png"></p><h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><p>Token 的意思是「令牌」，是服务端生成的一串字符串，作为客户端进行请求的一个标识。通常使用 <a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JWT</a> 加密认证。</p><p>当用户第一次登录后，服务器生成一个 Token 并将此 Token 返回给客户端，以后客户端只需带上这个 Token 前来请求数据即可，无需再次带上用户名和密码。</p><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gu7en0ln4sj60m106d3zq02.jpg" alt="Token.png"></p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="Cookie-和-Session-的区别"><a href="#Cookie-和-Session-的区别" class="headerlink" title="Cookie 和 Session 的区别"></a>Cookie 和 Session 的区别</h2><p>安全性： Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。<br>存取值的类型不同：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。<br>有效期不同： Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。<br>存储大小不同：单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。</p><h2 id="Token-和-Session-的区别"><a href="#Token-和-Session-的区别" class="headerlink" title="Token 和 Session 的区别"></a>Token 和 Session 的区别</h2><p>状态：Session 是一种记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息。而 Token 是访问资源接口（API）时所需要的资源凭证，使服务端无状态化，不会存储会话信息。</p><p>扩展性：如果是服务器集群，或者是跨域的服务导向架构，就要求 Session 数据共享，每台服务器都能够读取 Session。由于 Token 是客户端访问时直接带着数据，因此无需做共享数据的操作。</p><p>参考文章</p><p><a href="https://juejin.cn/post/6844904009061367821#heading-0">一文彻底搞懂Cookie、Session、Token到底是什么</a></p><p><a href="https://juejin.cn/post/6844904034181070861">傻傻分不清之 Cookie、Session、Token、JWT</a></p><p><a href="https://segmentfault.com/a/1190000017831088">session，cookie和token究竟是什么</a></p><p><a href="https://blog.csdn.net/think2me/article/details/38726429">彻底弄清楚session是什么？</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript常用继承方案，看完不再emo</title>
      <link href="/2021/08/31/javascript-chang-yong-ji-cheng-fang-an-kan-wan-bu-zai-emo/"/>
      <url>/2021/08/31/javascript-chang-yong-ji-cheng-fang-an-kan-wan-bu-zai-emo/</url>
      
        <content type="html"><![CDATA[<p>前段时间写了一篇关于<a href="https://april-cl.github.io/2021/08/20/js-de-san-zuo-da-shan-zhi-yuan-xing/">原型</a>的博客，好似打通了任督二脉，以前斩不断理还乱的各种继承方式突然看得明白了，赶紧记下来✍~~~</p><p>—— 以下是正文 ——</p><h1 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h1><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>将父类的实例作为子类的原型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 创建SuperType的实例，并将该实例赋值给SubType.prototype</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 所有涉及到原型链继承的继承方式都要修改子类构造函数的指向，否则子类实例的构造函数会指向SuperType。</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Person'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token operator">||</span> <span class="token number">0</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span> <span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">// 为父类新增一个方法</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 子类</span><span class="token keyword">function</span> <span class="token function">Student</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token comment">// 继承（注意,继承必须要写在子类方法定义的前面）</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token comment">// 为子类新增一个方法（在继承之后,否则会被覆盖）</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">study</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am studing'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'April'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span>           <span class="token comment">// April            --子类覆盖父类的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>age<span class="token punctuation">)</span>            <span class="token comment">// 0                --父类的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>score<span class="token punctuation">)</span>          <span class="token comment">// 90               --子类自己的属性</span>student<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment">// I am a person    --继承自父类的方法</span>student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment">// I am studing     --子类自己的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存在的缺点"><a href="#存在的缺点" class="headerlink" title="存在的缺点"></a>存在的缺点</h2><p>多个实例对引用类型的操作会被篡改</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,basketball</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h1><h2 id="核心-1"><a href="#核心-1" class="headerlink" title="核心"></a>核心</h2><p>将父类构造函数的内容复制给了子类的构造函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>SubType<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="举个例子-1"><a href="#举个例子-1" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span> <span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 子类</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading</span>stu1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存在的缺点-1"><a href="#存在的缺点-1" class="headerlink" title="存在的缺点"></a>存在的缺点</h2><ul><li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li><li>无法实现复用，每个子类都有父类实例函数的副本，影响性能</li></ul><h1 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h1><h2 id="核心-2"><a href="#核心-2" class="headerlink" title="核心"></a>核心</h2><p>用原型链实现对原型属性和方法的继承，用借用构造函数技术来实现实例属性的继承</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="举个例子-2"><a href="#举个例子-2" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span><span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">// 父类函数</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 子类</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>               <span class="token comment">// 构造函数继承(继承属性)</span><span class="token punctuation">}</span><span class="token comment">// 原型链继承(继承方法)</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token comment">// 实例化</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>           <span class="token comment">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>           <span class="token comment">// music,reading</span>stu1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment">// I am a person</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存在的缺点-2"><a href="#存在的缺点-2" class="headerlink" title="存在的缺点"></a>存在的缺点</h2><p>在使用子类创建实例对象时，其原型中会存在两份相同的属性/方法</p><h1 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h1><h2 id="核心-3"><a href="#核心-3" class="headerlink" title="核心"></a>核心</h2><p>利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者用 <code>ES 5</code> 的 <code>Object.create()</code> 代替上面的 object 方法</p><h2 id="举个例子-3"><a href="#举个例子-3" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> anotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>anotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span>anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rob"</span><span class="token punctuation">)</span><span class="token keyword">var</span> yetAnotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>yetAnotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span>yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Barbie"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span>   <span class="token comment">// Shelby,Court,Van,Rob,Barbie</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存在的缺点-3"><a href="#存在的缺点-3" class="headerlink" title="存在的缺点"></a>存在的缺点</h2><ul><li><p>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。</p></li><li><p>无法传递参数</p></li></ul><h1 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h1><h2 id="核心-4"><a href="#核心-4" class="headerlink" title="核心"></a>核心</h2><p>寄生式继承其实就是在原型式继承的基础上，做了一些增强</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 通过调用 object() 函数创建一个新对象</span>  <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span>   <span class="token comment">// 以某种方式来增强对象</span>  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 返回这个对象</span>  <span class="token keyword">return</span> clone <span class="token comment">// 返回这个对象</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="举个例子-4"><a href="#举个例子-4" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span>  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> clone<span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> anotherPerson <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>anotherPerson<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存在的缺点-4"><a href="#存在的缺点-4" class="headerlink" title="存在的缺点"></a>存在的缺点</h2><ul><li><p>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。</p></li><li><p>无法传递参数</p></li></ul><h1 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h1><h2 id="核心-5"><a href="#核心-5" class="headerlink" title="核心"></a>核心</h2><p>结合借用构造函数传递参数和寄生模式实现继承</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">subType<span class="token punctuation">,</span> superType</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 创建对象，创建父类原型的一个副本</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType                    <span class="token comment">// 增强对象，弥补因重写原型而失去的默认的constructor 属性</span>  subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype                      <span class="token comment">// 指定对象，将新创建的对象赋值给子类的原型</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="举个例子-5"><a href="#举个例子-5" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">subType<span class="token punctuation">,</span> superType</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType   subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">}</span><span class="token comment">// 父类初始化实例属性和原型属性</span><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Person'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token operator">||</span> <span class="token number">0</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span> <span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 借用构造函数传递增强子类实例属性（支持传参和避免篡改）</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 将父类原型指向子类</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> Person<span class="token punctuation">)</span><span class="token comment">// 新增子类原型属性</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">study</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am studing'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"stu1"</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"stu2"</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'swimming'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,swimming</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这个继承方案是目前最成熟的方案</strong></p><h1 id="ES6类继承extends"><a href="#ES6类继承extends" class="headerlink" title="ES6类继承extends"></a>ES6类继承extends</h1><h2 id="核心-6"><a href="#核心-6" class="headerlink" title="核心"></a>核心</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes">ES6 类的定义</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">SubType</span> <span class="token keyword">extends</span> <span class="token class-name">SuperType</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="举个例子-6"><a href="#举个例子-6" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Person'</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token operator">||</span> <span class="token number">0</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span> <span class="token string">'reading'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">90</span>    <span class="token punctuation">}</span>    <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am studing'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"stu1"</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"stu2"</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'swimming'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,swimming</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="https://juejin.cn/post/6844903696111763470">JavaScript常用八种继承方案</a></p><p><a href="https://segmentfault.com/a/1190000015727237">一篇文章理解JS继承——原型链/构造函数/组合/原型式/寄生式/寄生组合/Class extends</a></p><p><a href="https://segmentfault.com/a/1190000014476341">JS中的继承(上)</a></p><p><a href="https://github.com/noahlam/articles/blob/master/JS%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF(%E4%B8%8B).md">JS中的继承(下)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 Vue （五）生命周期</title>
      <link href="/2021/08/30/xiao-bai-cai-bi-ji-vue-wu-sheng-ming-zhou-qi/"/>
      <url>/2021/08/30/xiao-bai-cai-bi-ji-vue-wu-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期图示"></p><h1 id="选项-生命周期钩子"><a href="#选项-生命周期钩子" class="headerlink" title="选项-生命周期钩子"></a>选项-生命周期钩子</h1><p>所有的生命周期钩子自动绑定 this 上下文到实例中，不能使用箭头函数来定义一个生命周期方法 </p><h2 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h2><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p><h2 id="created"><a href="#created" class="headerlink" title="created"></a>created</h2><p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el property 目前尚不可用。</p><h2 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h2><p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h2><p>实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。</p><p>注意 mounted 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 mounted 内部使用 vm.$nextTick</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h2><p>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</p><p><strong>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</strong></p><h2 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h2><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p><p>注意 updated 不会保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以在 updated 里使用 vm.$nextTick：</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="activated"><a href="#activated" class="headerlink" title="activated"></a>activated</h2><p>被 keep-alive 缓存的组件激活时调用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="deactivated"><a href="#deactivated" class="headerlink" title="deactivated"></a>deactivated</h2><p>被 keep-alive 缓存的组件停用时调用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h2><p>实例销毁之前调用。在这一步，实例仍然完全可用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h2><p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="errorCaptured"><a href="#errorCaptured" class="headerlink" title="errorCaptured"></a>errorCaptured</h2><p>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p><h1 id="实例方法-生命周期"><a href="#实例方法-生命周期" class="headerlink" title="实例方法 / 生命周期"></a>实例方法 / 生命周期</h1><h2 id="vm-mount-elementOrSelector"><a href="#vm-mount-elementOrSelector" class="headerlink" title="vm.$mount( [elementOrSelector] )"></a>vm.$mount( [elementOrSelector] )</h2><ul><li><p>参数：</p><ul><li><p>{Element | string} [elementOrSelector]</p></li><li><p>{boolean} [hydrating]</p></li></ul></li><li><p>返回值：vm - 实例自身</p></li><li><p>用法：</p><p>  如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例。</p><p>  如果没有提供 elementOrSelector 参数，模板将被渲染为文档之外的的元素，并且你必须使用原生 DOM API 把它插入文档中。</p><p>  这个方法返回实例自身，因而可以链式调用其它实例方法。</p></li></ul><h2 id="vm-forceUpdate"><a href="#vm-forceUpdate" class="headerlink" title="vm.$forceUpdate()"></a>vm.$forceUpdate()</h2><ul><li><p>用法：</p><p>  迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</p></li></ul><h2 id="vm-nextTick-callback"><a href="#vm-nextTick-callback" class="headerlink" title="vm.$nextTick( [callback] )"></a>vm.$nextTick( [callback] )</h2><ul><li><p>参数：</p><p>  {Function} [callback]</p></li><li><p>用法：</p><p>  将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。</p></li></ul><h2 id="vm-destroy"><a href="#vm-destroy" class="headerlink" title="vm.$destroy()"></a>vm.$destroy()</h2><ul><li><p>用法：</p><p>  完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。</p><p>  触发 beforeDestroy 和 destroyed 的钩子。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 Vue （四）组件</title>
      <link href="/2021/08/29/xiao-bai-cai-bi-ji-vue-si-zu-jian/"/>
      <url>/2021/08/29/xiao-bai-cai-bi-ji-vue-si-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>组件系统是Vue的一个重要概念，它允许我们使用小型、独立和通常可复用的组件构建大型应用。</p><h1 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h1><ul><li>全局组件</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义一个名为 button-counter 的新组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'button-counter'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token string">'&lt;button v-on:click="count++"&gt;You clicked me {{ count }} times.&lt;/button&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token operator">:</span> <span class="token string">'#components-demo'</span><span class="token punctuation">,</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div id="components-demo"&gt;  &lt;button-counter&gt;&lt;/button-counter&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>单文件组件</li></ul><p>单文件组件保存在文件扩展名为<code>.vue</code>的文件中，在<code>main.js</code>文件中用<code>import</code>引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"count++"</span><span class="token operator">&gt;</span>      You clicked me <span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span> times<span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>相比于全局组件，单文件组件没有唯一命名的限制，而且支持CSS，可以用预处理器构建。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 Vue （三）修饰符</title>
      <link href="/2021/08/28/xiao-bai-cai-bi-ji-vue-san-xiu-shi-fu/"/>
      <url>/2021/08/28/xiao-bai-cai-bi-ji-vue-san-xiu-shi-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><p>修饰符 (modifier) 是以半角句号<code>.</code>指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。</p><p>常见的修饰符</p><ul><li><code>.stop</code>：阻止事件冒泡</li><li><code>.prevent</code>：取消事件默认行为</li><li><code>.sync</code>：用于对<code>prop</code>的双向绑定</li></ul><p>这里有一个关于<code>.sync</code>用法的<a href="https://codesandbox.io/s/musing-greider-pk5ze?file=/src/App.vue">例子</a></p><p>父组件代码</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;template&gt;  &lt;div id="app"&gt;    {{total}}&lt;br/&gt;    使用@update:total    &lt;Child :total="total" @update:total="total = $event"&gt;&lt;/Child&gt;    使用.sync    &lt;Child :total.sync="total"&gt;&lt;/Child&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Child from "./Child.vue"export default {  name: "App",  data: () =&gt; {    return {      total: 100    }  },  components: {    Child: Child  }};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件代码</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;template&gt;&lt;div&gt;  &lt;button @click="$emit('update:total', total+10)"&gt;+10&lt;/button&gt;  &lt;button @click="$emit('update:total', total-10)"&gt;-10&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  props: ['total']}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码实现通过点击子组件按钮修改父组件数据。通过例子可以看到<code>.sync</code>能够实现和<code>@update:total="total = $event"</code>一样的效果。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 MVC</title>
      <link href="/2021/08/27/qian-xi-mvc/"/>
      <url>/2021/08/27/qian-xi-mvc/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>官方一点的解释：设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结</p><p>emmmmmm 浅显一点理解就是<strong>对通用代码写法模式取个名字</strong></p><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><ul><li><p>M(Model)</p><p>模型层，用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法</p></li><li><p>V(View)</p><p>视图层，界面设计人员进行图形界面设计，是用户看到并与之交互的界面</p></li><li><p>C(Controller)</p><p>控制层，连接视图和模型桥梁，处理业务逻辑操作，根据视图层输入的指令，选取模型层数据，进行相应操作整合将结果反馈给视图层</p></li></ul><p>用一个简单的计算器为例</p><p>Model / View / Controller 伪代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Model.js</span>Model <span class="token operator">=</span> <span class="token punctuation">{</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* 程序需要操作的数据或信息 */</span> <span class="token punctuation">}</span>，    create<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* 增数据 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">delete</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* 删数据 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>data<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token comment">//使用新数据替换旧数据</span>       eventBus<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'m:upate'</span><span class="token punctuation">)</span> <span class="token comment">// eventBus触发'm:update'信息, 通知View刷新 </span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    get<span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">/* 获取数据 */</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment">// View.js</span>View <span class="token operator">=</span> <span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token comment">/* 需要刷新的元素 */</span><span class="token punctuation">,</span>    html<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">显示在页面上的内容</span><span class="token template-punctuation string">`</span></span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        v<span class="token punctuation">.</span>el<span class="token operator">:</span> <span class="token comment">/* 需要刷新的元素 */</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/* 刷新页面 */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Controller.js</span>Controller <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      v<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// View初始化</span>      v<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 第一次渲染</span>      c<span class="token punctuation">.</span><span class="token function">autoBindEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 自动的事件绑定</span>      eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'m:update'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> v<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 当eventBus触发'm:update'时View刷新</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   events<span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">/* 事件以哈希表方式记录 */</span> <span class="token punctuation">}</span>，   <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data <span class="token operator">=</span> <span class="token comment">/* 改变后的新数据 */</span>      m<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token punctuation">}</span>，   <span class="token function">autoBindEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 自动绑定事件 */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://codesandbox.io/s/goofy-zeh-enq6s?file=/src/index.js">在 codesandbox 上预览</a></p><h1 id="抽象思维"><a href="#抽象思维" class="headerlink" title="抽象思维"></a>抽象思维</h1><h2 id="最小知识原则"><a href="#最小知识原则" class="headerlink" title="最小知识原则"></a>最小知识原则</h2><p>需要知道的知识越少越好</p><p>例子 🌰</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// XXX.js</span><span class="token keyword">import</span> <span class="token string">'XXX.css'</span>  <span class="token comment">// 导入样式文件</span><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;页面要写的内容&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token comment">/* 其他代码 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在  <code>.html</code> 文件中引入这个 <code>.js</code> 文件（下面‘模块’指这个 <code>.js</code> 文件）即可获得这个模块有关的 Dom 元素、样式和行为，对于 <code>.html</code> 文件而言不需要再引入一个相关的样式文件，并且也不需要编写这个模块所需的 Dom 结构</p><p>这样做会使得页面一开始是空白的，可以用加菊花图、加骨架、加占位内容等方法解决</p><h2 id="以不变应万变"><a href="#以不变应万变" class="headerlink" title="以不变应万变"></a>以不变应万变</h2><p>既然 MVC 模式可以适用每个模块的写法，那就每个模块都这样写好了（这里需要两个例子对比）</p><p>代价是有时候会有一些多余不用的代码</p><h2 id="表驱动编程"><a href="#表驱动编程" class="headerlink" title="表驱动编程"></a>表驱动编程</h2><p>表驱动编程是指将重要的信息存储在哈希表中，利用表来编程简化重复的代码，从而不必使用很多的逻辑（if 或 switch）语句</p><p>在上例中 c 对象的 events 属性就是一个哈希表</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">events<span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token string">'click #add1'</span><span class="token operator">:</span> <span class="token string">'add'</span><span class="token punctuation">,</span>   <span class="token string">'click #minus1'</span><span class="token operator">:</span> <span class="token string">'minus'</span><span class="token punctuation">,</span>   <span class="token string">'click #mul2'</span><span class="token operator">:</span> <span class="token string">'mul'</span><span class="token punctuation">,</span>   <span class="token string">'click #divide2'</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当触发点击事件的对象是#add1时则执行add函数，代码效果等同于直接在#add1元素上绑定click事件执行add函数。当在事件类型或监听对象多时使用哈希表的优点就更加明显：代码复杂度稳定更易于理解</p><h2 id="事不过三"><a href="#事不过三" class="headerlink" title="事不过三"></a>事不过三</h2><p>“重复即是原罪”</p><p>同样的代码写三遍，就应该抽离成一个函数</p><p>同样的属性写三遍，就应该做成共有属性（原型或类）</p><p>同样的原型写三遍，就应该用继承</p><h2 id="俯瞰全局"><a href="#俯瞰全局" class="headerlink" title="俯瞰全局"></a>俯瞰全局</h2><p>把所有的对象看成点</p><p>一个点和一个点怎么通信</p><p>一个点和多个点怎么通信</p><p>多个点和多个点怎么通信</p><p>找出一个专用的点 EventBus（事件总线）负责通信</p><p>EventBus 主要用于对象间的通信。如上例中通过定义一个 jQuery 包装的 window 对象获取 jQuery 方法，如 <code>on()</code>、 <code>trigger()</code> 等。</p><h2 id="view-render-data"><a href="#view-render-data" class="headerlink" title="view = render(data)"></a>view = render(data)</h2><p>通过 render 改变视图，只要改变data，就可以得到对应的view, 使用虚拟 DOM 能让 render 只更新该更新的地方，从而解决性能问题</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 Vue （二）指令</title>
      <link href="/2021/08/26/xiao-bai-cai-bi-ji-vue-er-zhi-ling/"/>
      <url>/2021/08/26/xiao-bai-cai-bi-ji-vue-er-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>文档关于指令的解释：</p><pre class="line-numbers language-none"><code class="language-none">指令 (Directives) 是带有 v- 前缀的特殊 attribute。指令 attribute 的值预期是单个 JavaScript 表达式 (v-for 是例外情况)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>v-text</code>：相当于<code>{{ 数据 }}</code>。</li><li><code>v-html</code>：可用于数据内容含有HTML不希望被作为Vue模版进行编译时。</li><li><code>v-show</code>：根据表达式的值切换元素的显示和隐藏。</li><li><code>v-if</code>：根据表达式的真值条件渲染元素。</li><li><code>v-else</code>：前一兄弟元素必须有<code>v-if</code>或<code>v-else-if</code>。</li><li><code>v-else-if</code>：前一兄弟元素必须有<code>v-if</code>或<code>v-else-if</code>。</li><li><code>v-for</code>：基于源数据多次渲染元素或模板块。此</li><li><code>v-on</code>：可缩写成<code>@</code>，用于绑定事件监听器。</li><li><code>v-bind</code>：可缩写成<code>:</code>，用于绑定vue属性。</li><li><code>v-model</code>：在表单控件或者组件上创建双向绑定。</li><li><code>v-slot</code></li><li><code>v-pre</code>：不编译内容。</li><li><code>v-cloak</code></li><li><code>v-once</code></li></ul><h1 id="指令参数"><a href="#指令参数" class="headerlink" title="指令参数"></a>指令参数</h1><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。如</p><pre class="line-numbers language-none"><code class="language-none">v-bind:class="className"v-on:click="doSomething"v-on:[eventName]="doSomething"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的<code>class</code>、<code>click</code>、<code>[eventName]</code>就是参数，<code>[eventName]</code>可以动态监听事件类型，比如当 eventName 的值为 “click” 时，v-on:[eventName] 将等价于 v-on:click。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 Vue （一）基础篇</title>
      <link href="/2021/08/25/xiao-bai-cai-bi-ji-vue-yi-ji-chu-pian/"/>
      <url>/2021/08/25/xiao-bai-cai-bi-ji-vue-yi-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<p>写在前面：</p><p><strong>学习Vue要转化思想</strong>：不要想着怎么操作 DOM，而是想着如何操作数据！</p><p>Vue 的文档很通俗易懂，学习细节移步<a href="https://cn.vuejs.org/v2/guide/">官网</a></p><h1 id="关于-Vue"><a href="#关于-Vue" class="headerlink" title="关于 Vue"></a>关于 Vue</h1><p>Vue 是一套用于构建用户界面的渐进式（由浅入深）框架。</p><p>使用方式</p><ul><li>使用 <code>&lt;script&gt;</code> 引入，可以到 <a href="https://www.bootcdn.cn/">BootCDN</a> 搜索 <code>Vue</code></li><li>使用 NPM 安装</li><li>使用 <a href="https://cli.vuejs.org/zh/guide/"><code>vue-cli</code></a> 创建 Vue 应用</li></ul><h1 id="Vue-的两个构建版本"><a href="#Vue-的两个构建版本" class="headerlink" title="Vue 的两个构建版本"></a>Vue 的两个构建版本</h1><ul><li><p>完整版：同时包含编译器和运行时的版本。</p><p>对应文件名：vue.js/vue.min.js</p></li><li><p>运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</p><p>对应文件名：vue.runtime.js/vue.runtime.min.js</p></li></ul><p>PS：.min.js 文件为无注释无格式被压缩的 js 文件</p><p>两个版本的区别：</p><p>完整版能够编译 <code>template</code>，比如传入一个字符串给 template 选项（<code>.vue</code>文件/单文件组件），或挂载到一个元素上并以其 DOM 内部的 HTML 作为模板。</p><p>使用 webpack 或 @vue/cli 引入时需额外设置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 单文件组件</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>greeting<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        greeting<span class="token operator">:</span> <span class="token string">"Hello World!"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style scoped<span class="token operator">&gt;</span><span class="token comment">/* 一些样式 */</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行时版本不能编译 <code>template</code> ，它通过 <code>render(createElement)</code> 渲染节点。</p><p>使用 webpack 或 @vue/cli 引入时默认使用此版</p><p>上面的例子用 <code>render</code> 渲染</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'Hello World!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最佳实践：总是使用运行时版本，配合使用 <a href="https://vue-loader.vuejs.org/zh/#vue-loader-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"><code>vue-loader</code></a> 在构建时把 <code>.vue</code> 文件内部的模板预编译成 JavaScript </p><h1 id="Vue-实例"><a href="#Vue-实例" class="headerlink" title="Vue 实例"></a>Vue 实例</h1><p>每个 Vue 应用都是通过用 Vue 函数创建一个新的 Vue 实例开始的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 选项</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://codesandbox.io/s/vue">开始使用 Vue 吧 🌝</a></p><p>🤫 可以康康 public/index.html、src/main.js 和 src/App.vue 先熟悉下 Vue 是怎么用的</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记--React（五）受控组件与非受控组件</title>
      <link href="/2021/08/23/xiao-bai-cai-bi-ji-react-wu-shou-kong-zu-jian-yu-fei-shou-kong-zu-jian/"/>
      <url>/2021/08/23/xiao-bai-cai-bi-ji-react-wu-shou-kong-zu-jian-yu-fei-shou-kong-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h1><p>在HTML的表单元素中，它们通常自己维护一套state，并随着用户的输入自己进行UI上的更新，这种行为是不被我们程序所管控的。而如果将React里的state属性和表单元素的值建立依赖关系，再通过onChange事件与setState()结合更新state属性，就能达到控制用户输入过程中表单发生的操作。被React以这种方式控制取值的表单输入元素就叫做受控组件</p><p>上面这段描述用代码翻译大概是这样子的：</p><p>假设 HTML 中有一个这样的表单</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>    名字:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户在界面上的输入框输入内容时，表单元素会根据用户的输入自己进行 UI 上的更新（表单元素上抽象的 state 作用）</p><p>在 React 中，如果我们想要控制输入框内容，可以在 this.state 中定义一个 value属性，并将表单元素上的 value 指定为这个属性</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">NameForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          名字:          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而当我们尝试在表单元素中输入内容时就会发现这个表单元素的内容并没有进行更新，这是因为表单元素的 value 被 this.state.value 控制，当用户输入新的内容时，this.state.value 并不会自动更新。但是可以用一个 onChange 事件来监听输入内容的改变并使用 setState 更新 this.state.value</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">NameForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleSubmit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 通过 this.state.value 获取</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提交的名字: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          名字:          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是受控组件的常用姿势了，在表单元素上设置 value 属性，通过 onChange 事件与 setState() 结合更新 value 属性</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FInput</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>fn<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h1><p>有时我们仅仅是想要获取某个表单元素的值，而不关心它是如何改变的，那么我们可以使用 ref 来从 DOM 节点中获取表单数据，并不需要为每个状态更新都编写数据处理函数</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">NameForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleSubmit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 通过 this.input.current.value 获取</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'A name was submitted: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          Name:          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非受控组件看起来更像传统的 HTML 表单，简单来写就是：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FInput</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>input<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h1><p>大多数情况下，官方推荐使用受控组件来处理表单数据</p><table><thead><tr><th>应用场景</th><th>非受控组件</th><th>受控组件</th></tr></thead><tbody><tr><td>一次性值检索（例如提交时）</td><td>✅</td><td>✅</td></tr><tr><td>提交时验证</td><td>✅</td><td>✅</td></tr><tr><td>即时验证</td><td>❌</td><td>✅</td></tr><tr><td>有条件禁用按钮</td><td>❌</td><td>✅</td></tr><tr><td>强制输入格式</td><td>❌</td><td>✅</td></tr><tr><td>一个数据的多个输入</td><td>❌</td><td>✅</td></tr><tr><td>动态输入</td><td>❌</td><td>✅</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年，被 AJAX 折磨的前端小白</title>
      <link href="/2021/08/22/js-de-san-zuo-da-shan-zhi-ajax/"/>
      <url>/2021/08/22/js-de-san-zuo-da-shan-zhi-ajax/</url>
      
        <content type="html"><![CDATA[<p>在刚开始学 <code>JavaScript</code> 时，最深恶痛绝的三个 JS怪👹：<strong>this妖</strong>、<strong>原型精</strong>和 <strong>AJAX魔</strong></p><p>最近在写总结回顾时竟意外发现这三大怪早已在不知不觉中被我消化吸收了，趁着热乎记下来✍~~~</p><p>有请今天的出场嘉宾🎤：AJAX魔</p><h1 id="什么是-AJAX"><a href="#什么是-AJAX" class="headerlink" title="什么是 AJAX"></a>什么是 AJAX</h1><p>AJAX 是一种用于创建快速动态网页的技术，它使用 <code>XMLHttpRequest</code> 对象与服务器通信。 它可以使用JSON，XML，HTML和text文本等格式发送和接收数据。AJAX最吸引人的就是它的“<strong>异步</strong>”特性，它可以在不重新刷新页面的情况下与服务器通信，交换数据，或更新页面。</p><h1 id="什么是异步"><a href="#什么是异步" class="headerlink" title="什么是异步"></a>什么是异步</h1><p>不等任务执行完，直接执行下一个任务</p><p>举个例子 🌰</p><p>周末我和闺蜜去逛gai，我们打算去吃海底捞，排队的人很多，于是我们手机扫码排号，然后继续逛gai，过一会收到叫号通知就可以进去吃火锅啦~</p><p>「排号」这件事并没有立即得到结果（进去吃火锅），所以这是一个异步任务</p><p>AJAX 请求数据流程与此类似。</p><p>浏览器通过 <code>XMLHttpRequest</code> 对象向服务器发出HTTP请求与接收HTTP响应，浏览器接着做其他事情，等收到 <code>XMLHttpRequest</code> 对象返回来的数据再渲染页面。</p><h1 id="AJAX-的使用"><a href="#AJAX-的使用" class="headerlink" title="AJAX 的使用"></a>AJAX 的使用</h1><h2 id="1-创建Ajax核心对象XMLHttpRequest"><a href="#1-创建Ajax核心对象XMLHttpRequest" class="headerlink" title="1. 创建Ajax核心对象XMLHttpRequest"></a>1. 创建Ajax核心对象XMLHttpRequest</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> httpRequest <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Mozilla, Safari, IE7+ ...</span>    httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// IE 6 and older</span>    httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-发送HTTP请求"><a href="#2-发送HTTP请求" class="headerlink" title="2. 发送HTTP请求"></a>2. 发送HTTP请求</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">httpRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> async<span class="token punctuation">)</span>httpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>method：HTTP请求方法 - 有GET，POST，HEAD以及服务器支持的其他方法</p><p>url：文件在服务器上的位置。由于安全原因，默认不能调用第三方URL域名</p><p>async：用于设置请求true（异步）或 false（同步） </p><p>send() 方法的参数可以是任何你想发送给服务器的内容。</p><p>如果是 POST 请求的话，需注意：</p><ul><li>在调用 send() 方法获取表单数据前要设置请求头的格式内容</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">httpRequest<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>发送表单数据时应该用服务器可以解析的格式，像查询语句，JSON，XML等</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 举例</span>httpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"name=xcl&amp;anothername=April"</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-处理服务器响应"><a href="#3-处理服务器响应" class="headerlink" title="3. 处理服务器响应"></a>3. 处理服务器响应</h2><p>有关的 API ：</p><ul><li><p>XMLHttpRequest.onreadystatechange：只要 readyState 属性发生变化，就会调用相应的处理函数 </p></li><li><p>XMLHttpRequest.response：返回响应的正文，返回的类型取决于 responseType 属性</p></li><li><p>XMLHttpRequest.responseText：服务器以文本字符的形式返回</p></li><li><p>XMLHttpRequest.responseXML：以 XMLDocument 对象方式返回，之后就可以使用JavaScript来处理</p></li><li><p>XMLHttpRequest.readyState：返回一个 XMLHttpRequest 代理当前所处的状态（请求的状态码），它的值含义：</p><ul><li><p>0 未初始化 – 尚未调用.open()方法</p></li><li><p>1 启动 – 已经调用.open()方法，但尚未调用.send()方法</p></li><li><p>2 发送 – 已经调用.send()方法，但尚未接收到响应</p></li><li><p>3 接收 – 已经接收到部分响应数据</p></li><li><p>4 完成 – 已经接收到全部响应数据，而且已经可以在客户端使用了</p></li></ul></li><li><p>XMLHttpRequest.status：返回了 XMLHttpRequest 响应中的数字状态（请求的响应状态码），它的值含义：</p><ul><li><p>1** 信息 – 服务器收到请求，需要请求者继续执行操作</p></li><li><p>2** 成功 – 操作被成功接收并处理</p></li><li><p>3** 重定向 – 需要进一步的操作以完成请求</p></li><li><p>4** 客户端错误 – 请求包含语法错误或无法完成请求</p></li><li><p>5** 服务器错误 – 服务器在处理请求的过程中发生了错误</p></li></ul><p>  一般通过检查响应码 200 OK 判断 AJAX 有没有成功</p></li></ul><p>一般我们会使用异步 AJAX（即 open() 的第三个参数未特别指定或设为 true），在发送请求时，提供一个回调函数负责处理响应，代码大概长这样：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">httpRequest<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> httpRequest<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">/* 对 httpRequest.response 的一些操作 */</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是使用同步 AJAX（即 open() 的第三个参数设为 false），则直接在 send() 方法之后执行要进行的操作即可。但不建议这样做，它的用户体验很糟糕，可能会使页面在请求期间卡住</p><p>AJAX 的用法大概就是如此，把所有代码整合到一块是这样的：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> httpRequest <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Mozilla, Safari, IE7+ ...</span>    httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// IE 6 and older</span>    httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>httpRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> async<span class="token punctuation">)</span>httpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>httpRequest<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> httpRequest<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">/* 对 httpRequest.response 的一些操作 */</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="手动封装-AJAX"><a href="#手动封装-AJAX" class="headerlink" title="手动封装 AJAX"></a>手动封装 AJAX</h1><p>这里会用到 <code>Promise</code> 对象【<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN传送门</a>】</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">ajax</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>success<span class="token punctuation">,</span> fail<span class="token punctuation">}</span> <span class="token operator">=</span> options        <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span>        request<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>response<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个封装只是为了熟悉 <code>Promise</code> 的用法，尚还存在许多问题（post 无法上传数据、不能设置请求头等）</p><h1 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h1><p><a href="https://www.jquery123.com/jQuery.ajax/">jQuery.ajax() 文档</a></p><p>用法：</p><ul><li><p>jQuery.ajax()</p></li><li><p>jQuery.ajax( url [, settings ] )</p></li><li><p>jQuery.ajax( [settings ] )</p></li></ul><p>返回 jqXHR 对象，常用 API：</p><ul><li><p>jqXHR.done(function(data, textStatus, jqXHR) {})：一个可供选择的 success 回调选项的构造函数</p></li><li><p>jqXHR.fail(function(jqXHR, textStatus, errorThrown) {})：一种可供选择的 error 回调选项的构造函数</p></li><li><p>jqXHR.always(function(data|jqXHR, textStatus, jqXHR|errorThrown) { })：一种可供选择的 complete 回调选项的构造函数</p></li><li><p>jqXHR.then(function(data, textStatus, jqXHR) {}, function(jqXHR, textStatus, errorThrown) {})：包含了 .done() 和 .fail()方法的功能</p></li></ul><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p><a href="http://www.axios-js.com/zh-cn/docs/">axios 文档</a></p><p>参考文章：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX/Getting_Started">Ajax 文档 MDN</a></p><p><a href="https://juejin.cn/post/6844903618764603399">Ajax原理一篇就够了</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年，被原型折磨的前端小白</title>
      <link href="/2021/08/20/js-de-san-zuo-da-shan-zhi-yuan-xing/"/>
      <url>/2021/08/20/js-de-san-zuo-da-shan-zhi-yuan-xing/</url>
      
        <content type="html"><![CDATA[<p>在刚开始学 <code>JavaScript</code> 时，最深恶痛绝的三个 JS怪👹：<strong>this妖</strong>、<strong>原型精</strong>和 <strong>AJAX魔</strong></p><p>最近在写总结回顾时竟意外发现这三大怪早已在不知不觉中被我消化吸收了，趁着热乎记下来✍~~~</p><p>有请今天的出场嘉宾🎤：原型精</p><h1 id="内存图学习法"><a href="#内存图学习法" class="headerlink" title="内存图学习法"></a>内存图学习法</h1><p>在了解原型前，先来学一个内存图的简单画法。</p><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtq38p614lj60k20c6dhz02.jpg" alt="内存图画法示例.png"></p><p>注：图示对象属性不完全，<code>#数字</code>代表内存地址，其数值为虚拟数值，仅作示例，下同</p><p>以 <code>window</code> 对象为例，属性名保存属性值地址，例如，属性 <code>Object</code> 保存 <code>Object 对象</code>的地址，即 <code>window</code> 对象的属性 <code>Object</code> 指向内存中的<code>Object 对象</code></p><p>【这里要明白 <code>Object </code>和 <code>Object 对象</code>是两个东西，<code>Object </code>是存放 <code>Object 对象</code>的地址，而 <code>Object 对象</code>是 Heap 中的一坨内存数据，同理，<code>console</code> 和 <code>console 对象</code>、<code>Array</code> 和 <code>Array 对象</code>不是同一个东西 🔑 】</p><h1 id="你有我有全都有"><a href="#你有我有全都有" class="headerlink" title="你有我有全都有"></a>你有我有全都有</h1><p>假设现在要声明一个士兵，士兵要包含的属性：[编号，生命值，攻击（动作），防御（动作）]</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> 士兵 <span class="token operator">=</span> <span class="token punctuation">{</span>    编号<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    生命力<span class="token operator">:</span> <span class="token number">59</span><span class="token punctuation">,</span>    <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    防御<span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>画个内存图看看</p><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtq52cd045j60dg07fwfn02.jpg" alt="一个士兵内存图.png"></p><p>好啦，那现在如果要制造一百个士兵呢？</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> 士兵们 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">var</span> 士兵<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> 士兵 <span class="token operator">=</span> <span class="token punctuation">{</span>        编号<span class="token operator">:</span> i<span class="token punctuation">,</span>        生命力<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        防御<span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    士兵们<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>士兵<span class="token punctuation">)</span><span class="token punctuation">}</span>兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtq59j0fdyj60fn0mqwjp02.jpg" alt="一百个士兵内存图.png"></p><p>从内存图不难看出，这样的代码十分浪费内存。</p><p>对于每个士兵而言，编号和生命值是各不一样的，所以需要创建一百次，但攻击、防御是一样的，只需要各自引用同一个函数就可以了。</p><p>既然如此，那为什么不把这些相同的代码整合到一个地方，让这些士兵都能从这个地方拿到这些属性，另外又对每个士兵自身的属性进行单独赋值</p><p>这里引入两个知识点：</p><ul><li><p>每个实例对象（<code>object</code>）都有一个私有属性（称之为<code>__proto__</code>）指向它的构造函数的原型对象<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">「MDN 传送门」</a></p></li><li><p><code>Object.create()</code> 方法创建一个新对象，使用现有的对象来提供新创建的对象的 <code>__proto__</code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">「MDN 传送门」</a></p></li></ul><p>这个原型对象不就可以用来充当那个整合相同代码的地方，然后让「士兵」的 <code>__proto__</code> 指向「士兵原型」</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> 士兵原型 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    防御<span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> 士兵们 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">var</span> 士兵<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>士兵原型<span class="token punctuation">)</span>    士兵<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>编号 <span class="token operator">=</span> i    士兵<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>生命力 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span>兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtswk5jlv2j60od0d8dir02.jpg" alt="士兵原型图第1版.png"></p><p>现在假若兵营要再制造50名士兵，那么制造士兵（for循环内）的代码就要再重新写一遍。既然如此，那就把制造士兵抽离成一个函数，后面有需要就调用这个函数好了</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> 士兵原型 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    防御<span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> 士兵们 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">var</span> 士兵数 <span class="token operator">=</span> 士兵们<span class="token punctuation">.</span>length<span class="token keyword">function</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span><span class="token parameter">编号i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> 士兵 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>士兵原型<span class="token punctuation">)</span>    士兵<span class="token punctuation">.</span>编号 <span class="token operator">=</span> 编号i    士兵<span class="token punctuation">.</span>生命力 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> 士兵<span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>士兵数 <span class="token operator">=</span> 士兵们<span class="token punctuation">.</span>length兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> 士兵数<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 士兵数 <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtswkp12bkj60wr0ge45o02.jpg" alt="士兵原型图第2版.png"></p><p>注：内存图中蓝色区域是 JS 内置的，只是前面的图没有补全</p><p>从内存图不难看出，虽然制造士兵函数制造出来的士兵的 <code>__proto__</code> 是指向士兵原型的，但制造士兵函数本身和士兵原型却没有联系，这样显得代码分散。那么试着把制造士兵函数和士兵原型结合一起</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> 士兵们 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">var</span> 士兵数 <span class="token operator">=</span> 士兵们<span class="token punctuation">.</span>length<span class="token keyword">function</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span><span class="token parameter">编号i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> 士兵 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>制造士兵<span class="token punctuation">.</span>士兵原型<span class="token punctuation">)</span>    士兵<span class="token punctuation">.</span>编号 <span class="token operator">=</span> 编号i    士兵<span class="token punctuation">.</span>生命力 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> 士兵<span class="token punctuation">}</span>制造士兵<span class="token punctuation">.</span>士兵原型 <span class="token operator">=</span> <span class="token punctuation">{</span>       <span class="token comment">// 这步把制造士兵和士兵原型绑定</span>    <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    防御<span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span>    constructor<span class="token operator">:</span> 制造士兵   <span class="token comment">// 这步把士兵原型和制造士兵绑定</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>士兵数 <span class="token operator">=</span> 士兵们<span class="token punctuation">.</span>length兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> 士兵数<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 士兵数 <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtt2jrkzecj60v90gedme02.jpg" alt="士兵原型图第3版.png"></p><p>好啦，现在就通过这个图来了解有关<strong>原型</strong>的概念</p><ul><li><p>原型</p><p>  在javascript中，函数可以有属性。 每个<strong>函数</strong>都有一个特殊的<strong>属性</strong>叫作原型（prototype），默认指向一个自带属性constructor（这个属性值指向函数本身）的对象，这个对象可以重写（联系上面代码 <code>制造士兵.士兵原型 = {/* 一些代码 */}</code>）</p></li><li><p>原型对象</p><p>  每个实例<strong>对象</strong>都有一个私有属性（__proto__）指向它的<strong>构造函数的原型对象</strong>（如内存图中的 <code>#789士兵原型对象</code>）。该原型对象也有一个自己的原型对象（__proto__），层层向上直到一个对象的原型对象为 null。注意<strong>函数也是对象</strong></p></li><li><p>原型链</p><p>  内存图中通过__proto__指向原型的链接</p><p>  图中 士兵-&gt;士兵原型-&gt;Object.prototype-&gt;null 这条线就是一条原型链</p></li><li><p>构造函数</p><p>  制造士兵函数就是构造函数。</p><p>  构造函数本身负责给对象本身添加属性（如 士兵.编号 = 编号i）</p><p>  构造函数.prototype负责保存对象的共有属性（如 士兵原型）</p><p>  所有构造函数（专门由于创建对象的函数）首字母大写</p><p>  所有被构造出来的对象首字母小写</p></li></ul><h1 id="原型精-CP-—-prototype-和-proto"><a href="#原型精-CP-—-prototype-和-proto" class="headerlink" title="原型精 CP — prototype 和 __proto__"></a>原型精 CP — prototype 和 __proto__</h1><p>看完有关<strong>原型</strong>的概念，最迷惑的就是 prototype 和 __proto__ 到底有什么区别 🤔</p><p><code>prototype</code> 和 <code>__proto__</code> 都存着原型的地址</p><p><code>prototype</code> ：挂在<strong>函数</strong>上，被构造函数创建的实例对象的 __proto__ 指向构造函数的 prototype 属性，用来实现基于原型的继承与属性的共享</p><p><code>__proto__</code> ：挂在<strong>对象</strong>上，它的值指向构造函数的原型对象，构成原型链，同样用于实现基于原型的继承</p><p>三个重要知识 🧨：</p><ol><li><p>对象.__proto__ === 构造函数.prototype</p></li><li><p>Object.prototype 是所有对象的（直接或间接）原型对象，Object.prototype 的原型对象为 null</p></li><li><p>任何函数.__proto__ === Function.prototype</p></li></ol><p>下面来一个无奖问答 🎮</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>true，根据知识2</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>true，根据知识2</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>f<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>true，根据知识3</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Function<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>true，根据知识1</p><h1 id="new-运算符"><a href="#new-运算符" class="headerlink" title="new 运算符"></a>new 运算符</h1><p>new 关键字会进行如下的操作：</p><ol><li>创建一个空的简单JavaScript对象（即{}）</li><li>为步骤1新创建的对象添加属性__proto__，将该属性链接至构造函数的原型对象 </li><li>将步骤1新创建的对象作为this的上下文 </li><li>如果该函数没有返回对象，则返回this</li></ol><p>回到制造士兵最后那段代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 省略部分代码</span><span class="token keyword">function</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span><span class="token parameter">编号i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> 士兵 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>制造士兵<span class="token punctuation">.</span>士兵原型<span class="token punctuation">)</span>    士兵<span class="token punctuation">.</span>编号 <span class="token operator">=</span> 编号i    士兵<span class="token punctuation">.</span>生命力 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> 士兵<span class="token punctuation">}</span>制造士兵<span class="token punctuation">.</span>士兵原型 <span class="token operator">=</span> <span class="token punctuation">{</span>       <span class="token comment">// 这步把制造士兵和士兵原型绑定</span>    <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    防御<span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span>    constructor<span class="token operator">:</span> 制造士兵   <span class="token comment">// 这步把士兵原型和制造士兵绑定</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 省略部分代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>换成 new 写法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 省略部分代码</span><span class="token keyword">function</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span><span class="token parameter">编号i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>编号 <span class="token operator">=</span> 编号i    <span class="token keyword">this</span><span class="token punctuation">.</span>生命力 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token class-name">制造士兵</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">攻击</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token class-name">制造士兵</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>攻击 <span class="token operator">=</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 省略部分代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="https://zhuanlan.zhihu.com/p/23987456">JS 的 new 到底是干什么的？</a></p><p><a href="https://www.zhihu.com/question/34183746">js中__proto__和prototype的区别和关系？</a></p><hr><p>写在后面：因为时间关系，这篇文章写得有些分散杂乱，有空再好好梳理一遍。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记--React（四） Class 组件事件绑定</title>
      <link href="/2021/08/20/xiao-bai-cai-bi-ji-react-si-shi-jian-bang-ding/"/>
      <url>/2021/08/20/xiao-bai-cai-bi-ji-react-si-shi-jian-bang-ding/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>click1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">click2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>click<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>click1<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>click2<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依次点击4个按钮，控制台输出</p><pre class="line-numbers language-none"><code class="language-none">undefinedA {props: Object, context: Object, refs: Object, updater: Object, click1: ƒ bound click()…}A {props: Object, context: Object, refs: Object, updater: Object, click1: ƒ bound click()…}A {props: Object, context: Object, refs: Object, updater: Object, click1: ƒ bound click()…}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一种情况与 <a href="https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/">JavaScript 函数工作原理</a>有关，this 最终是指向 window 的。</p><p>在 Class 组件中，事件绑定的正确姿势应该是这样 ⬇</p><p>传一个匿名函数给 onClick</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 bind 绑定 this</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>click1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>click1<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用箭头函数定义</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">click2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 下面这种写法和在 constructor 中写 this.click2 = () =&gt; {} 是等价的</span><span class="token comment">// click2 = () =&gt; {}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>click2<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在类中 <code>click() {}</code> 和 <code>click = () =&gt; {}</code> 两种写法的区别：</p><ul><li><code>click() {}</code> 是对象的共有属性（也就是原型上的属性）</li><li><code>click = () =&gt; {}</code> 是对象本身的属性</li></ul><blockquote><p>觉得 this 麻烦，那用函数组件就好啦 😊</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记--React（三）函数组件</title>
      <link href="/2021/08/19/xiao-bai-cai-bi-ji-react-san-han-shu-zu-jian/"/>
      <url>/2021/08/19/xiao-bai-cai-bi-ji-react-san-han-shu-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>写在前面：学习 <code>React</code> 要时刻告诉自己就是在写 <code>JavaScript</code></p><h1 id="函数组件的创建方式"><a href="#函数组件的创建方式" class="headerlink" title="函数组件的创建方式"></a>函数组件的创建方式</h1><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 箭头函数形式</span><span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// function 形式</span><span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>就是如此，和 JS 函数的创建一样（心里默念学习 <code>React</code> 要时刻告诉自己就是在写 <code>JavaScript</code>）</p><h1 id="Props-外部数据"><a href="#Props-外部数据" class="headerlink" title="Props 外部数据"></a>Props 外部数据</h1><p>就是函数组件的参数</p><h1 id="State-和生命周期"><a href="#State-和生命周期" class="headerlink" title="State 和生命周期"></a>State 和生命周期</h1><p><strong>没有</strong> </p><p>那我走？ 🤷‍♀️</p><p>别急，React v16.8.0 推出 Hooks API，可厉害了，了解下吧~</p><h1 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h1><p>Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的<strong>函数</strong>，使用它们有两个额外的规则：</p><ul><li>只能在<strong>函数最外层</strong>调用 Hook。不要在循环、条件判断或者子函数中调用。</li><li>只能在 <strong>React 的函数组件</strong>中调用 Hook。不要在其他 JavaScript 函数中调用。</li></ul><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>还记得在 Class 组件中怎么使用 <code>state</code> 的吗</p><p>看这个例子 🌰</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">You clicked </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token plain-text"> times</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          Click me        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过在构造函数中设置 state 初始值为 { count: 0 } ，当用户点击按钮后，我们通过调用 this.setState() 来增加 state.count。</p><p>回顾一下上面函数组件的创建方式，我们似乎无法很方便地向里面添加一些 state 使得 state 变化时能自动更新 UI</p><p>这时就该主角 <code>useState</code> 登场啦 😎</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">You clicked </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token plain-text"> times</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">       Click me      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 useState 定义 state 变量返回的是一个有两个值的数组。第一个值是当前的 state，第二个值是更新 state 的函数。</p><p>useState() 方法里面唯一的参数就是初始 state。这里声明了一个叫 count 的 state 变量，然后把它设为 0。</p><p>通过调用 setCount 来更新当前的 count。</p><blockquote><p>注意事项：</p><ol><li>如果 state 是一个对象，不能部分 setState，因为 setState 不会合并属性</li><li>对于 setState(obj)，如果 obj 地址不变，那么 React 就认为数据没有变化</li></ol></blockquote><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p>useEffect 给函数组件增加了操作副作用的能力。它跟 Class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API。</p><p>来看下 useEffect 的用法</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 模拟 componentDidMount，注意第二个参数</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 只在第一次渲染时会执行 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 模拟 componentDidUpdate，注意第二个参数</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 任意属性更新就会执行，第一次渲染也会 */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 只有n更新才会执行，第一次渲染也会 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 模拟 componentWillUnmount，注意第一个参数的 return 语句</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 执行组件卸载的时候清除操作（保护环境） */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果同时存在多个 useEffect，会按照出现次序执行</p></blockquote><h2 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h2><p>在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染。在浏览器执行绘制之前，useLayoutEffect 内部的更新计划将被同步刷新。</p><blockquote><p>特点</p><ul><li>useLayoutEffect 总是比 useEffect 先执行</li><li>useLayoutEffect 里的任务最好是影响了 Layout</li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">App() ---&gt; 执行 ---&gt; VDOM ---&gt; DOM ---&gt; 改变外观 ---&gt; useEffect                                    ↑                              useLayoutEffect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><p>用法</p><ol><li>声明一个 context 对象<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用 &lt;MyContext.Provider&gt; 圈定作用域<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">520</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Childlren</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyContext.Provider</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在作用域内使用 useContext(MyContext) 获取上下文<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Chrilren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><p>使用官网上的例子</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 第 1 步：创建初始值 initialCount</span><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">initialCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>count<span class="token operator">:</span> initialCount<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第 2 步：创建所有操作 reducer(state, action)</span><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'increment'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'decrement'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'reset'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token function">init</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>initialCount<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 第 3 步：传给 useReducer ，得到读写 API</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialCount<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      Count: </span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token comment">// 第 4 步：调用 dispatch({type: '操作类型'})</span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">'reset'</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> initialCount<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        Reset      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">'decrement'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">-</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">'increment'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p>使用背景：React 默认有多余的 render</p><pre class="line-numbers language-none"><code class="language-none">&lt;父组件&gt;    &lt;子组件 /&gt;&lt;/父组件&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当 &lt;父组件&gt; 中 state 变化时， &lt;子组件&gt; 跟着重新渲染，但如果 &lt;子组件&gt; 的 props 没有变化是没必要重新渲染的。</p><p>用 &lt;子组件2&gt; = React.memo(&lt;子组件&gt;) 可以解决，但是有 Bug ：在 &lt;子组件&gt; 内添加了监听函数后就会失效。原因是函数是对象， &lt;父组件&gt; 重新渲染会导致函数地址不同从而使 props 发生变化。</p><p>用 useMemo 包装 &lt;子组件&gt; 内的监听函数。</p><p>用法</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把“创建”函数和依赖项数组作为参数传入 <code>useMemo</code>，它仅会在某个依赖项改变时才重新计算 <code>memoized</code> 值</p><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><p>useCallback(fn, deps) 相当于 useMemo(() =&gt; fn, deps)</p><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> refContainer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>useRef 返回一个可变的 <code>ref</code> 对象，其 <code>.current</code> 属性被初始化为传入的参数（<code>initialValue</code>）。返回的 <code>ref</code> 对象在组件的整个生命周期内持续存在。</p><p>读取方式：refContainer.current</p><p><code>useRef</code> 常用于访问子组件</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">TextInputWithFocusButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> inputEl <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">onButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// `current` 指向已挂载到 DOM 上的文本输入元素&lt;input&gt;</span>    inputEl<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputEl<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onButtonClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Focus the input</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h2><p>自定义 Hook 是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook，通常用于封装数据操作。</p><p>下面是一个自定义 Hook 示例</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// useRecords.jsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useRecords</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>records<span class="token punctuation">,</span> setRecords<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 一些增删查改的操作</span>  <span class="token keyword">const</span> <span class="token function-variable function">findRecord</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> <span class="token function-variable function">addRecord</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> <span class="token function-variable function">deleteRecord</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> <span class="token function-variable function">updateRecord</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>records<span class="token punctuation">,</span> addRecord<span class="token punctuation">,</span> deleteRecord<span class="token punctuation">,</span> findRecord<span class="token punctuation">,</span> updateRecord<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义 Hook </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>records<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 其他代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年，被 this 折磨的前端小白</title>
      <link href="/2021/08/18/js-de-san-zuo-da-shan-zhi-this/"/>
      <url>/2021/08/18/js-de-san-zuo-da-shan-zhi-this/</url>
      
        <content type="html"><![CDATA[<p>在刚开始学 <code>JavaScript</code> 时，最深恶痛绝的三个 JS怪👹：<strong>this妖</strong>、<strong>原型精</strong>和 <strong>AJAX魔</strong></p><p>最近在写总结回顾时竟意外发现这三大怪早已在不知不觉中被我消化吸收了，趁着热乎记下来✍~~~</p><p>有请今天的出场嘉宾🎤：this妖</p><h1 id="this妖-的前世今生"><a href="#this妖-的前世今生" class="headerlink" title="this妖 的前世今生"></a>this妖 的前世今生</h1><p>假设现在有一对象🐘🐘</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'April-cl'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 待补充</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我想要调用 person.sayHi(…)，打印出「你好，我是 April-cl，今年 18 岁」</p><p>emmmmmmmmm 我要怎样写 <code>sayHi</code> 呢，这样吗？</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好，我是 ${name}，今年 ${age} 岁'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用方式：<code>person.sayHi(person.name, person.age)</code></p><p>这似乎可以，但是…看起来傻傻的😳</p><p>那要不，给 <code>sayHi</code> 传入一个对象？代码改成这样：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">self</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好，我是 ${self.name}，今年 ${self.age} 岁'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用方式：<code>person.sayHi(person)</code></p><p>心里嘀嘀咕：可我就想把参数里的 <code>person</code> 省掉</p><p>💡 有了，给参数里的 <code>person</code> 穿上隐身衣。可是没有了实参，<code>sayHi</code> 声明的形参怎么办？</p><p>好办，给 <code>self</code> 也穿上隐身衣，用一个驻守的小妖精 <code>this</code> 来代替：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// this 就是 self</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好，我是 ${this.name}，今年 ${this.age} 岁'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>调用方式：<code>person.sayHi()</code></p><p>现在看着明了了，<code>this</code> 是 <code>sayHi</code> 隐藏的第一个形参。在调用 <code>person.sayHi()</code> 时，这个 <code>person</code> 会「变成」 <code>this</code></p><h1 id="令小白闻风丧胆的-this妖-现身啦"><a href="#令小白闻风丧胆的-this妖-现身啦" class="headerlink" title="令小白闻风丧胆的 this妖 现身啦"></a>令小白闻风丧胆的 this妖 现身啦</h1><p>俗话说知彼知己方能百战百胜，那就先要了解 <code>this</code> 的5种绑定方式</p><ul><li>默认绑定</li><li>隐式绑定</li><li>显示绑定</li><li>new绑定</li><li>箭头函数绑定</li></ul><h2 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h2><p>前置知识（系统丢给了你一本秘籍 📓 ）：</p><p>在全局块级作用域</p><ul><li>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员</li><li>非严格模式下 this 指向 window</li><li>用 let 或 const 声明不会被绑定到 window 上</li></ul><p>好了，接下来打怪升级 ⬆</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo a:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo b:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this a:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this b:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据秘籍</p><p><code>a</code> 和 <code>foo</code> 变量会被绑定在 <code>window</code> 上，而 <code>b</code> 则不会（即 <code>window.b</code> 是 <code>undefined</code>），而 <code>this</code> 指向 <code>window</code>，所以答案是</p><pre class="line-numbers language-none"><code class="language-none">this a:1this b:undefinedfoo a:1foo b:undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h2><p>回顾上文『this妖 的前世今生』，<code>this</code> 隐式绑定的对象其实就是穿了隐身衣的 <code>person</code></p><p>✨ Get 新秘籍：当函数引用有上下文对象时, 如 obj.foo() 的调用方式, foo 内的 this 指向 obj </p><p>但是江湖险恶，若是有人披着层「马甲」诓骗 this妖，就会造成 this妖 和穿着隐身衣的正主形同陌路，请看题：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开照妖镜（控制台），会发现此时结果</p><pre class="line-numbers language-none"><code class="language-none">12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>？？？</p><p>不难理解 <code>obj.foo()</code> 的结果是 1，但 <code>foo2()</code> 居然打印出的是<code>window</code> 下的 <code>a</code> 😮</p><p>这便是这层「马甲」的厉害之处了：使用另一个变量来给函数取别名造成丢失绑定对象（秘籍升级 ⬆︎ ）</p><h2 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h2><p>嘿嘿 😏 你有张良计，我有过墙梯 ~</p><p>拿出哆啦A梦的道具『非生物催眠喇叭📢』： <code>call</code> <code>apply</code> <code>bind</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>      <span class="token comment">// 上面代码与隐式绑定示例一致，新增此行代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当当当，<code>foo2.call(obj)</code> 打印出的是 1。</p><p>这就是利用 <code>call</code> 、 <code>apply</code> 或者 <code>bind</code> 方法改变函数内this的指向的显示绑定。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">MDN Function.prototype.call()</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">MDN Function.prototype.apply()</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">MDN Function.prototype.bind()</a></p><h2 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h2><p>使用new来调用一个函数，会构造一个新对象并把这个新对象绑定到调用函数中的this</p><p><del>这里留坑</del>，等<a href="https://april-cl.github.io/2021/08/20/js-de-san-zuo-da-shan-zhi-yuan-xing/#toc-heading-4">关于 <code>new</code> 的博客</a>写好了再来填</p><h2 id="箭头函数绑定"><a href="#箭头函数绑定" class="headerlink" title="箭头函数绑定"></a>箭头函数绑定</h2><p>实际上箭头函数里并没有 this，如果在箭头函数里看到 this，直接把它当作箭头函数外面的 this 即可。外面的 this 是什么，箭头函数里面的 this 就还是什么，因为箭头函数本身不支持 this。</p><p>参考文章：</p><p><a href="https://zhuanlan.zhihu.com/p/23804247">this 的值到底是什么？一次说清楚</a></p><p><a href="https://zhuanlan.zhihu.com/p/25991271">你怎么还没搞懂 this？</a></p><p><a href="https://zhuanlan.zhihu.com/p/30164164">JS 里为什么会有 this</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记--React（二）Class 组件</title>
      <link href="/2021/08/17/xiao-bai-cai-bi-ji-react-er-class-zu-jian/"/>
      <url>/2021/08/17/xiao-bai-cai-bi-ji-react-er-class-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="两种方式创建-Class-组件"><a href="#两种方式创建-Class-组件" class="headerlink" title="两种方式创建 Class 组件"></a>两种方式创建 Class 组件</h1><ol><li><p>ES5 方式（已过时）</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hi</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ES6 方式</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hi</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">B</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>强行记忆点：<code>extends</code> 、<code>constructor</code>、<code>super</code>。<br>如果写了 <code>constructor</code> 没写 <code>super</code> 会报错，所以要么不写 <code>constructor</code> （即不初始化），要么就写全。<code>super</code> 的作用：将父类的this对象继承给子类。</p></blockquote></li></ol><h1 id="Props-外部数据"><a href="#Props-外部数据" class="headerlink" title="Props 外部数据"></a>Props 外部数据</h1><p>作用：接受外部数据或函数<br>读取：this.props<br>与之相关的钩子：UNSAFE_componentWillReceiveProps(newProps)<br>注意事项：永远不要改写 Props，应该由 Props 的主人对数据进行更改</p><h1 id="State-和-setState"><a href="#State-和-setState" class="headerlink" title="State 和 setState"></a>State 和 setState</h1><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token comment">// 初始化 state</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      n<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      m<span class="token operator">:</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'April-cl'</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">18</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// setState 的第一个参数是新的 state，注意这里并没有改变 state.m</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>n<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 这里控制台打印 n 的值为 1 ，setState 不会立即改变 this.state，会在当前代码运行完后再去更新 this.state，从而触发 UI 更新</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function-variable function">onClick1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// setState 的第一个参数是函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>n<span class="token operator">:</span> state<span class="token punctuation">.</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>n<span class="token operator">:</span> state<span class="token punctuation">.</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function-variable function">onClick2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// setState 的第二个参数是成功后执行的回调函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>n<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>n<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>m<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">         </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClick1<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClick2<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+3</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意点</p><ul><li>setState 不会立即改变 this.state</li><li>setState 的第一个参数可以接受两种形式的参数，推荐使用函数</li></ul></blockquote><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="生命周期执行顺序"><a href="#生命周期执行顺序" class="headerlink" title="生命周期执行顺序"></a>生命周期执行顺序</h2><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><ul><li>constructor</li><li>static getDerivedStateFromProps</li><li>render</li><li>componentDidMount</li></ul><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul><li>static getDerivedStateFromProps</li><li>shouldComponentUpdate</li><li>render</li><li>getSnapshotBeforeUpdate</li><li>componentDidUpdate</li></ul><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><ul><li>componentWillUnmount</li></ul><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>在 <code>React</code> 组件挂载之前被调用，在为 <code>React.Component</code> 子类实现构造函数时，应在其他语句之前调用 <code>super()</code></p><p>用途：</p><ul><li><p>初始化 state，但不能调用 setState</p></li><li><p>为<a href="https://zh-hans.reactjs.org/docs/handling-events.html">事件处理函数</a>绑定实例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">/* 其它代码略 */</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面也可以用新语法代替 👇</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* 其它代码略 */</span><span class="token punctuation">}</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#constructor">官方文档</a></p><h3 id="static-getDerivedStateFromProp-（不常用）"><a href="#static-getDerivedStateFromProp-（不常用）" class="headerlink" title="static getDerivedStateFromProp （不常用）"></a>static getDerivedStateFromProp （不常用）</h3><p>在调用 <code>render</code> 方法之前调用，在初始化和后续更新都会被调用</p><p>返回一个对象来更新 state，如果返回 null 则不更新任何内容</p><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromprops">官方文档</a></p><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>是 <code>Class 组件</code>中唯一必须实现的方法</p><p>用于展现视图</p><p>只能有一个根元素，如果有多个元素则需用 <code>&lt;&gt;&lt;/&gt;</code> 包裹起来</p><p><code>render</code> 里面可以写</p><ul><li>if … else …</li><li>? : 表达式</li><li>array.map 循环</li></ul><blockquote><p>如果 <code>shouldComponentUpdate()</code> 返回 <code>false</code>，则不会调用 <code>render()</code></p></blockquote><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#render">官方文档</a></p><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><p>在组件挂载后（插入 DOM 树中）立即调用</p><p>官方推荐在此处发起<strong>加载数据</strong>的 <code>AJAX</code> 请求</p><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#componentdidmount">官方文档</a></p><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p>返回 true 时允许更新 UI，返回 false 时阻止更新 UI</p><p>允许手动判断师傅要进行组件更新，我们可以根据应用场景灵活地设置返回值，以避免不必要的更新</p><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate">官方文档</a></p><h3 id="getSnapshotBeforeUpdate-（不常用）"><a href="#getSnapshotBeforeUpdate-（不常用）" class="headerlink" title="getSnapshotBeforeUpdate （不常用）"></a>getSnapshotBeforeUpdate （不常用）</h3><p>在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期方法的任何返回值将作为参数传递给 <code>componentDidUpdate</code></p><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#getsnapshotbeforeupdate">官方文档</a></p><h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><p>在视图更新后执行代码，首次渲染不会执行</p><p>在此处直接调用 <code>setState</code> 必须被包裹在一个条件语句里</p><p>官方推荐在此处发起<strong>更新数据</strong>的 <code>AJAX</code> 请求</p><blockquote><p>如果 <code>shouldComponentUpdate()</code> 返回值为 <code>false</code>，则不会调用 <code>componentDidUpdate()</code></p></blockquote><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#componentdidupdate">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 的配置和常用命令</title>
      <link href="/2021/08/16/git-de-pei-zhi-he-chang-yong-ming-ling/"/>
      <url>/2021/08/16/git-de-pei-zhi-he-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="本地仓库配置"><a href="#本地仓库配置" class="headerlink" title="本地仓库配置"></a>本地仓库配置</h1><p>打开 Cmder （任意目录均可，因为是全局安装），逐行执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name 你的英文名<span class="token function">git</span> config --global user.email 你的邮箱<span class="token function">git</span> config --global push.default simple<span class="token function">git</span> config --global core.quotepath <span class="token boolean">false</span><span class="token function">git</span> config --global core.editor <span class="token string">"code --wait"</span><span class="token function">git</span> config --global core.autocrlf input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="远程仓库配置（GitHub）"><a href="#远程仓库配置（GitHub）" class="headerlink" title="远程仓库配置（GitHub）"></a>远程仓库配置（GitHub）</h1><ol><li>运行 <code>$ ssh-keygen -t rsa -b 4096 -C 你的GitHub电子邮件地址</code>，一直回车到没有提示。</li><li>运行 <code>cat ~/.ssh/id_rsa.pub</code>，复制公钥内容。</li><li>登录 GitHub，Setting -&gt; SSh and GPG keys -&gt; New SSH key -&gt; Title 可以随便命名，就是电脑的代号，然后粘贴刚刚复制的公钥内容到 Key 文本框点击 Add SSH key 即可。</li></ol><p>参考链接 🔗<br><a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">GitHub Docs 生成 SSH 密钥</a></p><h1 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h1><p>初始化仓库：<code>git init</code></p><p>把修改添加到仓库：<code>git add 修改的文件名</code></p><p>把修改提交到仓库：<code>git commit -m '提交名'</code></p><p>查看当前仓库修改状态：<code>git status</code></p><p>查看历史提交记录：<code>git log</code></p><p>回退到上一版本：<code>git reset --hard HEAD^</code></p><p>回退到指定版本号：<code>git reset --hard 版本号前n位（我一般复制6-10位）</code></p><p>推送到远程仓库（第一次创建远程仓库时 GitHub 有提示下面代码）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin 远程仓库ssh链接<span class="token function">git</span> branch -M main<span class="token function">git</span> push -u origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>推送到远程仓库（已经推送过远程仓库了）：<code>git push</code></p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git brach 分支名</code></p><p>切换分支：<code>git checkout 分支名</code></p><p>参考链接 🔗<br><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的 Git 教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些常用的命令行</title>
      <link href="/2021/08/16/yi-xie-chang-yong-de-ming-ling-xing/"/>
      <url>/2021/08/16/yi-xie-chang-yong-de-ming-ling-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>程序员的宿命 —— 增删改查</p></blockquote><h1 id="查：查看文件或目录"><a href="#查：查看文件或目录" class="headerlink" title="查：查看文件或目录"></a>查：查看文件或目录</h1><ul><li>查看当前目录绝对路径：pwd</li><li>查看当前目录内容：ls</li><li>查看指定目录内容：ls 路径</li><li>查看文件内容<ul><li>查看全部内容：cat 路径</li><li>查看前 xx 行内容：head -n xx 路径</li><li>查看后 xx 行内容：tail -n xx 路径</li><li>分屏查看内容：less 路径</li></ul></li></ul><h1 id="增：创建文件或目录"><a href="#增：创建文件或目录" class="headerlink" title="增：创建文件或目录"></a>增：创建文件或目录</h1><ul><li>创建文件<ul><li>生成空文件：touch 文件名</li><li>生成有内容的文件（文件名重复会替换旧内容）：echo 内容 &gt; 文件名</li><li>将内容追加在文件中（不会替换旧内容）：echo 内容 &gt;&gt; 文件名</li><li>不编译内容中的转义字符：echo -e “内容” &gt; 文件名</li><li>同时生成多个文件：touch 文件名11 文件名22</li><li>复制文件：cp 文件名1 文件名2</li></ul></li><li>创建目录<ul><li>生成空目录：mkdir 目录名</li><li>生成多级目录： mkdir -p 目录名1/目录名2/目录名3</li><li>同时生成多个目录：mkdir -p 目录名1 目录名2/目录名3</li><li>复制目录：cp -r 目录名1 目录名2</li></ul></li></ul><h1 id="删：删除文件或目录"><a href="#删：删除文件或目录" class="headerlink" title="删：删除文件或目录"></a>删：删除文件或目录</h1><ul><li>删除文件：rm 文件名</li><li>删除目录<ul><li>删除目录： rm -r 目录名</li><li>强制删除目录：rm -rf 目录名</li></ul></li></ul><p><strong>不要手贱把系统文件删了~~~</strong></p><p>为避免误删系统文件，进入命令行第一件事执行 <code>cd ~</code> 进入到用户目录。</p><h1 id="改：修改文件或目录"><a href="#改：修改文件或目录" class="headerlink" title="改：修改文件或目录"></a>改：修改文件或目录</h1><ul><li>重命名文件：mv 文件名1 文件名2</li><li>移动文件到别的目录：mv 文件名 目录名</li><li>更新文件最后的修改时间（和生成空文件一样）：生成空文件：touch 文件名</li><li>使用默认程序打开文件：start 文件名</li><li>使用VSCode打开文件：code 文件名</li></ul><h1 id="命令组合"><a href="#命令组合" class="headerlink" title="命令组合"></a>命令组合</h1><ul><li>命令1成功后执行命令2：命令1 &amp;&amp; 命令2</li><li>不管命令1运行结果如何都执行命令2：命令1 ; 命令2</li></ul><h1 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h1><ol><li>创建一个文件，后缀可有可无。</li><li>执行 <code>chmod +x 文件</code>，添加可执行权限。</li><li>把要执行的命令写到文件里（下面代码举例说明，这里的 <code>$1</code> 后面通过参数传入）。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token variable">$1</span><span class="token builtin class-name">cd</span> <span class="token variable">$1</span><span class="token function">touch</span> new.txt<span class="token builtin class-name">echo</span> Hello <span class="token operator">&gt;</span> new.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>执行 <code>sh 文件 参数</code> 或 <code>./文件</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新手前端的装机攻略，拿来吧你</title>
      <link href="/2021/08/16/xin-shou-qian-duan-de-zhuang-ji-gong-lue-na-lai-ba-ni/"/>
      <url>/2021/08/16/xin-shou-qian-duan-de-zhuang-ji-gong-lue-na-lai-ba-ni/</url>
      
        <content type="html"><![CDATA[<p>前段时间买了新电脑，装了很多学习用的软件，这里记下来方便后面查找 🔍</p><h1 id="Chrome-浏览器"><a href="#Chrome-浏览器" class="headerlink" title="Chrome 浏览器"></a>Chrome 浏览器</h1><h1 id="Cmder-控制台软件"><a href="#Cmder-控制台软件" class="headerlink" title="Cmder 控制台软件"></a>Cmder 控制台软件</h1><p>安装后配置：</p><ul><li>默认命令行改为 bash。设置 -&gt; 通用 -&gt; 选择你的启动任务或者带参数的shell -&gt; {bash::bash}</li></ul><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><p>安装后配置：</p><ul><li>使用淘宝源。 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -g nrmnrm <span class="token function">ls</span>nrm use taobao<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><h1 id="7zip-解压软件"><a href="#7zip-解压软件" class="headerlink" title="7zip 解压软件"></a>7zip 解压软件</h1><h1 id="Everything-文件搜索"><a href="#Everything-文件搜索" class="headerlink" title="Everything 文件搜索"></a>Everything 文件搜索</h1><h1 id="微信-PC-版"><a href="#微信-PC-版" class="headerlink" title="微信 PC 版"></a>微信 PC 版</h1><h1 id="Snipaste-截图软件"><a href="#Snipaste-截图软件" class="headerlink" title="Snipaste 截图软件"></a>Snipaste 截图软件</h1><h1 id="VSCode-编辑器"><a href="#VSCode-编辑器" class="headerlink" title="VSCode 编辑器"></a>VSCode 编辑器</h1><p>安装后配置：</p><ul><li>自动保存。设置 -&gt; Auto Save: onFocusChange</li><li>汉化。扩展 -&gt; 搜索 chinese</li><li>检查拼写。扩展 -&gt; 搜索 Code Spell Checker</li><li>git 操作。扩展 -&gt; Git Easy</li><li><a href="https://github.com/cmderdev/cmder/wiki/Seamless-VS-Code-Integration">配合 Cmder</a>。</li></ul><p>快捷键：<br>找文件 ctrl + p<br>输命令 ctrl + shift + p<br>多位置输入 at + 单击</p><h1 id="WebStorm-编辑器"><a href="#WebStorm-编辑器" class="headerlink" title="WebStorm 编辑器"></a>WebStorm 编辑器</h1><p>安装后配置：</p><ul><li>配合 Cmder。Setting -&gt; Tools -&gt; Terminal -&gt; Shell Path -&gt; 用 Everything 搜索 <code>git-for-windows</code> ，复制包含 <code>cmder\vendor\git-for-windows\bin\bash.exe</code> 的路径。</li><li>配置 Git。Setting -&gt; Version Control -&gt; Git -&gt; Path to Git executable -&gt;  用 Everything 搜索 <code>git-for-windows</code> ，复制包含 <code>cmder\vendor\git-for-windows\bin\git.exe</code> 的路径。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记--React（一）基础篇</title>
      <link href="/2021/08/14/xiao-bai-cai-bi-ji-react-yi/"/>
      <url>/2021/08/14/xiao-bai-cai-bi-ji-react-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面的碎碎念💬："><a href="#写在前面的碎碎念💬：" class="headerlink" title="写在前面的碎碎念💬："></a>写在前面的碎碎念💬：</h2><p>从大学自学前端到毕业做非前端工作再到裸辞重新学前端，两次学习的体会还是有所不同的。第一次学习的经历就像盲人摸象，摸到啥是啥，跟着网上的教程做，自己设置需求然后不断写bug，当时还是学生，时间也多，做了几个自认为不错的项目，凭着一股初生牛犊不怕虎的劲儿兴冲冲的找工作，当然结果是没找着，好像一股热情被浇了盆冰水。后面在亲戚介绍下做了份不搭边的工作，算是温水煮青蛙的过了三年，期间也有段时间在坚持学习前端知识，但终究还是迫于时间和工作的压力，顶多算是学了点水花。因为工作的关系，为提高效率，后来花了很多时间在学习VBA和Excel函数。虽然只算涉猎了些皮毛，但庆幸自己一直在坚持学习，脑子不太生锈，第二次学习虽然不如第一次掌握得快，但多嚼几遍总能加深印象。当然了，第二次学习更加是得益于有了系统的学习方法和前人的指导，内心里还是十分感激这些老师们的。好像说得有点多，这个等有空再整理出来吧。因为是刚写完几个React的项目，所以想着趁热打铁把笔记写到博客里，方便温故知新。</p><h1 id="React-怎么用"><a href="#React-怎么用" class="headerlink" title="React 怎么用"></a>React 怎么用</h1><ol><li><p>通过 CDN 引入</p><p> 用 &lt;script&gt; 先引入 <code>react.x.min.js</code> 再引入 <code>react-dom.x.min.js</code><br> 可以到 <a href="https://www.bootcdn.cn/">BootCDN</a> 搜索 CDN</p></li><li><p>通过 webpack 引入</p><p> 使用你喜欢的包管理器进行安装</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> react react-dom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 在项目中通过 <code>import</code> 引入</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>通入 Create React App 引入</p><p> 前置条件：<code>Node.js</code> <code>Cmder</code></p><p> 在预备创建项目的地方打开 <code>Cmder</code> 执行以下命令（<del>关于 <code>Cmder</code> 等安装配置后面有空整理出来</del> 整理好了，在这：<a href="https://april-cl.github.io/2021/08/16/xin-shou-qian-duan-de-zhuang-ji-gong-lue-na-lai-ba-ni/">新手前端的装机攻略，拿来吧你</a> 🙆‍♀）</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx create-react-app my-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 因为是自己做项目，所以一般用的第3种方式创建 React 应用，这种方式会配置好开发环境。成功后的目录是这样的</p> <pre class="line-numbers language-none"><code class="language-none">my-app├─ .git├─ .gitignore├─ package.json├─ public│  ├─ favicon.ico│  ├─ index.html│  ├─ logo192.png│  ├─ logo512.png│  ├─ manifest.json│  └─ robots.txt├─ README.md├─ src│  ├─ App.css│  ├─ App.js│  ├─ App.test.js│  ├─ index.css│  ├─ index.js│  ├─ logo.svg│  ├─ reportWebVitals.js│  └─ setupTests.js└─ yarn.lock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="JSX-是什么"><a href="#JSX-是什么" class="headerlink" title="JSX 是什么"></a>JSX 是什么</h1><p>先来看一段有趣的代码吧</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>咋一看会以为是一个普通的 <code>JavaScript</code> 变量声明，但仔细看这个变量的值是一个并没有用引号包裹的 <code>HTML</code> 标签。这就是 <code>JSX</code>，它是一个 <code>JavaScript</code> 的语法扩展。一般建议在 <code>React</code> 中配合使用 <code>JSX</code>，<code>JSX</code> 可以很好地描述 UI 应该呈现出它应有交互的本质形式。<code>JSX</code> 具有 <code>JavaScript</code> 的全部功能，并且可以生成 <code>React</code> “元素”。</p><p><code>webpack</code> 内置了 <code>babel-loader</code>，可以将 JSX 编译成 JS 代码，这里涉及到编译原理不述，上面的代码被编译成：</p><pre class="line-numbers language-none"><code class="language-none">var element = React.createElement("h1", null, "Hello, world!");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么使用 <code>JSX</code> <a href="https://zh-hans.reactjs.org/docs/introducing-jsx.html">官网</a>有解释，这里就不赘述了。</p><p>使用 <code>JSX</code> 的注意事项  </p><ul><li>驼峰命名法<br>  因为 <code>JSX</code> 语法上更接近 <code>JavaScript</code> 而不是 <code>HTML</code>，所以 <code>React DOM</code> 使用 <code>camelCase</code>（驼峰命名法）来定义属性的名称，而不使用 <code>HTML</code> 属性名称的命名约定。例如，<code>JSX</code> 里的 <code>class</code> 变成了 <code>className</code>。</li><li>嵌入表达式<br>  标签里的所有 <code>JS</code> 代码都要用 <code>{}</code> 包起来。例如，使用到变量 <code>n</code>，则需写成 <code>{n}</code>；使用到对象 <code>{n: 1}</code>，则需写成 <code>{{n: 1}}</code></li><li>养成 <code>return</code> 后面加 <code>()</code> 的习惯</li></ul><h1 id="React-元素"><a href="#React-元素" class="headerlink" title="React 元素"></a>React 元素</h1><p>元素是构成 <code>React</code> 应用的最小单位。<code>React DOM</code> 负责更新 <code>DOM</code> 来与 <code>React 元素</code>保持一致。</p><h2 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h2><p>通过 <code>ReactDOM.render(element, container[, callback])</code> 将 <code>React 元素(element)</code>渲染到 <code>DOM 节点(container)</code>。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里假设HTML 文件某处有一个 <code>id</code> 为 <code>root</code> 的 <code>div</code>。</p><p><code>React 元素</code>是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。更新 UI 唯一的方式是创建一个全新的元素，并将其传入 <code>ReactDOM.render()</code>。<code>React DOM</code> 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 <code>DOM</code> 达到预期的状态。</p><h1 id="React-组件"><a href="#React-组件" class="headerlink" title="React 组件"></a>React 组件</h1><h2 id="Element元素-VS-Component组件"><a href="#Element元素-VS-Component组件" class="headerlink" title="Element元素 VS Component组件"></a>Element元素 VS Component组件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> div <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>         <span class="token comment">// div 是 React 元素</span><span class="token keyword">const</span> <span class="token function-variable function">Div</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>   <span class="token comment">// Div 是 React 组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>简单理解就是一个返回 <code>React 元素</code> 的 <strong><code>函数</code></strong> 就是组件。</p><p>在自定义组件中， <code>JSX</code> 所接收的属性以及子组件会被转换为单个对象传递给组件，这个对象被称之为 <code>props</code>。</p><blockquote><p>注意： 组件名称必须以<strong>大写字母</strong>开头。React 会将以小写字母开头的组件视为原生 DOM 标签。</p></blockquote><h2 id="class-组件"><a href="#class-组件" class="headerlink" title="class 组件"></a>class 组件</h2><p>使用 ES6 的 class 定义组件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><p>使用 JavaScript 函数 定义组件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="组件渲染"><a href="#组件渲染" class="headerlink" title="组件渲染"></a>组件渲染</h2><p>上面例子 class 组件和函数组件是这样调用的：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Welcome</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>April-cl<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在页面上会渲染成 <code>Hello, April-cl</code></p><p><code>&lt;Welcome name='April-cl' /&gt;</code> 会被编译成 <code>React.createElement(Welcome, {name: 'April-cl'})</code></p><p><code>React.createElement</code>的逻辑：</p><ul><li>如果传入一个字符串 <code>'div'</code>，则会创建一个 <code>div</code></li><li>如果传入一个<code>函数</code>，则会调用该函数，<code>获取其返回值</code></li><li>如果传入一个<code>类</code>，则在类前面加个 <code>new</code> （这会导致执行 <code>constructor</code>），获取一个组件对象，然后调用对象的 <code>render</code> 方法，<code>获取其返回值</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/10/hello-world/"/>
      <url>/2021/08/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL 基础扫盲</title>
      <link href="/2024/06/08/sql-ji-chu-sao-mang/"/>
      <url>/2024/06/08/sql-ji-chu-sao-mang/</url>
      
        <content type="html"><![CDATA[<p>读《SQL必知必会（第5版）》后记录</p><h1 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库（database）保存有组织的数据的容器（通常是一个文件或一组文件）</p><p>注意：数据库软件应称为数据库管理系统（DBMS），数据库是通过 DBMS 创建和操纵的容器</p><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><p>表（table）某种特定类型数据的结构化清单</p><h2 id="列"><a href="#列" class="headerlink" title="列"></a>列</h2><p>表中的一个字段。所有表都是由一个或多个列组成的</p><h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><p>表中的一个记录</p><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>一列（或几列），其值能够唯一标识表中每一行</p><h2 id="注释语法"><a href="#注释语法" class="headerlink" title="注释语法"></a>注释语法</h2><ol><li><p>使用 <code>-- 注释内容</code></p></li><li><p>使用 <code># 注释内容</code>（部分 DBMS 不支持）</p></li><li><p>使用 <code>/* 注释内容 */</code></p></li></ol><h2 id="子句"><a href="#子句" class="headerlink" title="子句"></a>子句</h2><p>SQL语句由子句构成，有些子句是必需的，有些则是可选的。一个子句通常由一个关键字加上所提供的数据组成</p><h1 id="查"><a href="#查" class="headerlink" title="查"></a>查</h1><h2 id="检索单列"><a href="#检索单列" class="headerlink" title="检索单列"></a>检索单列</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="检索多列"><a href="#检索多列" class="headerlink" title="检索多列"></a>检索多列</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名<span class="token number">1</span><span class="token punctuation">,</span> 列名<span class="token number">2</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="检索不同的值"><a href="#检索不同的值" class="headerlink" title="检索不同的值"></a>检索不同的值</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 列名 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="限制结果"><a href="#限制结果" class="headerlink" title="限制结果"></a>限制结果</h2><p>返回指定表中所有匹配的行，各种数据库中的这一 SQL 实现并不相同，示例用 MySQL，下同</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> 行数<span class="token punctuation">;</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> 行数 <span class="token keyword">OFFSET</span> 偏移行数<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：第一个被检索的行是第0行，而不是第1行。因此，LIMIT 1 OFFSET 1会检索第2行，而不是第1行。</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 列名（或列别名）<span class="token punctuation">;</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 列名（或列别名） <span class="token keyword">ASC</span><span class="token punctuation">;</span> <span class="token comment">-- 升序，默认</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 列名（或列别名） <span class="token keyword">DESC</span><span class="token punctuation">;</span> <span class="token comment">-- 降序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：在指定一条 ORDER BY 子句时，应该保证它是 SELECT 语句中最后一条子句</p><p>提示：ORDER BY 可以用非检索的列排序数据（即 ORDER BY 后的列不一定是在 SELECT 后出现的列）</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h3><table><thead><tr><th align="left">操作符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等于</td></tr><tr><td align="left">&lt;&gt;</td><td align="left">不等于</td></tr><tr><td align="left">!=</td><td align="left">不等于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于</td></tr><tr><td align="left">!&lt;</td><td align="left">不小于</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于</td></tr><tr><td align="left">!&gt;</td><td align="left">不大于</td></tr><tr><td align="left">BETWEEN</td><td align="left">在指定的两个值之间</td></tr><tr><td align="left">IS NULL</td><td align="left">为 NULL 值</td></tr></tbody></table><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><table><thead><tr><th align="left">操作符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">AND</td><td align="left">检索满足所有给定条件的行</td></tr><tr><td align="left">OR</td><td align="left">检索匹配任一给定条件的行</td></tr><tr><td align="left">IN</td><td align="left">用来指定条件范围，范围中的每个条件都可以进行匹配</td></tr><tr><td align="left">NOT</td><td align="left">否定其后所跟的任何条件</td></tr></tbody></table><p>IN 相对 OR 的优点：</p><ol><li><p>IN 语法更清楚直观</p></li><li><p>在与其他 AND 和 OR 操作符组合使用 IN 时，求值顺序更容易管理</p></li><li><p>IN操作符一般比一组OR操作符执行得更快</p></li><li><p>IN 可以包含其他 SELECT 语句</p></li></ol><p>注意：SQL 在处理 OR 操作符前，优先处理 AND 操作符，为避免歧义，应该使用圆括号明确地分组操作</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table><thead><tr><th align="left">通配符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">%</td><td align="left">表示任何字符出现任意次数</td></tr><tr><td align="left">_</td><td align="left">只匹配单个字符</td></tr><tr><td align="left">[]</td><td align="left">指定一个字符集</td></tr></tbody></table><p>在搜索子句中使用通配符，必须使用 LIKE 操作符</p><h2 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h2><p>计算字段是运行时在SELECT语句内创建的，并不实际存在于数据库表中</p><p>计算字段使用例子：拼接字段、执行算术计算</p><p>拼接字段：将值联结到一起构成单个值，根据使用的 DBMS 选择用 + 或 || 拼接</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>只有少数几个函数被所有主要的 DBMS 等同地支持，即 SQL 函数不是可移植的</p><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><p>对某些行运行的函数，计算并返回一个值</p><table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">AVG()</td><td align="left">返回某列的平均值</td></tr><tr><td align="left">COUNT()</td><td align="left">返回某列的行数</td></tr><tr><td align="left">MAX()</td><td align="left">返回某列的最大值</td></tr><tr><td align="left">MIN()</td><td align="left">返回某列的最小值</td></tr><tr><td align="left">SUM()</td><td align="left">返回某列值之和</td></tr></tbody></table><p>以上5个聚集函数都可以如下使用</p><ul><li><p>对所有行执行计算，指定 ALL 参数或不指定参数（因为ALL是默认行为）</p></li><li><p>只包含不同的值，指定 DISTINCT 参数</p></li></ul><p>示例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 平均值只考虑各个不同的价格</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_price <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意：DISTINCT 能用于 COUNT(*)<br>    如果指定列名，则 DISTINCT 只能用于 COUNT()。DISTINCT 不能用于 COUNT(*)。类似地，DISTINCT 必须使用列名，不能用于计算或表达式</p></blockquote><h2 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 列名<span class="token punctuation">;</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 列名 <span class="token keyword">HAVING</span> 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一些重要的规定：</p><ul><li><p> GROUP BY 子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组</p></li><li><p> 如果在 GROUP BY 子句中嵌套了分组，数据将在最后指定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）</p></li><li><p> GROUP BY 子句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在 SELECT 中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式。不能使用别名</p></li><li><p> 大多数SQL实现不允许 GROUP BY 列带有长度可变的数据类型（如文本或备注型字段）</p></li><li><p> 除聚集计算语句外，SELECT 语句中的每一列都必须在 GROUP BY 子句中给出</p></li><li><p> 如果分组列中包含具有 NULL 值的行，则 NULL 将作为一个分组返回。如果列中有多行 NULL 值，它们将分为一组</p></li><li><p> GROUP BY 子句必须出现在 WHERE 子句之后，ORDER BY 子句之前</p></li></ul><h2 id="SELECT-子句顺序"><a href="#SELECT-子句顺序" class="headerlink" title="SELECT 子句顺序"></a>SELECT 子句顺序</h2><table><thead><tr><th align="left">子句</th><th align="left">说明</th><th align="left">是否必须使用</th></tr></thead><tbody><tr><td align="left">SELECT</td><td align="left">要返回的列或表达式</td><td align="left">是</td></tr><tr><td align="left">FROM</td><td align="left">从中检索数据的表</td><td align="left">仅在从表选择数据时使用</td></tr><tr><td align="left">WHERE</td><td align="left">行级过滤</td><td align="left">否</td></tr><tr><td align="left">GROUP BY</td><td align="left">分组说明</td><td align="left">仅在按组计算聚集时使用</td></tr><tr><td align="left">HAVING</td><td align="left">组级过滤</td><td align="left">否</td></tr><tr><td align="left">ORDER BY</td><td align="left">输出排序顺序</td><td align="left">否</td></tr></tbody></table><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>嵌套在其他查询中的查询</p><p>子查询使用例子： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 利用子查询进行过滤</span><span class="token keyword">SELECT</span> cust_id<span class="token keyword">FROM</span> Orders<span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num                    <span class="token keyword">FROM</span> OrderItems                    <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">'RGAN01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 作为计算字段使用子查询</span><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span>        cust_state<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>        <span class="token keyword">FROM</span> Orders        <span class="token keyword">WHERE</span> Orders<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> Customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> orders<span class="token keyword">FROM</span> Customers<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="联结"><a href="#联结" class="headerlink" title="联结"></a>联结</h2><h3 id="叉联结"><a href="#叉联结" class="headerlink" title="叉联结"></a>叉联结</h3><p>笛卡儿积：由没有联结条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数</p><p>返回笛卡儿积的联结，也称叉联结（cross join）</p><h3 id="内联结"><a href="#内联结" class="headerlink" title="内联结"></a>内联结</h3><p>从数学的角度就是求两个表的交集</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h3><p>针对相同的表进行的联结</p><h3 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h3><p>实话实说看书没看懂，看<a href="https://blog.csdn.net/qq_27825451/article/details/81326165">这篇</a>看懂了</p><h3 id="外联结"><a href="#外联结" class="headerlink" title="外联结"></a>外联结</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 左联结</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 右联结</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 全联结，部分 DBMS 不支持</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="带聚集函数的联结"><a href="#带聚集函数的联结" class="headerlink" title="带聚集函数的联结"></a>带聚集函数的联结</h3><p>示例：检索所有顾客及每个顾客所下的订单数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span>        <span class="token function">COUNT</span><span class="token punctuation">(</span>Orders<span class="token punctuation">.</span>order_num<span class="token punctuation">)</span> <span class="token keyword">AS</span> num_ord<span class="token keyword">FROM</span> Customers    <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Orders <span class="token keyword">ON</span> Customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> Orders<span class="token punctuation">.</span>cust_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意区别前面<a href="https://april-cl.github.io/2024/06/08/sql-ji-chu-sao-mang/#toc-heading-22">数据分组</a>提到的规定：</p><ul><li>除聚集计算语句外，SELECT 语句中的每一列都必须在 GROUP BY 子句中给出</li></ul><h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 语句<span class="token number">1</span><span class="token keyword">UNION</span><span class="token keyword">SELECT</span> 语句<span class="token number">2</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 列名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>UNION 进行组合时需要注意几条规则：</p><ul><li><p>UNION 必须由两条或两条以上的 SELECT 语句组成，语句之间用关键字 UNION 分隔</p></li><li><p>UNION 中的每个查询必须包含相同的列、表达式或聚集函数（不过，各个列不需要以相同的次序列出）</p></li><li><p>列数据类型必须兼容：类型不必完全相同，但必须是 DBMS 可以隐含转换的类型（例如，不同的数值类型或不同的日期类型</p></li></ul><p>UNION：从查询结果集中自动去除了重复的行</p><p>UNION ALL：返回所有的匹配行</p><h1 id="增"><a href="#增" class="headerlink" title="增"></a>增</h1><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 插入自定义的行</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 VALUS<span class="token punctuation">(</span>值<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">-- 不指定列名，需按表定义中出现的次序填充</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">(</span>列<span class="token punctuation">)</span> VALUS<span class="token punctuation">(</span>值<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 指定列名</span><span class="token comment">-- 插入检索出的数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">(</span>列<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> 语句<span class="token punctuation">;</span><span class="token comment">-- 将一个表的内容复制到一个全新的表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表<span class="token number">1</span> <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表<span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">-- MySQL 支持的写法，需要看具体使用的 DBMS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要客户端/服务器 DBMS 中的特定安全权限</p><h1 id="改"><a href="#改" class="headerlink" title="改"></a>改</h1><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 列<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span> 列<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span> <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要客户端/服务器 DBMS 中的特定安全权限</p><h1 id="删"><a href="#删" class="headerlink" title="删"></a>删</h1><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DElETE</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>DELETE 删除整行而不是删除列。要删除指定的列，请使用 UPDATE 语句（<code>UPDATE 表名 SET 列 = NULL WHERE 条件;</code>）</p><p>需要客户端/服务器 DBMS 中的特定安全权限</p><p><strong>注意</strong></p><ul><li><p>除非确实是需要更新/修改每一行，否则使用 UPDATE 或 DELETE 语句一定要带上 WHERE 子句</p></li><li><p>在 UPDATE 或 DELETE 语句使用 WHERE 子句前，应该先用 SELECT 进行测试，保证它过滤的是正确的记录，以防编写的 WHERE 子句不正确</p></li></ul><h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>一般有两种创建表的方法：</p><ul><li><p>多数 DBMS 都具有交互式创建和管理数据库表的工具</p></li><li><p>表也可以直接用 SQL 语句操纵（在不同的 SQL 实现中，CREATE TABLE 语句的语法可能有所不同）</p></li></ul><p>利用 CREATE TABLE 创建表，必须给出下列信息：</p><ul><li><p>新表的名字，在关键字 CREATE TABLE 之后给出</p></li><li><p>表列的名字和定义，用逗号分隔</p></li><li><p>有的DBMS还要求指定表的位置</p></li></ul><p>示例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> OrderItems<span class="token punctuation">(</span>    order_num       <span class="token keyword">INTEGER</span>            <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    order_item      <span class="token keyword">INTEGER</span>            <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    prod_id          <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>           <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    quantity        <span class="token keyword">INTEGER</span>            <span class="token operator">NOT</span> <span class="token boolean">NULL</span>       <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">,</span>    item_price      <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NULL 值就是没有值或缺值。允许 NULL 值的列也允许在插入行时不给出该列的值,不允许 NULL 值的列不接受没有列值的行</p><p>默认值在 CREATE TABLE 语句的列定义中用关键字 DEFAULT 指定</p><h2 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h2><p>使用 ALTER TABLE 更改表结构，必须给出下面的信息：</p><ul><li><p>在ALTER TABLE 之后给出要更改的表名（该表必须存在，否则将出错）</p></li><li><p>列出要做哪些更改</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 增加列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 列 数据类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token comment">-- 删除列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> 列<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图本身是一个虚拟表，它的数据来自于表，通过执行时动态生成</p><p>好处：</p><ol><li><p>简化 sql 语句</p></li><li><p>提高 sql 重用性</p></li><li><p>保护基表数据，提高安全性</p></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建视图</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名 <span class="token keyword">AS</span> 查询语句<span class="token punctuation">;</span><span class="token comment">-- 删除视图</span><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> 视图名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>存储过程是为了完成特定功能的 SQL 语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数来调用执行（理解为函数？）</p><p>不同 DBMS 中的存储过程语法有所不同。事实上，编写真正的可移植存储过程几乎是不可能的。不过，存储过程的自我调用（名字以及数据如何传递）可以相对保持可移植</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建存储过程</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名<span class="token punctuation">(</span>参数模式 参数名 参数类型<span class="token punctuation">)</span><span class="token keyword">BEGIN</span>存储过程体<span class="token keyword">END</span><span class="token comment">-- 调用存储过程</span><span class="token keyword">CALL</span> 存储过程名<span class="token punctuation">(</span>实参<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数模式： IN | OUT | INOUT，IN 可以省略</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务处理是一种机制，用来管理必须成批执行的 SQL 操作，保证数据库不包含不完整的操作结果。利用事务处理，可以保证一组操作不会中途停止，它们要么完全执行，要么完全不执行（除非明确指示）。如果没有错误发生，整组语句提交给（写到）数据库表；如果发生错误，则进行回退（撤销），将数据库恢复到某个已知且安全的状态</p><p>事务处理用来管理 INSERT、UPDATE 和 DELETE 语句。不能回退 SELECT 语句（回退 SELECT 语句也没有必要），也不能回退 CREATE 或 DROP 操作。事务处理中可以使用这些语句，但进行回退时，这些操作也不撤销。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 开始事务</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">-- 事务回滚</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">-- 用于在事务中设置保存点，以便稍后能够回滚到该点</span><span class="token keyword">SAVEPOINT</span> 保存点<span class="token punctuation">;</span><span class="token comment">-- 用于回滚到之前设置的保存点</span><span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> <span class="token keyword">SAVEPOINT</span> 保存点<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建游标</span><span class="token keyword">DECLARE</span> 游标名 <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> 查询语句<span class="token punctuation">;</span><span class="token comment">-- 打开游标</span><span class="token keyword">OPEN</span> <span class="token keyword">CURSOR</span> 游标名<span class="token comment">-- 访问游标数据</span><span class="token keyword">FETCH</span> 游标名 <span class="token keyword">INTO</span>  变量<span class="token punctuation">;</span><span class="token comment">-- 关闭游标</span><span class="token keyword">CLOSE</span> 游标名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 书籍 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 命令备忘录</title>
      <link href="/2024/05/28/hexo-ming-ling-bei-wang-lu/"/>
      <url>/2024/05/28/hexo-ming-ling-bei-wang-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会建立在 _posts 目录下</p><h1 id="新建草稿"><a href="#新建草稿" class="headerlink" title="新建草稿"></a>新建草稿</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new draft <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会建立在 _drafts 目录下</p><h1 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h1><ol><li>不能预览草稿</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>可以预览草稿</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s <span class="token parameter variable">--draft</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="文章与草稿转换"><a href="#文章与草稿转换" class="headerlink" title="文章与草稿转换"></a>文章与草稿转换</h1><ol><li>草稿发布为文章</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo p <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>文章转为草稿</li></ol><p>手动将文章从 _posts 目录移动到 _drafts 目录</p><h1 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g<span class="token comment"># 或者加上 -d，让 Hexo 在生成完毕后自动部署网站，作用同下文部署</span>hexo g <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span class="token comment"># 或者加上 -g，让 Hexo 在生成完毕后自动部署网站， 作用同上文生成静态文件</span>hexo d <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="清除缓存和已生成的静态文件"><a href="#清除缓存和已生成的静态文件" class="headerlink" title="清除缓存和已生成的静态文件"></a>清除缓存和已生成的静态文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h1><p>手动删除 _posts 目录下文件即可</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记：《Vue.js设计与实现》—— 响应系统的作用与实现</title>
      <link href="/2024/05/28/bi-ji-vue-js-she-ji-yu-shi-xian-xiang-ying-xi-tong-de-zuo-yong-yu-shi-xian/"/>
      <url>/2024/05/28/bi-ji-vue-js-she-ji-yu-shi-xian-xiang-ying-xi-tong-de-zuo-yong-yu-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>最近在看《Vue.js设计与实现》这本书，第四章响应系统的作用与实现真是干货满满，反反复复看了好几遍才看得明白，记录一下~</p><h1 id="响应式数据与副作用函数"><a href="#响应式数据与副作用函数" class="headerlink" title="响应式数据与副作用函数"></a>响应式数据与副作用函数</h1><h2 id="副作用函数"><a href="#副作用函数" class="headerlink" title="副作用函数"></a>副作用函数</h2><p>在系统开发和设计中，一般函数设计的时候都是内部执行，并不会影响外部的执行，但是如果一个内部函数影响了外部的执行，这个就叫做副作用，基于这个特性对于这些函数都被称为具有副作用的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'hello vue3'</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面示例中 effect 函数执行时会设置 body 的文本内容，getText 函数读取 body 的文本内容，effect 函数的执行会影响 getText 函数的执行结果，也就是说 effect 函数产生了副作用</p><h2 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h2><p>当数据发生变化时，与之相关联的副作用函数能够自动重新执行</p><p>如下面示例中的 obj，我们希望在 obj.text 的值变化时能够自动重新执行 effect 函数（这里还没有实现响应式~）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hello world'</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="响应式数据的基本实现"><a href="#响应式数据的基本实现" class="headerlink" title="响应式数据的基本实现"></a>响应式数据的基本实现</h1><h2 id="实现响应式数据的核心逻辑"><a href="#实现响应式数据的核心逻辑" class="headerlink" title="实现响应式数据的核心逻辑"></a>实现响应式数据的核心逻辑</h2><ul><li><p><em><strong>getter</strong></em>，即数据读取：当副作用函数 effect 执行时，会触发字段 obj.text 的<strong>读取</strong>操作</p></li><li><p><em><strong>setter</strong></em>，即数据修改：当修改 obj.text 的值时，会触发字段 obj.text 的<strong>设置</strong>操作</p></li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>当读取操作发生时，将当前执行的副作用函数存储到“桶”中，当设置操作发生时，再将副作用函数从“桶”里取出并执行</p><h2 id="如何才能拦截一个对象属性的读取和设置操作"><a href="#如何才能拦截一个对象属性的读取和设置操作" class="headerlink" title="如何才能拦截一个对象属性的读取和设置操作"></a>如何才能拦截一个对象属性的读取和设置操作</h2><ul><li>Vue 2 通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a> 函数实现</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>obj</code> 要定义属性的对象。</p><p><code>prop</code> 一个字符串或 Symbol，指定了要定义或修改的属性键。</p><p><code>descriptor</code> 要定义或修改的属性的描述符。</p><ul><li>Vue 3 通过代理对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a> 实现</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>target</code> 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</p><p><code>handler</code> 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。</p><p>根据以上，完成一个响应系统的简单实现 <a id="code1">code 1</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下技术代码</span><span class="token comment">// 存储副作用函数的桶</span><span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 原始数据，原始数据的定义其实应该在业务代码里面的，这里先不做讨论</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hello world'</span> <span class="token punctuation">}</span><span class="token comment">// 对原始数据的代理</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 拦截读取操作</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将副作用函数 effect 添加到存储副作用函数的桶中</span>    bucket<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>    <span class="token comment">// 返回属性值</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 拦截设置操作</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 设置属性值</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal    <span class="token comment">// 把副作用函数从桶里取出并执行</span>    bucket<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 技术代码结束</span><span class="token comment">// 以下业务代码</span><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 1 秒后修改 text</span>  obj<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">// 业务代码结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行可以看见 1 秒后文本内容变成 123</p><p>注：技术代码为方便开发者开发使用，业务代码与业务逻辑相关，两者应当是分离的，书中并没有提及技术代码和业务代码，这里只是为了方便自己理解 ~~~</p><h1 id="设计一个完善的响应系统"><a href="#设计一个完善的响应系统" class="headerlink" title="设计一个完善的响应系统"></a>设计一个完善的响应系统</h1><h2 id="问题1：消除硬编码副作用函数名"><a href="#问题1：消除硬编码副作用函数名" class="headerlink" title="问题1：消除硬编码副作用函数名"></a>问题1：消除硬编码副作用函数名</h2><p>观察 <a href="#code1">code 1</a>，技术代码中直接使用业务代码的 <code>effect</code> 副作用函数名，一般来说，技术代码和业务代码应该是分离的。另外，即使副作用函数是匿名函数也应当能被收集到“桶”中。这里给出的解决方法是：用一个全局变量存储被注册的副作用函数，从业务代码中抽离出一个副作用函数注册函数到技术代码中，业务代码调用注册函数，将副作用函数参数的形式传入赋值给全局变量，原先技术代码内调用业务代码中副作用函数的地方修改为调用全局变量存储的副作用函数</p><p><a id="code2">code 2</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下技术代码</span><span class="token comment">// 存储副作用函数的桶</span><span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 原始数据</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hello world'</span> <span class="token punctuation">}</span><span class="token comment">// 对原始数据的代理</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 拦截读取操作</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将 activeEffect 中存储的副作用函数添加到存储副作用函数的桶中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>      bucket<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// 返回属性值</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 拦截设置操作</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 设置属性值</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal    <span class="token comment">// 把副作用函数从桶里取出并执行</span>    bucket<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 用一个全局变量存储当前被注册的 effect 函数</span><span class="token keyword">let</span> activeEffect<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span>  activeEffect <span class="token operator">=</span> fn  <span class="token comment">// 执行副作用函数</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 技术代码结束</span><span class="token comment">// 以下业务代码</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 1 秒后修改 text</span>  obj<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">// 业务代码结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题2：响应式数据上设置不存在的属性时不应该执行副作用函数"><a href="#问题2：响应式数据上设置不存在的属性时不应该执行副作用函数" class="headerlink" title="问题2：响应式数据上设置不存在的属性时不应该执行副作用函数"></a>问题2：响应式数据上设置不存在的属性时不应该执行副作用函数</h2><p>观察 <a href="#code2">code 2</a>，代理对象拦截读取、设置操作时并没有对 key 做判断，这就存在一个问题：在响应式数据 obj 上设置任何属性时，都能触发收集在桶里的副作用函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下业务代码</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>text  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 1 秒后修改 text</span>  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">// 业务代码结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>稍微修改下业务代码，可以看见虽然 1 秒后修改的是 obj.name 而不是 obj.text，effect 函数仍然会执行。导致问题的根本原因是：没有在副作用函数与被操作的目标字段之间建立明确的联系</p><p>此外，可以想到，一个副作用函数可能读取多个对象属性，一个对象属性可能同时存在多个副作用函数，多个对象亦关联多个相同或不同的副作用函数</p><p>用树型结构表示如下</p><pre class="line-numbers language-none"><code class="language-none">一个副作用函数中读取了同一个对象的两个不同属性01 target02     └── text103         └── effectFn04     └── text205         └── effectFn两个副作用函数同时读取同一个对象的属性值01 target02     └── text03         └── effectFn104         └── effectFn2在不同的副作用函数中读取了两个不同对象的不同属性01 target102     └── text103         └── effectFn104 target205     └── text206         └── effectFn2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回看前面对桶的定义 <code>const bucket = new Set()</code>，也就是说桶是类似数组 [effectFn1, effectFn2, …] 这样的结构，这样是有缺陷的，经上面的分析：副作用函数需与被操作的目标字段之间建立明确的联系，也就是应当是类似 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>   <span class="token literal-property property">target1</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">text1</span><span class="token operator">:</span> <span class="token punctuation">[</span>effectFn1<span class="token punctuation">,</span> effectFn2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的对象结构。于是使用  WeakMap 代替 Set 作为桶的数据结构</p><blockquote><p><strong>为什么不是 Map 呢</strong><br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">WeakMap</a> 对 key 是弱引用，不影响垃圾回收器的工作。据这个特性可知，一旦 key 被垃圾回收器回收，那么对应的键和值就访问不到了。所以 WeakMap 经常用于存储那些只有当 key 所引用的对象存在时（没有被回收）才有价值的信息，如果使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a> 来代替 WeakMap，那么即使用户侧的代码对 target 没有任何引用，这个 target 也不会被回收，最终可能导致内存溢出</p></blockquote><p><a id="code3">code 3</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下技术代码</span><span class="token comment">// 存储副作用函数的桶</span><span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 原始数据</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hello world'</span> <span class="token punctuation">}</span><span class="token comment">// 对原始数据的代理</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 拦截读取操作</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将副作用函数 activeEffect 添加到存储副作用函数的桶中</span>    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment">// 返回属性值</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 拦截设置操作</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 设置属性值</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal    <span class="token comment">// 把副作用函数从桶里取出并执行</span>    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> effects <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  effects <span class="token operator">&amp;&amp;</span> effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 用一个全局变量存储当前激活的 effect 函数</span><span class="token keyword">let</span> activeEffect<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span>  activeEffect <span class="token operator">=</span> fn  <span class="token comment">// 执行副作用函数</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 技术代码结束</span><span class="token comment">// 以下业务代码</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>text    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行了 effect'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'123'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'effect 不会再执行'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">// 业务代码结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#code3">code 3</a> 做了一些封装处理：</p><ul><li><p>track 函数：副作用函数收集到“桶”里的这部分逻辑</p></li><li><p>trigger 函数：触发副作用函数重新执行的逻辑</p></li></ul><hr><p>下面重头戏开始啦（🤯要长脑子啦~</p><hr><h1 id="分支切换与-cleanup"><a href="#分支切换与-cleanup" class="headerlink" title="分支切换与 cleanup"></a>分支切换与 cleanup</h1><h2 id="问题3：分支切换导致依赖冗余"><a href="#问题3：分支切换导致依赖冗余" class="headerlink" title="问题3：分支切换导致依赖冗余"></a>问题3：分支切换导致依赖冗余</h2><p>引用书中示例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">01</span> <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hello world'</span> <span class="token punctuation">}</span><span class="token number">02</span> <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">03</span><span class="token number">04</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">05</span>   document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>ok <span class="token operator">?</span> obj<span class="token punctuation">.</span>text <span class="token operator">:</span> <span class="token string">'not'</span><span class="token number">06</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当字段 obj.ok 的值发生变化时，代码执行的分支会跟着变化，这就是所谓的分支切换。（obj.ok 才是主角，obj.text 是配角，副作用函数的执行由主角决定，配角在主角需要的时候才上场，不需要的时候是没有戏份滴 🤭）</p><p>现在来看 <a href="#code3">code 3</a>，稍微修改下代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下技术代码</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hello world'</span><span class="token punctuation">,</span> <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token comment">// 原代码不变</span><span class="token comment">// 技术代码结束</span><span class="token comment">// 以下业务代码</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>ok <span class="token operator">?</span> obj<span class="token punctuation">.</span>text <span class="token operator">:</span> <span class="token string">'not'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行了 effect'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">.</span>ok <span class="token operator">=</span> <span class="token boolean">false</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'effect 会再执行'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'change text'</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'effect 不应该再执行但实际上会执行'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">// 业务代码结束</span><span class="token comment">// 控制台显示：</span><span class="token comment">// 执行了 effect</span><span class="token comment">// 执行了 effect</span><span class="token comment">// effect 会再执行</span><span class="token comment">// 执行了 effect</span><span class="token comment">// effect 不应该再执行但实际上会执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看见，在 obj.ok 为 false 之后修改 obj.text 会重新执行副作用函数，尽管此时 document.body.innerText 并不需要 get obj.text（这个时候希望的副作用函数应该如下代码 2 所示），出现这个问题的原因是在首次 obj.ok = true 时已经存储了如下（代码 1）所示副作用函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 代码 1</span><span class="token comment">// obj.ok = true</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>text    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行了 effect'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 代码 2</span><span class="token comment">// obj.ok = false</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'not'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行了 effect'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以解决问题的思路是：每次副作用函数执行时，可以先把它从所有与之关联的依赖集合中删除，当副作用函数执行完毕后，会重新建立联系，但在新的联系中不会包含遗留的副作用函数</p><blockquote><p>这里可能有点疑惑是否存在性能问题，如果不做依赖回收，代码执行过程中频繁切换分支导致冗余依赖增长，成本巨大，所以这是一个权衡的结果</p></blockquote><p>实现：在 effect 内部定义了新的 effectFn 函数，并为其添加了 effectFn.deps 属性，该属性是一个数组，用来存储所有包含当前副作用函数的依赖集合，在 track 函数中把 activeEffect 添加到 activeEffect.deps 数组中，这样就完成了对依赖集合的收集</p><p><a id="code4">code 4</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下技术代码</span><span class="token comment">// 存储副作用函数的桶</span><span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 原始数据</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hello world'</span> <span class="token punctuation">}</span><span class="token comment">// 对原始数据的代理</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 拦截读取操作</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将副作用函数 activeEffect 添加到存储副作用函数的桶中</span>    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment">// 返回属性值</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 拦截设置操作</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 设置属性值</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal    <span class="token comment">// 把副作用函数从桶里取出并执行</span>    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> effects <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">const</span> effectsToRun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  effects <span class="token operator">&amp;&amp;</span> effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> effectsToRun<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span><span class="token punctuation">)</span>  effectsToRun<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 用一个全局变量存储当前激活的 effect 函数</span><span class="token keyword">let</span> activeEffect<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">effectFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">cleanup</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token comment">// 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span>    activeEffect <span class="token operator">=</span> effectFn    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// activeEffect.deps 用来存储所有与该副作用函数相关的依赖集合</span>  effectFn<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 执行副作用函数</span>  <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> deps <span class="token operator">=</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    deps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">// 技术代码结束</span><span class="token comment">// 以下业务代码</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'effect run'</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>ok <span class="token operator">?</span> obj<span class="token punctuation">.</span>text <span class="token operator">:</span> <span class="token string">'not'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 为了方便理解 effectFn.deps，这里多调用了两次 effect 副作用注册函数</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> xxx <span class="token operator">=</span> obj<span class="token punctuation">.</span>ok  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'effect run obj.ok'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> xxx <span class="token operator">=</span> obj<span class="token punctuation">.</span>text  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'effect run obj.text'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>ok <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'hello vue3'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">// 业务代码结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>下面列了几个阅读时困惑的问题</p><h3 id="1-如何想到用函数属性（effectFn-deps）来存储的"><a href="#1-如何想到用函数属性（effectFn-deps）来存储的" class="headerlink" title="1. 如何想到用函数属性（effectFn.deps）来存储的"></a>1. 如何想到用函数属性（effectFn.deps）来存储的</h3><p>不知道，想到这个方法的人真是人才（褒义~）</p><p>emmmm 道行不够还需修行</p><h3 id="2-为什么-effect-函数不-activeEffect-fn-而是-activeEffect-effectFn"><a href="#2-为什么-effect-函数不-activeEffect-fn-而是-activeEffect-effectFn" class="headerlink" title="2. 为什么 effect 函数不 activeEffect = fn 而是 activeEffect = effectFn"></a>2. 为什么 effect 函数不 <code>activeEffect = fn</code> 而是 <code>activeEffect = effectFn</code></h3><p>复制书友</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 用一个全局变量存储被注册的副作用函数</span><span class="token keyword">let</span> activeEffect<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  activeEffect <span class="token operator">=</span> fn  activeEffect<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果直接这样写的话, 相当于给 fn 函数添加了一个 deps 的属性, 会导致对外暴露了 deps, 不安全的行为</p><h3 id="3-cleanup-函数为什么要遍历-effectFn-deps-数组"><a href="#3-cleanup-函数为什么要遍历-effectFn-deps-数组" class="headerlink" title="3. cleanup 函数为什么要遍历 effectFn.deps 数组"></a>3. cleanup 函数为什么要遍历 effectFn.deps 数组</h3><p>effectFn：function</p><p>effectFn.deps: [Set(), Set(), …] =&gt; Set()：[effectFn, effectFn, …]</p><p>这里 Set() 是 key 的依赖集合，遍历是为了把 effectFn 从依赖集合中移除</p><h3 id="4-cleanup-函数为什么是用-effectFn-deps-length-0-而不是-effectFn-deps"><a href="#4-cleanup-函数为什么是用-effectFn-deps-length-0-而不是-effectFn-deps" class="headerlink" title="4. cleanup 函数为什么是用 effectFn.deps.length = 0 而不是 effectFn.deps = []"></a>4. cleanup 函数为什么是用 <code>effectFn.deps.length = 0</code> 而不是 <code>effectFn.deps = []</code></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// array.length = 0 和 array = [] 的区别：</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">let</span> foo1 <span class="token operator">=</span> foo<span class="token keyword">let</span> bar1 <span class="token operator">=</span> barfoo1<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>bar1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> foo1<span class="token punctuation">,</span> bar<span class="token punctuation">,</span> bar1<span class="token punctuation">)</span> <span class="token comment">// [] [] [1, 2] []</span><span class="token comment">// array.length = 0 保留对原数组的引用并清空元素</span><span class="token comment">// array = [] 创建一个新的空数组，对原数组无影响</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-trigger-函数里新构造的-effectsToRun-集合"><a href="#5-trigger-函数里新构造的-effectsToRun-集合" class="headerlink" title="5. trigger 函数里新构造的 effectsToRun 集合"></a>5. trigger 函数里新构造的 effectsToRun 集合</h3><p>这其实是书里的内容，目的是为了避免无限执行</p><blockquote><p>ECMA 语言规范中对此有明确的说明：在调用 forEach 遍历 Set 集合时，如果一个值已经被访问过了，但该值被删除并重新添加到集合，如果此时 forEach 遍历没有结束，那么该值会重新被访问</p></blockquote><h1 id="嵌套的-effect-与-effect-栈"><a href="#嵌套的-effect-与-effect-栈" class="headerlink" title="嵌套的 effect 与 effect 栈"></a>嵌套的 effect 与 effect 栈</h1><p>先来理解下为什么需要支持嵌套</p><p>Vue.js 的渲染函数其实是在一个 effect 中执行的，在组件 A 中渲染组件 B 是很常见的场景，所以 effect 需要设计成可嵌套的。</p><h2 id="问题4：支持-effect-嵌套"><a href="#问题4：支持-effect-嵌套" class="headerlink" title="问题4：支持 effect 嵌套"></a>问题4：支持 effect 嵌套</h2><p>将业务代码修改如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> temp1<span class="token punctuation">,</span> temp2<span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">effectFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'effectFn1 执行'</span><span class="token punctuation">)</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">effectFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'effectFn2 执行'</span><span class="token punctuation">)</span>    temp2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>text  <span class="token punctuation">}</span><span class="token punctuation">)</span>  temp1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>ok<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到控制台输出</p><pre class="line-numbers language-none"><code class="language-none">effectFn1 执行effectFn2 执行effectFn2 执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>理想结果是</p><pre class="line-numbers language-none"><code class="language-none">effectFn1 执行effectFn2 执行effectFn1 执行effectFn2 执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>问题出在 effect 函数与 activeEffect 上，全局变量 activeEffect 来存储通过 effect 函数注册的副作用函数，这意味着同一时刻 activeEffect 所存储的副作用函数只能有一个。当副作用函数发生嵌套时，内层副作用函数的执行会覆盖 activeEffect 的值，并且永远不会恢复到原来的值。这时如果再有响应式数据进行依赖收集，即使这个响应式数据是在外层副作用函数中读取的，它们收集到的副作用函数也都会是内层副作用函数</p><p>解决的思路：我们需要一个副作用函数栈 effectStack，在副作用函数执行时，将当前副作用函数压入栈中，待副作用函数执行完毕后将其从栈中弹出，并始终让 activeEffect 指向栈顶的副作用函数</p><p><a id="code5">code 5</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下技术代码</span><span class="token comment">// 存储副作用函数的桶</span><span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 原始数据</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hello world'</span> <span class="token punctuation">}</span><span class="token comment">// 对原始数据的代理</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 拦截读取操作</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将副作用函数 activeEffect 添加到存储副作用函数的桶中</span>    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment">// 返回属性值</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 拦截设置操作</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 设置属性值</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal    <span class="token comment">// 把副作用函数从桶里取出并执行</span>    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> effects <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">const</span> effectsToRun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  effects <span class="token operator">&amp;&amp;</span> effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> effectsToRun<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span><span class="token punctuation">)</span>  effectsToRun<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 用一个全局变量存储当前激活的 effect 函数</span><span class="token keyword">let</span> activeEffect<span class="token comment">// effect 栈</span><span class="token keyword">const</span> effectStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">effectFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">cleanup</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token comment">// 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span>    activeEffect <span class="token operator">=</span> effectFn    <span class="token comment">// 在调用副作用函数之前将当前副作用函数压栈</span>    effectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并还原 activeEffect 为之前的值</span>    effectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    activeEffect <span class="token operator">=</span> effectStack<span class="token punctuation">[</span>effectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment">// activeEffect.deps 用来存储所有与该副作用函数相关的依赖集合</span>  effectFn<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 执行副作用函数</span>  <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> deps <span class="token operator">=</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    deps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">// 技术代码结束</span><span class="token comment">// 以下业务代码</span><span class="token keyword">let</span> temp1<span class="token punctuation">,</span> temp2<span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">effectFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'effectFn1 执行'</span><span class="token punctuation">)</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">effectFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'effectFn2 执行'</span><span class="token punctuation">)</span>    temp2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>text  <span class="token punctuation">}</span><span class="token punctuation">)</span>  temp1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>ok<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 业务代码结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="避免无限递归循环"><a href="#避免无限递归循环" class="headerlink" title="避免无限递归循环"></a>避免无限递归循环</h1><h2 id="问题5：解决无限递归循环"><a href="#问题5：解决无限递归循环" class="headerlink" title="问题5：解决无限递归循环"></a>问题5：解决无限递归循环</h2><p>修改业务代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>text <span class="token operator">=</span> obj<span class="token punctuation">.</span>text <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>会发现报错 <code>RangeError: Maximum call stack size exceeded</code> (范围错误： 超出最大调用堆栈大小)，这是因为副作用函数还没执行完就要开始下一次回调，因为当前回调没有执行完毕所以不会出栈，不断重复执行当前回调导致栈溢出（obj.text 在 set 阶段又进入 get 阶段，同样的副作用函数入栈，重复循环…）</p><p>解决思路</p><p>在 trigger 动作发生时增加守卫条件：如果 trigger 触发执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行</p><p><a id="code6">code 6</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下技术代码</span><span class="token comment">// 存储副作用函数的桶</span><span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 原始数据</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hello world'</span> <span class="token punctuation">}</span><span class="token comment">// 对原始数据的代理</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 拦截读取操作</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将副作用函数 activeEffect 添加到存储副作用函数的桶中</span>    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment">// 返回属性值</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 拦截设置操作</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 设置属性值</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal    <span class="token comment">// 把副作用函数从桶里取出并执行</span>    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> effects <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">const</span> effectsToRun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  effects <span class="token operator">&amp;&amp;</span> effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectFn <span class="token operator">!==</span> activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>      effectsToRun<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  effectsToRun<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 用一个全局变量存储当前激活的 effect 函数</span><span class="token keyword">let</span> activeEffect<span class="token comment">// effect 栈</span><span class="token keyword">const</span> effectStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">effectFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">cleanup</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token comment">// 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span>    activeEffect <span class="token operator">=</span> effectFn    <span class="token comment">// 在调用副作用函数之前将当前副作用函数压栈</span>    effectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并还原 activeEffect 为之前的值</span>    effectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    activeEffect <span class="token operator">=</span> effectStack<span class="token punctuation">[</span>effectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment">// activeEffect.deps 用来存储所有与该副作用函数相关的依赖集合</span>  effectFn<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 执行副作用函数</span>  <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> deps <span class="token operator">=</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    deps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">// 技术代码结束</span><span class="token comment">// 以下业务代码</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>text <span class="token operator">=</span> obj<span class="token punctuation">.</span>text <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 业务代码结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="调度执行"><a href="#调度执行" class="headerlink" title="调度执行"></a>调度执行</h1><h2 id="问题6：副作用函数执行的时机、次数及方式可控？"><a href="#问题6：副作用函数执行的时机、次数及方式可控？" class="headerlink" title="问题6：副作用函数执行的时机、次数及方式可控？"></a>问题6：副作用函数执行的时机、次数及方式可控？</h2><p>effect 函数提供第 2 个参数 options 对象，其中允许指定 scheduler 调度函数，同时在 effect 函数内部我们需要把 options 选项挂载到对应的副作用函数上（看代码）</p><p><a id="code7">code 7</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下技术代码</span><span class="token comment">// 存储副作用函数的桶</span><span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 原始数据</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'hello world'</span> <span class="token punctuation">}</span><span class="token comment">// 对原始数据的代理</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 拦截读取操作</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将副作用函数 activeEffect 添加到存储副作用函数的桶中</span>    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment">// 返回属性值</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 拦截设置操作</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 设置属性值</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal    <span class="token comment">// 把副作用函数从桶里取出并执行</span>    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> effects <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">const</span> effectsToRun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  effects <span class="token operator">&amp;&amp;</span> effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectFn <span class="token operator">!==</span> activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>      effectsToRun<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  effectsToRun<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果一个副作用函数存在调度器，则调用该调度器，并将副作用函数作为参数传递</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectFn<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 新增</span>      effectFn<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>  <span class="token comment">// 新增</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// 否则直接执行副作用函数（之前的默认行为）</span>      <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 新增</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token comment">// 用一个全局变量存储当前激活的 effect 函数</span><span class="token keyword">let</span> activeEffect<span class="token comment">// effect 栈</span><span class="token keyword">const</span> effectStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">effectFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">cleanup</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token comment">// 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span>    activeEffect <span class="token operator">=</span> effectFn    <span class="token comment">// 在调用副作用函数之前将当前副作用函数压栈</span>    effectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并还原 activeEffect 为之前的值</span>    effectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    activeEffect <span class="token operator">=</span> effectStack<span class="token punctuation">[</span>effectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment">// 将 options 挂载到 effectFn 上</span>  effectFn<span class="token punctuation">.</span>options <span class="token operator">=</span> options  <span class="token comment">// activeEffect.deps 用来存储所有与该副作用函数相关的依赖集合</span>  effectFn<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 执行副作用函数</span>  <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> deps <span class="token operator">=</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    deps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">// 技术代码结束</span><span class="token comment">// 以下业务代码</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'111111'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token comment">// 业务代码结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vue 文档在介绍 <a href="https://cn.vuejs.org/api/general.html#nexttick">nextTick</a> 时提及：</p><blockquote><p>当你在 Vue 中更改响应式状态时，最终的 DOM 更新并不是同步生效的，而是由 Vue 将它们缓存在一个队列中，直到下一个“tick”才一起执行。这样是为了确保每个组件无论发生多少状态改变，都仅执行一次更新。</p></blockquote><p>🫷 这里不讨论 nextTick，只解释 Vue 异步更新响应式状态的思路</p><p><a href="#code7">code 7</a> 业务代码替换如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义一个任务队列</span><span class="token keyword">const</span> jobQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 使用 Promise.resolve() 创建一个 promise 实例，我们用它将一个任务添加到微任务队列</span><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 一个标志代表是否正在刷新队列</span><span class="token keyword">let</span> isFlushing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">function</span> <span class="token function">flushJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 如果队列正在刷新，则什么都不做</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isFlushing<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token comment">// 设置为 true，代表正在刷新</span>  isFlushing <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment">// 在微任务队列中刷新 jobQueue 队列</span>  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    jobQueue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">job</span> <span class="token operator">=&gt;</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 结束后重置 isFlushing</span>    isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oobj<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 每次调度时，将副作用函数添加到 jobQueue 队列中</span>    jobQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token comment">// 调用 flushJob 刷新队列</span>    <span class="token function">flushJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'111'</span>obj<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'222'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先了解一下<a href="https://april-cl.github.io/2021/10/02/tan-tan-event-loop/#toc-heading-5">宏任务和微任务</a>大致有：</p><ul><li><p>宏任务</p><ul><li>script全部代码</li><li>setTimeout</li><li>setInterval</li><li>I/O</li><li>mouseover(之类的事件)</li><li>Web API大部分异步返回方法(XHR,fetch)</li></ul></li><li><p>微任务</p><ul><li>Promise.then catch finally</li><li>MutationObserver</li><li>queueMicrotask</li></ul></li></ul><p>上面代码中 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">obj<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'111'</span>obj<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'222'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在同一个宏任务中，当执行 <code>obj.text = '111'</code> 完毕，副作用函数添加到任务队列中，promise.then 注册的回到函数是微任务，在当前宏任务完成后的下一个微任务队列中执行，接下来执行的是 <strong>宏任务中的<code>obj.text = '222'</code></strong> ，由于任务队列是 Set 对象，所以执行完毕不会重复添加副作用函数，这时候宏任务结束，开始执行微任务，此时 obj.text 是 ‘222’，所以控制台输出</p><pre class="line-numbers language-none"><code class="language-none">hello world222<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="计算属性-computed-与-lazy"><a href="#计算属性-computed-与-lazy" class="headerlink" title="计算属性 computed 与 lazy"></a>计算属性 computed 与 lazy</h1><h2 id="懒执行（lazy）的-effect"><a href="#懒执行（lazy）的-effect" class="headerlink" title="懒执行（lazy）的 effect"></a>懒执行（lazy）的 effect</h2><p>在 options 中添加 lazy 属性，使得 effect 函数不立即执行而是在需要的时候执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">effectFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">cleanup</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    activeEffect <span class="token operator">=</span> effectFn    effectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    effectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    activeEffect <span class="token operator">=</span> effectStack<span class="token punctuation">[</span>effectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  effectFn<span class="token punctuation">.</span>options <span class="token operator">=</span> options  effectFn<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 只有非 lazy 的时候，才执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 新增</span>    <span class="token comment">// 执行副作用函数</span>    <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 将副作用函数作为返回值返回</span>  <span class="token keyword">return</span> effectFn  <span class="token comment">// 新增</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现计算属性-computed"><a href="#实现计算属性-computed" class="headerlink" title="实现计算属性 computed"></a>实现计算属性 computed</h2><p><a id="code8">code 8</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下技术代码</span><span class="token comment">// 存储副作用函数的桶</span><span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 原始数据</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token comment">// 对原始数据的代理</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 拦截读取操作</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将副作用函数 activeEffect 添加到存储副作用函数的桶中</span>    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment">// 返回属性值</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 拦截设置操作</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 设置属性值</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal    <span class="token comment">// 把副作用函数从桶里取出并执行</span>    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> effects <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">const</span> effectsToRun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  effects <span class="token operator">&amp;&amp;</span> effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectFn <span class="token operator">!==</span> activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>      effectsToRun<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  effectsToRun<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectFn<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>      effectFn<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// effects &amp;&amp; effects.forEach(effectFn =&gt; effectFn())</span><span class="token punctuation">}</span><span class="token comment">// 用一个全局变量存储当前激活的 effect 函数</span><span class="token keyword">let</span> activeEffect<span class="token comment">// effect 栈</span><span class="token keyword">const</span> effectStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">effectFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">cleanup</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token comment">// 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span>    activeEffect <span class="token operator">=</span> effectFn    <span class="token comment">// 在调用副作用函数之前将当前副作用函数压栈</span>    effectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并还原 activeEffect 为之前的值</span>    effectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    activeEffect <span class="token operator">=</span> effectStack<span class="token punctuation">[</span>effectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> res  <span class="token punctuation">}</span>  <span class="token comment">// 将 options 挂在到 effectFn 上</span>  effectFn<span class="token punctuation">.</span>options <span class="token operator">=</span> options  <span class="token comment">// activeEffect.deps 用来存储所有与该副作用函数相关的依赖集合</span>  effectFn<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 执行副作用函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> effectFn<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> deps <span class="token operator">=</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    deps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">getter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> value  <span class="token keyword">let</span> dirty <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">const</span> effectFn <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">lazy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dirty <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        dirty <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>      <span class="token function">track</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> value    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> obj<span class="token punctuation">}</span><span class="token comment">// 技术代码结束</span><span class="token comment">// 以下业务代码</span><span class="token keyword">const</span> sumRes <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> obj<span class="token punctuation">.</span>foo <span class="token operator">+</span> obj<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'effect:'</span> <span class="token operator">+</span> sumRes<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>foo<span class="token operator">++</span><span class="token comment">// 业务代码结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>🗒︎ 笔记：</p><ol><li><p>effect 副作用注册函数内部 effectFn 的返回值是 effect 副作用注册函数参数 fn 的执行结果</p></li><li><p>effect 副作用注册函数的返回值是内部包装的 effectFn 副作用函数（懒执行的 effect 中已体现）</p></li><li><p>effect 副作用注册函数是懒执行的，即 lazy = true</p></li><li><p>computed 函数返回一个对象，该对象的 value 属性是一个访问器属性，返回第 2 点副作用函数的执行结果</p></li><li><p>dirty 标志用来标识是否需要重新计算值（缓存功能）</p></li><li><p>scheduler 调度器函数重置 dirty</p></li><li><p>读取计算属性的值时，手动调用 track 函数进行追踪；计算属性依赖的响应式数据发生变化时，手动调用 trigger 函数触发响应（解决 effect 嵌套）</p></li></ol><h1 id="watch-的实现原理"><a href="#watch-的实现原理" class="headerlink" title="watch 的实现原理"></a>watch 的实现原理</h1><p><a href="https://cn.vuejs.org/api/reactivity-core.html#watch">watch() API</a></p><p>侦听一个或多个响应式数据源，并在数据源变化时调用所给的回调函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 侦听单个来源</span><span class="token keyword">function</span> watch<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>  <span class="token literal-property property">source</span><span class="token operator">:</span> WatchSource<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  <span class="token literal-property property">callback</span><span class="token operator">:</span> WatchCallback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token punctuation">)</span><span class="token operator">:</span> StopHandle<span class="token comment">// 侦听多个来源</span><span class="token keyword">function</span> watch<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>  <span class="token literal-property property">sources</span><span class="token operator">:</span> WatchSource<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">callback</span><span class="token operator">:</span> WatchCallback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>  options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token punctuation">)</span><span class="token operator">:</span> StopHandle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个参数是侦听器的源。这个来源可以是以下几种：</p><ul><li>一个函数，返回一个值（getter 函数）</li><li>一个 ref</li><li>一个响应式对象</li><li>由以上类型的值组成的数组</li></ul><p>第二个参数是在发生变化时要调用的回调函数。这个回调函数接受三个参数：新值、旧值，以及一个用于注册副作用清理的回调函数。该回调函数会在副作用下一次重新执行前调用，可以用来清除无效的副作用，例如等待中的异步请求。当侦听多个来源时，回调函数接受两个数组，分别对应来源数组中的新值和旧值。</p><p>第三个可选的参数是一个对象，支持以下这些选项：</p><ul><li>immediate：在侦听器创建时立即触发回调。第一次调用时旧值是 undefined。</li><li>deep：如果源是对象，强制深度遍历，以便在深层级变更时触发回调。参考深层侦听器。</li><li>flush：调整回调函数的刷新时机。参考回调的刷新时机及 watchEffect()。</li><li>onTrack / onTrigger：调试侦听器的依赖。参考调试侦听器。</li><li>once：回调函数只会运行一次。侦听器将在回调函数首次运行后自动停止。、</li></ul><p>实现原理 <a id="code9">code 9</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下技术代码</span><span class="token comment">// 存储副作用函数的桶</span><span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 原始数据</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token comment">// 对原始数据的代理</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// 拦截读取操作</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将副作用函数 activeEffect 添加到存储副作用函数的桶中</span>    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token comment">// 返回属性值</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 拦截设置操作</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 设置属性值</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal    <span class="token comment">// 把副作用函数从桶里取出并执行</span>    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> effects <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token keyword">const</span> effectsToRun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  effects <span class="token operator">&amp;&amp;</span> effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectFn <span class="token operator">!==</span> activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>      effectsToRun<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  effectsToRun<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectFn<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>      effectFn<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// effects &amp;&amp; effects.forEach(effectFn =&gt; effectFn())</span><span class="token punctuation">}</span><span class="token comment">// 用一个全局变量存储当前激活的 effect 函数</span><span class="token keyword">let</span> activeEffect<span class="token comment">// effect 栈</span><span class="token keyword">const</span> effectStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">effectFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">cleanup</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token comment">// 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span>    activeEffect <span class="token operator">=</span> effectFn    <span class="token comment">// 在调用副作用函数之前将当前副作用函数压栈</span>    effectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并还原 activeEffect 为之前的值</span>    effectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    activeEffect <span class="token operator">=</span> effectStack<span class="token punctuation">[</span>effectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> res  <span class="token punctuation">}</span>  <span class="token comment">// 将 options 挂在到 effectFn 上</span>  effectFn<span class="token punctuation">.</span>options <span class="token operator">=</span> options  <span class="token comment">// activeEffect.deps 用来存储所有与该副作用函数相关的依赖集合</span>  effectFn<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 执行副作用函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> effectFn<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> deps <span class="token operator">=</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    deps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">getter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> value  <span class="token keyword">let</span> dirty <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">const</span> effectFn <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">lazy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dirty <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        dirty <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>      <span class="token function">track</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> value    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> obj<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> getter  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    getter <span class="token operator">=</span> source  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">traverse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 定义旧值与新值</span>  <span class="token keyword">let</span> oldValue<span class="token punctuation">,</span> newValue  <span class="token comment">// 使用 effect 注册副作用函数时，开启 lazy 选项，并把返回值存储到 effectFn 中以便后续手动调用</span>  <span class="token keyword">const</span> effectFn <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">lazy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在 scheduler 中重新执行副作用函数，得到的是新值</span>        newValue <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 将旧值和新值作为回调函数的参数</span>        <span class="token function">cb</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>        <span class="token comment">// 更新旧值，不然下一次会得到错误的旧值</span>        oldValue <span class="token operator">=</span> newValue      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span>  <span class="token comment">// 手动调用副作用函数，拿到的值就是旧值</span>  oldValue <span class="token operator">=</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 如果要读取的数据是原始值，或者已经被读取过了，那么什么都不做</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> seen<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token comment">// 将数据添加到 seen 中，代表遍历地读取过了，避免循环引用引起的死循环</span>  seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment">// 暂时不考虑数组等其他结构</span>  <span class="token comment">// 假设 value 就是一个对象，使用 for...in 读取对象的每一个值，并递归地调用 traverse 进行处理</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">in</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> seen<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token comment">// 技术代码结束</span><span class="token comment">// 以下业务代码</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>  <span class="token comment">// 2, 1</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>foo<span class="token operator">++</span><span class="token comment">// 业务代码结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>🗒︎ 笔记：</p><ol><li><p>watch() 的第一个参数可能是响应式对象也可能是一个 getter 函数（暂不考虑其它），所以需要先对 source 进行判断</p></li><li><p>在 watch 内部的 effect 中调用 traverse 函数进行递归的读取操作，代替硬编码的方式，这样就能读取一个对象上的任意属性，从而当任意属性发生变化时都能够触发回调函数执行</p></li><li><p>使用 lazy 选项创建了一个懒执行的 effect</p></li><li><p><code>oldValue = effectFn()</code> 手动调用 effectFn 函数获取旧值。当变化发生并触发 scheduler 调度函数执行时，<code>newValue = effectFn()</code> 重新调用 effectFn 函数得到新值，将它们作为参数传递给回调函数 cb。</p></li><li><p>❗不要忘记使用新值更新旧值：<code>oldValue = newValue</code>，否则在下一次变更发生时会得到错误的旧值</p></li></ol><h1 id="立即执行的-watch-与回调执行时机"><a href="#立即执行的-watch-与回调执行时机" class="headerlink" title="立即执行的 watch 与回调执行时机"></a>立即执行的 watch 与回调执行时机</h1><h1 id="过期的副作用"><a href="#过期的副作用" class="headerlink" title="过期的副作用"></a>过期的副作用</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账前端（六）</title>
      <link href="/2024/05/25/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-liu/"/>
      <url>/2024/05/25/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="创建-Button-组件"><a href="#创建-Button-组件" class="headerlink" title="创建 Button 组件"></a>创建 Button 组件</h1><p><a href="https://cn.vuejs.org/guide/components/attrs.html">透传 Attributes</a></p><blockquote><p>“透传 attribute”指的是传递给一个组件，却没有被该组件声明为 props 或 emits 的 attribute 或者 v-on 事件监听器。最常见的例子就是 class、style 和 id。</p></blockquote><p><strong>当一个组件以单个元素为根作渲染时，透传的 attribute 会自动被添加到根元素上。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/shared/Button.tsx</span><span class="token operator">...</span><span class="token comment">// 这里定义接口是因为 TS 错误提示</span><span class="token keyword">interface</span> <span class="token class-name">Props</span><span class="token punctuation">{</span>  <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> MouseEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> Button <span class="token operator">=</span> defineComponent<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>button<span class="token punctuation">}</span><span class="token operator">&gt;</span>        <span class="token punctuation">{</span>context<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>default<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// src/views/StartPage.tsx</span><span class="token operator">...</span><span class="token keyword">export</span> <span class="token keyword">const</span> StartPage <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>button_wrapper<span class="token punctuation">}</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>Button <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>button<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span>  <span class="token comment">// Button 组件并没有声明 props，点击按钮也可以执行 onClick 事件</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="创建-FloatButton-和-Icon-组件"><a href="#创建-FloatButton-和-Icon-组件" class="headerlink" title="创建 FloatButton 和 Icon 组件"></a>创建 FloatButton 和 Icon 组件</h1><p>FloatButton 组件调用 Icon 组件</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/shared/FloatButton.tsx</span><span class="token operator">...</span><span class="token keyword">export</span> <span class="token keyword">const</span> FloatButton <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>floatButton<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Icon</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>icon<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>封装 Icon 组件</p><ol><li>虽然声明了 Props，TypeScript 转译成 JavaScript 后声明信息就消失了</li></ol><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/shared/Icon.tsx</span><span class="token operator">...</span><span class="token keyword">interface</span> <span class="token class-name">Props</span><span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'add'</span> <span class="token operator">|</span> <span class="token string">'chart'</span> <span class="token operator">|</span> <span class="token string">'clock'</span> <span class="token operator">|</span> <span class="token string">'cloud'</span> <span class="token operator">|</span> <span class="token string">'mangosteen'</span> <span class="token operator">|</span> <span class="token string">'pig'</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> Icon <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineComponent</span><span class="token generic class-name"><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// undefined</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>icon<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name">xlinkHref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">'#'</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>声明运行时的 props，会提示 <code>没有与此调用匹配的重载</code>，查看 defineComponent 声明可知 <code>&lt;Props&gt;</code> 和 <code>props</code> 不能共存</li></ol><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Props</span><span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'add'</span> <span class="token operator">|</span> <span class="token string">'chart'</span> <span class="token operator">|</span> <span class="token string">'clock'</span> <span class="token operator">|</span> <span class="token string">'cloud'</span> <span class="token operator">|</span> <span class="token string">'mangosteen'</span> <span class="token operator">|</span> <span class="token string">'pig'</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> Icon <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineComponent</span><span class="token generic class-name"><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 这里会有错误提示</span>  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// undefined</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>icon<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name">xlinkHref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">'#'</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>考虑用 defineProps，结果不行，会有警告 defineProps 是一个仅 <code>&lt;script setup&gt;</code> 中可用的编译宏命令 ，而且 name 是 null 的报错</p></li><li><p>最后选择的是不用 <code>&lt;Props&gt;</code>，使用 PropType 这个工具类型来标记 props 类型</p></li></ol><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token operator">...</span><span class="token keyword">export</span> <span class="token keyword">const</span> Icon <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  props<span class="token operator">:</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token punctuation">{</span>      type<span class="token operator">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span><span class="token string">'add'</span> <span class="token operator">|</span> <span class="token string">'chart'</span> <span class="token operator">|</span> <span class="token string">'clock'</span> <span class="token operator">|</span> <span class="token string">'cloud'</span> <span class="token operator">|</span> <span class="token string">'mangosteen'</span> <span class="token operator">|</span> <span class="token string">'pig'</span><span class="token operator">&gt;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>icon<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name">xlinkHref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">'#'</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件需要透传的 attribute 不在根节点，设置 <code>inheritAttrs: false</code> 可以禁用 Attributes 继承。</p><p>sass 内置模块用法</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@use</span> <span class="token string">"sass:color"</span><span class="token punctuation">;</span><span class="token selector">.button </span><span class="token punctuation">{</span>  <span class="token property"><span class="token variable">$primary-color</span></span><span class="token punctuation">:</span> #6b717f<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$primary-color</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid color.<span class="token function">scale</span><span class="token punctuation">(</span><span class="token variable">$primary-color</span><span class="token punctuation">,</span> <span class="token property"><span class="token variable">$lightness</span></span><span class="token punctuation">:</span> 20%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> TSX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账前端（五）</title>
      <link href="/2024/05/22/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-wu/"/>
      <url>/2024/05/22/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="滑动切换路由-重构"><a href="#滑动切换路由-重构" class="headerlink" title="滑动切换路由 + 重构"></a>滑动切换路由 + 重构</h1><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><p><a href="https://cn.vuejs.org/guide/typescript/composition-api.html#typing-ref">为 ref() 标注类型</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token comment">// ref 默认值 undefined，方便统一推荐写法 </span><span class="token keyword">const</span> div <span class="token operator">=</span> ref<span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 不推荐写法</span><span class="token keyword">const</span> div <span class="token operator">=</span> ref<span class="token operator">&lt;</span>HTMLDivElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="useRoute、useRouter"><a href="#useRoute、useRouter" class="headerlink" title="useRoute、useRouter"></a>useRoute、useRouter</h2><p>useRoute：返回当前的路由地址。相当于在模板中使用 $route</p><p>useRouter：返回路由器实例。相当于在模板中使用 $router</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token operator">...</span><span class="token keyword">const</span> pushMap<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string-property property">'Welcome1'</span><span class="token operator">:</span> <span class="token string">'/welcome/2'</span><span class="token punctuation">,</span>  <span class="token string-property property">'Welcome2'</span><span class="token operator">:</span> <span class="token string">'/welcome/3'</span><span class="token punctuation">,</span>  <span class="token string-property property">'Welcome3'</span><span class="token operator">:</span> <span class="token string">'/welcome/4'</span><span class="token punctuation">,</span>  <span class="token string-property property">'Welcome4'</span><span class="token operator">:</span> <span class="token string">'/start'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> Welcome <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> replace <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">'Welcome1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pushMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token operator">...</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>wrapper<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        ...    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FunctionalComponent-和-defineComponent"><a href="#FunctionalComponent-和-defineComponent" class="headerlink" title="FunctionalComponent 和 defineComponent"></a>FunctionalComponent 和 defineComponent</h2><pre class="line-numbers language-none"><code class="language-none">[Vue warn]: onMounted is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup().<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>First 组件是函数式组件，使用到 useSwipe，而 useSwipe 中用到了 onMounted 和 unMounted，改成 defineComponent</p><p>这个不用改，因为后面把 useSwipe 移到外层 Welcome 组件用了，知道提醒信息什么意思即可</p><h2 id="自定义-Hook-钩子"><a href="#自定义-Hook-钩子" class="headerlink" title="自定义 Hook 钩子"></a>自定义 Hook 钩子</h2><p>useSwipe 添加可选 option</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>  beforeStart<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> TouchEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>  afterStart<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> TouchEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>  beforeMove<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> TouchEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>  afterMove<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> TouchEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>  beforeEnd<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> TouchEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>  afterEnd<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> TouchEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="watch-vs-watchEffect"><a href="#watch-vs-watchEffect" class="headerlink" title="watch vs. watchEffect"></a>watch vs. watchEffect</h2><p>watch 和 watchEffect 都能响应式地执行有副作用的回调。它们之间的主要区别是追踪响应式依赖的方式：</p><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。watch 会避免在发生副作用时追踪依赖，因此，我们能更加精确地控制回调函数的触发时机。</p><ol><li><p>懒执行副作用</p></li><li><p>更加明确是应该由哪个状态触发侦听器重新执行</p></li><li><p>可以访问所侦听状态的前一个值和当前值</p></li></ol><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><p>则会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其响应性依赖关系会不那么明确。</p><h2 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流 throttle"></a>节流 throttle</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        timer <span class="token operator">=</span> <span class="token keyword">undefined</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TS-内置类型"><a href="#TS-内置类型" class="headerlink" title="TS 内置类型"></a>TS 内置类型</h2><ul><li>Record&lt;K,T&gt;</li></ul><p>将 K 的每一个值都定义为 T 类型</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> TSX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack 读书笔记</title>
      <link href="/2024/05/15/webpack-du-shu-bi-ji/"/>
      <url>/2024/05/15/webpack-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>初读《Webpack实战：入门、进阶与调优（第2版）》后记录</p><h1 id="何为-Webpack"><a href="#何为-Webpack" class="headerlink" title="何为 Webpack"></a>何为 Webpack</h1><p>Webpack 是一个开源的 JaveScript 模块打包工具，其核心的功能是解决模块之间的依赖，把各个模块按照特定的规则和顺序组织在一起，最终合并为一个 JS 文件（有时会有多个）</p><h1 id="为什么需要-Webpack"><a href="#为什么需要-Webpack" class="headerlink" title="为什么需要 Webpack"></a>为什么需要 Webpack</h1><p>之前工作开发维护的旧框架用的是前端石器时代的 JQuery 框架，没有模块打包的概念，用的是最原始的 <code>&lt;script&gt;</code>、<code>&lt;link&gt;</code> 手动引入文件的方式，每次版本迭代更新需要手动清除浏览器缓存（<code>Ctrl + F5</code> 强制刷新）或者页面设置不缓存，不管哪个做法都是不合理的而且显得很 stupid。另外，该项目是混合开发项目，经常在打包成 APP 后遇到一些机器不能兼容 ES6 写法而导致程序无法正常运行，恼人的是这样的错误还不容易排查，因为一般发生在用户的 APP 载体需要真机调试。</p><p>初读完这本书如获至宝，倒不完全是因为读完之后感觉对 Webpack 的认知更深了，更多是因为有切身经历的参考，更加明白那段前端巨变历史的成因。</p><p>说回 Webpack…</p><p>前面说到 Webpack 是模块打包工具，模块打包工具（module bundler）的任务就是解决模块间的依赖，使其打包后的结果能运行在浏览器上。它的工作方式主要分为两种：</p><ul><li><p>将存在依赖关系的模块按照特定规则合并为单个JS文件，一次全部加载进页面中。</p></li><li><p>将存在依赖关系的模块按照特定规则合并为单个JS文件，一次全部加载进页面中。</p></li></ul><p>目前社区中比较流行的模块打包工具有Webpack、Vite、Parcel、Rollup等。</p><p>Webpack具备以下几点优势：</p><ul><li><p>Webpack 默认支持多种模块标准，包括 AMD、CommonJS 以及最新的 ES6 模块</p></li><li><p>Webpack 有完备的代码分片解决方案。从字面意思去理解，它可以分割打包后的资源，在首屏只加载必要的部分，将不太重要的功能放到后面动态加载。这对于资源体积较大的应用来说尤为重要，可以有效地减小资源体积，提升首页渲染速度</p></li><li><p>Webpack 可以处理各种类型的资源。除了 JavaScript 以外，Webpack 还可以处理样式、模板，甚至图片等，而开发者需要做的仅仅是导入它们，比如可以从 JavaScript 文件导入一个 CSS 或者 PNG</p></li><li><p>Webpack 社区庞大，更新速度快，轮子丰富</p></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://www.webpackjs.com/guides/getting-started/">官网</a></p><p>需先安装 Node.js</p><p>全局安装 Webpack 的好处是 npm 会帮我们绑定一个命令行环境变量，一次安装、处处运行；本地安装 Webpack 则会添加其为项目中的依赖，只能在项目内部使用。</p><ul><li><p>如果选择全局安装，那么在与他人进行项目协作的时候，由于每个人系统中的 Webpack 版本不同，可能会导致输出结果不一致。</p></li><li><p>部分依赖于 Webpack 的插件会调用项目中 Webpack 的内部模块，这种情况下仍然需要在项目本地安装 Webpack，而如果全局和本地都有，则容易造成混淆。</p></li></ul><p>基于以上两点，我们一般选择在工程内部安装 Webpack</p><p>首先创建进入一个目录并初始化 npm，然后在本地安装 webpack，接着安装 webpack-cli（webpack 是核心模块，webpack-cli 则是命令行工具）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> webpack-demo<span class="token builtin class-name">cd</span> webpack-demo<span class="token function">npm</span> init <span class="token parameter variable">-y</span><span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>ls</code> 查看 webpack-demo 可以看到</p><pre class="line-numbers language-none"><code class="language-none">node_modules/  package.json  package-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>node_modules 是用来存放包管理工具下载安装的包的文件夹</p></li><li><p>package.json 是用于工具的配置，存储所有已安装软件包的名称和版本信息</p></li><li><p>package-lock.json 会固化当前安装的每个软件包的版本，当运行 npm install时，npm 会使用这些确切的版本</p></li></ul><p><a href="https://blog.csdn.net/m0_73531461/article/details/136399322">深入理解 package.json 文件与 package-lock.json 文件</a></p><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><p>创建以下目录结构、文件和内容（示例摘抄自文档）</p><pre class="line-numbers language-none"><code class="language-none">webpack-demo  |- package.json  |- package-lock.json+ |- index.html+ |- index.js+ |- add-content.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> addContent <span class="token keyword">from</span> <span class="token string">'./add-content.js'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'My first Webpack app.&lt;br /&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>add-content.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>起步<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 留意下这里的 src --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./dist/main.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终端输入打包命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx webpack <span class="token parameter variable">--entry</span><span class="token operator">=</span>./index.js <span class="token parameter variable">--mode</span><span class="token operator">=</span>development<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到项目新生成 dist/main.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development"). * This devtool is neither made for production nor for readable output files. * It uses "eval()" calls to create a separate source file in the browser devtools. * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/) * or disable the default devtool with "devtool: false". * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/). */</span><span class="token comment">/******/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// webpackBootstrap</span><span class="token comment">/******/</span> <span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token keyword">var</span> __webpack_modules__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">/***/</span> <span class="token string">"./add-content.js"</span><span class="token operator">:</span><span class="token comment">/*!************************!*\  !*** ./add-content.js ***!  \************************/</span><span class="token comment">/***/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () =&gt; (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\r\n    document.write('Hello world!');\r\n}\n\n//# sourceURL=webpack://webpack-demo/./add-content.js?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">/***/</span> <span class="token string">"./index.js"</span><span class="token operator">:</span><span class="token comment">/*!******************!*\  !*** ./index.js ***!  \******************/</span><span class="token comment">/***/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _add_content_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add-content.js */ \"./add-content.js\");\n\r\ndocument.write('My first Webpack app.&lt;br /&gt;');\r\n(0,_add_content_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n//# sourceURL=webpack://webpack-demo/./index.js?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/************************************************************************/</span><span class="token comment">/******/</span> <span class="token comment">// The module cache</span><span class="token comment">/******/</span> <span class="token keyword">var</span> __webpack_module_cache__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">// The require function</span><span class="token comment">/******/</span> <span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token comment">// Check if module is in cache</span><span class="token comment">/******/</span> <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> __webpack_module_cache__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token comment">/******/</span> <span class="token comment">// Create a new module (and put it into the cache)</span><span class="token comment">/******/</span> <span class="token keyword">var</span> module <span class="token operator">=</span> __webpack_module_cache__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token comment">// no module.id needed</span><span class="token comment">/******/</span> <span class="token comment">// no module.loaded needed</span><span class="token comment">/******/</span> <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">// Execute the module function</span><span class="token comment">/******/</span> __webpack_modules__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">// Return the exports of the module</span><span class="token comment">/******/</span> <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token comment">/******/</span> <span class="token comment">/************************************************************************/</span><span class="token comment">/******/</span> <span class="token comment">/* webpack/runtime/define property getters */</span><span class="token comment">/******/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token comment">// define getter functions for harmony exports</span><span class="token comment">/******/</span> __webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> definition<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token keyword">if</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">get</span><span class="token operator">:</span> definition<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">/* webpack/runtime/hasOwnProperty shorthand */</span><span class="token comment">/******/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> __webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">/* webpack/runtime/make namespace object */</span><span class="token comment">/******/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token comment">// define __esModule on exports</span><span class="token comment">/******/</span> __webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">r</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Module'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token comment">/******/</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">'__esModule'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/************************************************************************/</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">// startup</span><span class="token comment">/******/</span> <span class="token comment">// Load entry module and return exports</span><span class="token comment">/******/</span> <span class="token comment">// This entry module can't be inlined because the eval devtool is used.</span><span class="token comment">/******/</span> <span class="token keyword">var</span> __webpack_exports__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">"./index.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本地打开 index.html 文件（浏览器地址是这样显示的：file:///E:/WEB/webpack-demo/index.html），会看到页面内容</p><pre class="line-numbers language-none"><code class="language-none">My first Webpack app.Hello world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>js 文件成功引入</p><p>再次执行打包命令（这里修改了 mode 的值）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx webpack <span class="token parameter variable">--entry</span><span class="token operator">=</span>./index.js <span class="token parameter variable">--mode</span><span class="token operator">=</span>production<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到 dist/main.js 文件内容变化了 ⬇</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token string">"use strict"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"My first Webpack app.&lt;br /&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看见 dist/main.js 内容精简了，再刷新 index.html 页面，网页并没有变化。</p><p>上面在终端输入命令的行为就叫做打包。那么，是否每次打包都要如此繁琐的输入参数指令呢？</p><h1 id="使用-npm-scripts"><a href="#使用-npm-scripts" class="headerlink" title="使用 npm scripts"></a>使用 npm scripts</h1><p>注意到 <code>package.json</code>，默认内容类似下面</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"webpack-demo"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.91.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^5.1.4"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>scripts 是 npm 供的脚本命令功能，在这里我们可以直接使用由模块添加的指令（比如用webpack取代之前的 npx webpack ）</p><p>编辑 package.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">……  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack --entry=./index.js --mode=development"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在终端输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可见打包结果与前面一致</p><h1 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h1><p>前面用到了 <code>--entry</code> 和 <code>--mode</code> 参数，除此之外，Webpack 拥有非常多的配置项以及相对应的命令行参数，可以通过 <code>npx webpack -h</code> 查看。</p><p>当项目需要越来越多的配置时，就要往命令中添加更多的参数，那么到后期维护起来就会相当困难。为了解决这个问题，可以把这些参数改为对象的形式专门放在一个配置文件里，在 Webpack 每次打包的时候读取该配置文件即可。</p><p>Webpack 的默认配置文件为 webpack.config.js（也可以使用其他文件名，需要使用命令行参数指定）。</p><p>在工程目录下创建 webpack.config.js，并添加如下代码：</p><pre class="line-numbers language-none"><code class="language-none">webpack-demo  |- package.json  |- package-lock.json  |- index.html  |- index.js  |- add-content.js+ |- webpack.config.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>webpack.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./index.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们可以去掉 package.json 中配置的打包参数了：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">……  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了验证最终效果，我们再对 add-content.js 的内容稍加修改：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'I\'m using a config file!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行 <code>npm run build</code> 命令，Webpack 就会预先读取 webpack.config.js，然后打包。完成之后我们刷新 index.html 进行验证</p><pre class="line-numbers language-none"><code class="language-none">My first Webpack app.I'm using a config file!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可见打包生效</p><h1 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h1><p>归纳前面的操作</p><p>编写代码 =&gt; 执行 build 命令 -&gt; 刷新页面</p><p>这样的效率并不高，还好 Webpack 社区已经为我们提供了一个便捷的本地开发工具 —— <code>webpack-dev-server</code></p><h2 id="安装-webpack-dev-server"><a href="#安装-webpack-dev-server" class="headerlink" title="安装 webpack-dev-server"></a>安装 webpack-dev-server</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> webpack-dev-server <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>安装指令中的-D参数是将webpack-dev-server作为工程的devDependencies（开发环境依赖）记录在package.json中。这样做是因为webpack-dev-server仅仅在本地开发时才会用到，在生产环境中并不需要它，所以放在devDependencies中是比较恰当的。</p></blockquote><h2 id="启动-webpack-dev-server"><a href="#启动-webpack-dev-server" class="headerlink" title="启动 webpack-dev-server"></a>启动 webpack-dev-server</h2><p>在package.json中添加一个dev指令：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">……  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置-webpack-dev-server"><a href="#配置-webpack-dev-server" class="headerlink" title="配置 webpack-dev-server"></a>配置 webpack-dev-server</h2><p>编辑webpack.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./index.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'index.html'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">directory</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">9000</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>devServer 对象是专门用来放 webpack-dev-server 配置的。webpack-dev-server 可以看作一个服务者，它的主要工作就是接收浏览器的请求，然后将资源返回。当服务启动时，它会先让 Webpack 进行模块打包并将资源准备好（在示例中就是 dist/main.js）。当 webpack-dev-server 接收到浏览器的资源请求时，它会首先进行 URL 地址校验。如果该地址是资源服务地址（上面配置的 publicPath），webpack-dev-server 就会从 Webpack 的打包结果中寻找该资源并返回给浏览器。反之，如果请求地址不属于资源服务地址，则直接读取硬盘中的源文件并将其返回。</p><p>这里要动手实践一下，因为版本不同有些地方用法也改了，以上示例与原文示例是有偏差的，应当参照官网写法。另外这里用了 <code>HtmlWebpackPlugin</code> 插件还修改了一些代码以在浏览器能实时预览。</p><p>终端执行 <code>npm run dev</code>，可以发现开启 9000 端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">……<span class="token operator">&lt;</span>i<span class="token operator">&gt;</span> <span class="token punctuation">[</span>webpack-dev-server<span class="token punctuation">]</span> Loopback: http://localhost:9000/……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>浏览器打开 <code>http://localhost:9000/</code>，再修改代码保存可以看到浏览器会自动更新。</p><h1 id="模块打包"><a href="#模块打包" class="headerlink" title="模块打包"></a>模块打包</h1><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 写法1</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'calculater'</span><span class="token punctuation">,</span>    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 写法2</span>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'calculater'</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li>❌不要混用两种写法</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'calculater'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 最后导出的只有name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>❌不要直接给 exports 赋值</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'calculater'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 由于对exports进行了赋值操作，使其指向了新的对象，而module.exports却仍然指向原来的空对象，因此name属性并不会被导出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>在 CommonJS 中使用 require 语法进行模块导入</p><p>当我们使用 require 导入一个模块时会有两种情况：</p><ul><li><p>该模块未曾被加载过。这时会首先执行该模块，然后获取到该模块最终导出的内容。</p></li><li><p>该模块已经被加载过。这时该模块的代码不会再次执行，而是直接获取该模块上一次导出的内容。</p></li></ul><h2 id="ES6-Module"><a href="#ES6-Module" class="headerlink" title="ES6 Module"></a>ES6 Module</h2><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><h4 id="命名导出"><a href="#命名导出" class="headerlink" title="命名导出"></a>命名导出</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 写法1</span><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'calculator'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 写法2</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'calculator'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> add <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：使用命名导出时，可以通过 <code>as</code> 关键字对变量重命名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'calculator'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> add <span class="token keyword">as</span> getSum <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 在导入时即为 name 和 getSum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h4><p>模块的默认导出只能有一个</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'calculator'</span><span class="token punctuation">,</span>    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 下面如果在同一个文件导出会报错</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">otherInfo</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 具名导出的导入</span><span class="token keyword">import</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> add <span class="token keyword">as</span> calculateSum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./calculator.js'</span><span class="token punctuation">;</span><span class="token comment">// 默认导出的导入</span><span class="token keyword">import</span> myCalculator <span class="token keyword">from</span> <span class="token string">'./calculator.js'</span><span class="token punctuation">;</span><span class="token comment">// 两种导入方式混合</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>   <span class="token comment">// 这里的React必须写在大括号前面，不能颠倒顺序，否则会提示语法错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复合写法"><a href="#复合写法" class="headerlink" title="复合写法"></a>复合写法</h3><p>导入之后立即导出，只支持具名导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./calculator.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CommonJS-与-ES6-Module-的区别"><a href="#CommonJS-与-ES6-Module-的区别" class="headerlink" title="CommonJS 与 ES6 Module 的区别"></a>CommonJS 与 ES6 Module 的区别</h2><table><thead><tr><th align="center">模块</th><th align="center">模块依赖</th><th align="center">值获取</th><th align="center">循环依赖</th></tr></thead><tbody><tr><td align="center">CommonJS</td><td align="center">动态，建立在运行阶段</td><td align="center">“静态”，值复制</td><td align="center">空对象</td></tr><tr><td align="center">ES6 Module</td><td align="center">静态，建立在编译阶段</td><td align="center">动态（映射）</td><td align="center">undefined</td></tr></tbody></table><h2 id="其他类型模块"><a href="#其他类型模块" class="headerlink" title="其他类型模块"></a>其他类型模块</h2><ul><li><p>非模块化文件</p><p>像 script 标签引入的其他文件，直接引入即可，如</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./jquery.min.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>AMD</li></ul><p>AMD（Asynchronous Module Definition，异步模块定义）是由 JavaScript 社区提出的专注于支持浏览器端模块化的标准</p><p>在 AMD 中使用 define 函数来定义模块，它可以接收3个参数。第1个参数是当前模块的id，相当于模块名；第2个参数是当前模块的依赖；第3个参数用来描述模块的导出值，可以是函数或对象。如果是函数则导出的是函数的返回值；如果是对象则直接导出对象本身</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'getSum'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'calculator'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">math</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum: '</span> <span class="token operator">+</span> calculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AMD 使用 require 函数来加载模块，第1个参数指定了加载的模块，第2个参数是当加载完成后执行的回调函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'getSum'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">getSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>UMD</li></ul><p>严格来说，UMD 并不是一种模块标准，而是一组模块形式的集合。UMD 的全称是 Universal Module Definition，也就是通用模块标准，它的目标是使一个模块能运行在各种环境下，不论是 CommonJS、AMD，还是非模块化的环境（当时 ES6 Module 还未被提出）</p><ul><li>npm 模块</li></ul><p>包管理工具：npm、yarn、pnpm</p><p>在使用时，加载一个npm模块的方式很简单，只需要引入包的名字即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.js</span><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>除了直接加载模块以外，我们也可以通过 <code>&lt;package_name&gt;/&lt;path&gt;</code> 的形式单独加载模块内部的某个JS文件。如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> all <span class="token keyword">from</span> <span class="token string">'lodash/fp/all.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，Webpack最终只会打包 node_modules/lodash/fp/all.js 这个文件，而不会打包全部的 lodash 库，进而减小打包资源的体积。</p><h1 id="打包原理"><a href="#打包原理" class="headerlink" title="打包原理"></a>打包原理</h1><p>下面代码摘自上文</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development"). * This devtool is neither made for production nor for readable output files. * It uses "eval()" calls to create a separate source file in the browser devtools. * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/) * or disable the default devtool with "devtool: false". * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/). */</span><span class="token comment">/******/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// webpackBootstrap</span><span class="token comment">/******/</span> <span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token keyword">var</span> __webpack_modules__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">/***/</span> <span class="token string">"./add-content.js"</span><span class="token operator">:</span><span class="token comment">/*!************************!*\  !*** ./add-content.js ***!  \************************/</span><span class="token comment">/***/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () =&gt; (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\r\n    document.write('Hello world!');\r\n}\n\n//# sourceURL=webpack://webpack-demo/./add-content.js?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">/***/</span> <span class="token string">"./index.js"</span><span class="token operator">:</span><span class="token comment">/*!******************!*\  !*** ./index.js ***!  \******************/</span><span class="token comment">/***/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _add_content_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add-content.js */ \"./add-content.js\");\n\r\ndocument.write('My first Webpack app.&lt;br /&gt;');\r\n(0,_add_content_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n//# sourceURL=webpack://webpack-demo/./index.js?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/************************************************************************/</span><span class="token comment">/******/</span> <span class="token comment">// The module cache</span><span class="token comment">/******/</span> <span class="token keyword">var</span> __webpack_module_cache__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">// The require function</span><span class="token comment">/******/</span> <span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token comment">// Check if module is in cache</span><span class="token comment">/******/</span> <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> __webpack_module_cache__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token comment">/******/</span> <span class="token comment">// Create a new module (and put it into the cache)</span><span class="token comment">/******/</span> <span class="token keyword">var</span> module <span class="token operator">=</span> __webpack_module_cache__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token comment">// no module.id needed</span><span class="token comment">/******/</span> <span class="token comment">// no module.loaded needed</span><span class="token comment">/******/</span> <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">// Execute the module function</span><span class="token comment">/******/</span> __webpack_modules__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">// Return the exports of the module</span><span class="token comment">/******/</span> <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token comment">/******/</span> <span class="token comment">/************************************************************************/</span><span class="token comment">/******/</span> <span class="token comment">/* webpack/runtime/define property getters */</span><span class="token comment">/******/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token comment">// define getter functions for harmony exports</span><span class="token comment">/******/</span> __webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> definition<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token keyword">if</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">get</span><span class="token operator">:</span> definition<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">/* webpack/runtime/hasOwnProperty shorthand */</span><span class="token comment">/******/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> __webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">/* webpack/runtime/make namespace object */</span><span class="token comment">/******/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token comment">// define __esModule on exports</span><span class="token comment">/******/</span> __webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">r</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/******/</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Module'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token comment">/******/</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">'__esModule'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/************************************************************************/</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token comment">// startup</span><span class="token comment">/******/</span> <span class="token comment">// Load entry module and return exports</span><span class="token comment">/******/</span> <span class="token comment">// This entry module can't be inlined because the eval devtool is used.</span><span class="token comment">/******/</span> <span class="token keyword">var</span> __webpack_exports__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">"./index.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/******/</span> <span class="token comment">/******/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 bundle（先理解为打包结果，后面再解释）分为以下几个部分：</p><ul><li><p>最外层匿名函数。它用来包裹整个 bundle，并构成自身的作用域</p></li><li><p><code>__webpack_modules__</code> 对象。工程中所有产生了依赖关系的模块都会以 key（文件路径）-value（文件内容） 的形式放在这里，它包含了打包后的所有模块</p></li><li><p><code>__webpack_module_cache__</code> 对象。每个模块只在第一次被加载的时候执行，之后其导出值就被存储在这个对象里面，当再次被加载的时候 Webpack 会直接从这里取值，而不会重新执行该模块</p></li><li><p><code>__webpack_require__</code> 函数。对模块加载的实现，接收一个参数 moduleId（文件路径）</p></li></ul><p>bundle 在浏览器中的执行过程：</p><ol><li><p>在最外层匿名函数中初始化浏览器执行环境，包括定义 <code>__webpack_module_cache__</code> 对象、<code>__webpack_require__</code> 函数等，为模块的加载和执行做一些准备工作</p></li><li><p>加载入口模块。每个 bundle 都有且只有一个入口模块，在上面示例中，index.js 是入口模块，在浏览器中会从他开始执行</p></li><li><p>执行模块代码。在 <code>__webpack_require__</code> 中判断即将加载的模块是否存在于 <code>__webpack_module_cache__</code> 中。如果存在则返回缓存模块的 exports 对象，否则进行下一步</p></li><li><p>新建一个模块 module 放入缓存对象 <code>__webpack_module_cache__</code>，执行文件路径对应的模块函数，执行完模块后返回该模块 exports 对象（这里其实是一个递归过程，以上面为例，假设现在执行权在 index.js，index.js ‘require’ add-content.js 即把执行权交由 add-content.js，这时对于 add-content.js 又重新执行第3步，由于第一次引用并不存在于缓存模块，因此接着执行第4步，add-content.js 没有 require 文件，所以返回该模块 exports 对象交出执行权）</p></li><li><p>所有依赖的模块都执行完毕，说明递归调用完成，整个 bundle 运行结束</p></li></ol><p>Webpack为每个模块创造了一个可以导出和导入模块的环境，但本质上并没有修改代码的执行逻辑，因此代码执行的顺序与模块加载的顺序是完全一致的，这也是Webpack模块打包的奥秘</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 书籍 </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账前端（四）</title>
      <link href="/2024/05/14/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-si/"/>
      <url>/2024/05/14/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-si/</url>
      
        <content type="html"><![CDATA[<h1 id="多重-RouterView-与-Transition"><a href="#多重-RouterView-与-Transition" class="headerlink" title="多重 RouterView 与 Transition"></a>多重 RouterView 与 Transition</h1><p>WelcomeLayout 组件功能迁移到 Welcome 组件，重构 Welcome 组件</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/views/Welcome.tsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> h<span class="token punctuation">,</span> Transition<span class="token punctuation">,</span> VNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RouteLocationNormalizedLoaded<span class="token punctuation">,</span> RouterView <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> s <span class="token keyword">from</span> <span class="token string">'./Welcome.module.scss'</span><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'../assets/icons/mangosteen.svg'</span><span class="token keyword">export</span> <span class="token keyword">const</span> Welcome <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>wrapper<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">山竹记账</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>main<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterView</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token operator">:</span> <span class="token constant">X</span><span class="token punctuation">,</span> route<span class="token operator">:</span> <span class="token constant">R</span> <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> Component<span class="token operator">:</span> VNode<span class="token punctuation">,</span> route<span class="token operator">:</span> RouteLocationNormalizedLoaded <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Transition</span></span> <span class="token attr-name">enterFromClass</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>slide_fade_enter_from<span class="token punctuation">}</span></span> <span class="token attr-name">enterActiveClass</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>slide_fade_enter_active<span class="token punctuation">}</span></span>              <span class="token attr-name">leaveToClass</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>slide_fade_leave_to<span class="token punctuation">}</span></span> <span class="token attr-name">leaveActiveClass</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>slide_fade_leave_active<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">              </span><span class="token punctuation">{</span><span class="token constant">X</span><span class="token punctuation">}</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Transition</span></span><span class="token punctuation">&gt;</span></span>          <span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RouterView</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterView</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多重-RouterView"><a href="#多重-RouterView" class="headerlink" title="多重 RouterView"></a>多重 RouterView</h2><p><a href="https://v3.router.vuejs.org/zh/guide/essentials/named-views.html#%E5%B5%8C%E5%A5%97%E5%91%BD%E5%90%8D%E8%A7%86%E5%9B%BE">命名视图</a></p><p>用法：</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/config/routes.tsx</span><span class="token keyword">export</span> <span class="token keyword">const</span> routes<span class="token operator">:</span> RouteRecordRaw<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">'/welcome'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/welcome'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Welcome<span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">'/welcome/1'</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> components<span class="token operator">:</span> <span class="token punctuation">{</span> main<span class="token operator">:</span> First<span class="token punctuation">,</span> footer<span class="token operator">:</span> FirstActions <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 使用 components 配置</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment">// src/views/Welcome.tsx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>main<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterView</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">  // 如果没有指定 name，则为默认 default</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterView</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="自定义过渡-class​"><a href="#自定义过渡-class​" class="headerlink" title="自定义过渡 class​"></a>自定义过渡 class​</h3><p>向 <code>&lt;Transition&gt;</code> 传递以下的 props 来指定自定义的过渡 class：    </p><ul><li>enter-active-class</li><li>enter-active-class</li><li>enter-to-class</li><li>leave-from-class</li><li>leave-active-class</li><li>leave-to-class</li></ul><p>传入的这些 class 会覆盖相应阶段的默认 class 名</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Transition</span></span> <span class="token attr-name">enterFromClass</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>slide_fade_enter_from<span class="token punctuation">}</span></span> <span class="token attr-name">enterActiveClass</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>slide_fade_enter_active<span class="token punctuation">}</span></span> <span class="token attr-name">leaveToClass</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>slide_fade_leave_to<span class="token punctuation">}</span></span> <span class="token attr-name">leaveActiveClass</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>slide_fade_leave_active<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token constant">X</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Transition</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="是怎么知道-RouterView-插槽的参数的"><a href="#是怎么知道-RouterView-插槽的参数的" class="headerlink" title="是怎么知道 RouterView 插槽的参数的"></a>是怎么知道 RouterView 插槽的参数的</h3><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token operator">:</span> <span class="token constant">X</span><span class="token punctuation">,</span> route<span class="token operator">:</span> <span class="token constant">R</span> <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> Component<span class="token operator">:</span> VNode<span class="token punctuation">,</span> route<span class="token operator">:</span> RouteLocationNormalizedLoaded <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Transition</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token punctuation">{</span><span class="token constant">X</span><span class="token punctuation">}</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Transition</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据 IDE 提示（TS 的好处）查看 RouterView 定义</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">const</span> RouterView<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    $props<span class="token operator">:</span> AllowedComponentProps <span class="token operator">&amp;</span> ComponentCustomProps <span class="token operator">&amp;</span> VNodeProps <span class="token operator">&amp;</span> RouterViewProps<span class="token punctuation">;</span>    $slots<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token punctuation">{</span>            Component<span class="token operator">:</span> VNode<span class="token punctuation">;</span>            route<span class="token operator">:</span> RouteLocationNormalizedLoaded<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> VNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>学习方法重于学习结果</strong></p></blockquote><h1 id="自制-Vite-SVG-Sprites-插件"><a href="#自制-Vite-SVG-Sprites-插件" class="headerlink" title="自制 Vite SVG Sprites 插件"></a>自制 Vite SVG Sprites 插件</h1><p><a href="https://cn.vitejs.dev/guide/api-plugin">插件 API</a></p><p>新建 src/vite_plugins/svgstore.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* eslint-disable */</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">'fs'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'svgstore'</span> <span class="token comment">// 用于制作 SVG Sprites</span><span class="token keyword">import</span> <span class="token punctuation">{</span> optimize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'svgo'</span> <span class="token comment">// 用于优化 SVG 文件</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">svgstore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 文件路径</span>    <span class="token keyword">const</span> inputFolder <span class="token operator">=</span> options<span class="token punctuation">.</span>inputFolder <span class="token operator">||</span> <span class="token string">'src/assets/icons'</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'svgstore'</span><span class="token punctuation">,</span>        <span class="token function">resolveId</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 传入模块请求时被调用，如果请求的是 @svgstore，则返回 svg_bundle.js，svg_bundle.js 是一个虚拟文件，实际并不存在，直接请求不存在的路径 IDE 会报错</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> <span class="token string">'@svgstore'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">'svg_bundle.js'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 加载函数，返回自定义内容</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> <span class="token string">'svg_bundle.js'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> sprites <span class="token operator">=</span> <span class="token function">store</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>                <span class="token keyword">const</span> iconsDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>inputFolder<span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>iconsDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">const</span> filepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>iconsDir<span class="token punctuation">,</span> file<span class="token punctuation">)</span>                    <span class="token keyword">const</span> svgid <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span>name                    <span class="token keyword">let</span> code <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">'utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>                    sprites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>svgid<span class="token punctuation">,</span> code<span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">optimize</span><span class="token punctuation">(</span>sprites<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">inline</span><span class="token operator">:</span> options<span class="token punctuation">.</span>inline <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">'cleanupAttrs'</span><span class="token punctuation">,</span> <span class="token string">'removeDoctype'</span><span class="token punctuation">,</span> <span class="token string">'removeComments'</span><span class="token punctuation">,</span> <span class="token string">'removeTitle'</span><span class="token punctuation">,</span> <span class="token string">'removeDesc'</span><span class="token punctuation">,</span> <span class="token string">'removeEmptyAttrs'</span><span class="token punctuation">,</span>                        <span class="token punctuation">{</span>                            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'removeAttrs'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>                                <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token string">'(data-name|data-xxx)'</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const div = document.createElement('div')                document.createElement('div')                div.innerHTML = \`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\`                const svg = div.getElementsByTagName('svg')[0]                if (svg) {                    svg.style.position = 'absolute'                    svg.style.width = 0                    svg.style.height = 0                    svg.style.overflow = 'hidden'                    svg.setAttribute("aria-hidden", "true")                }                // listen dom ready event                document.addEventListener('DOMContentLoaded', () =&gt; {                    if (document.body.firstChild) {                        document.body.insertBefore(div, document.body.firstChild)                    } else {                        document.body.appendChild(div)                    }                })                </span><span class="token template-punctuation string">`</span></span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tsconfig.node.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token string">"vite.config.ts"</span><span class="token punctuation">,</span>+ <span class="token string">"src/vite_plugins/**/*"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>vite.config.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// @ts-nocheck</span><span class="token operator">+</span> <span class="token keyword">import</span> <span class="token punctuation">{</span> svgstore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./src/vite_plugins/svgstore'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">vueJsx</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      transformOn<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      mergeProps<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">+</span>   <span class="token function">svgstore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="封装-useSwipe-Hook"><a href="#封装-useSwipe-Hook" class="headerlink" title="封装 useSwipe Hook"></a>封装 useSwipe Hook</h1><p><a href="https://cn.vuejs.org/guide/reusability/composables.html">组合式函数</a></p><p>这里就不写项目代码示例了，文档很容易看懂的 ~</p><h2 id="约定和最佳实践​"><a href="#约定和最佳实践​" class="headerlink" title="约定和最佳实践​"></a>约定和最佳实践​</h2><h3 id="命名​"><a href="#命名​" class="headerlink" title="命名​"></a>命名​</h3><p>组合式函数约定用驼峰命名法命名，并以“use”作为开头。</p><h3 id="输入参数​"><a href="#输入参数​" class="headerlink" title="输入参数​"></a>输入参数​</h3><p>即便不依赖于 ref 或 getter 的响应性，组合式函数也可以接收它们作为参数。如果你正在编写一个可能被其他开发者使用的组合式函数，最好处理一下输入参数是 ref 或 getter 而非原始值的情况。可以利用 toValue() 工具函数来实现</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>推荐的约定是组合式函数始终返回一个包含多个 ref 的普通的非响应式对象，这样该对象在组件中被解构为 ref 之后仍可以保持响应性</p><h3 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h3><ul><li><p>确保在组件挂载后才调用的生命周期钩子中执行 DOM 相关的副作用，例如：onMounted()</p></li><li><p>确保在 onUnmounted() 时清理副作用</p></li></ul><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><p>组合式函数只能在 <code>&lt;script setup&gt;</code> 或 setup() 钩子中被调用。在这些上下文中，它们也只能被同步调用。在某些情况下，你也可以在像 onMounted() 这样的生命周期钩子中调用它们</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> TSX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账前端（三）</title>
      <link href="/2024/05/14/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-san/"/>
      <url>/2024/05/14/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-san/</url>
      
        <content type="html"><![CDATA[<h1 id="封装-WelcomeLayout-组件"><a href="#封装-WelcomeLayout-组件" class="headerlink" title="封装 WelcomeLayout 组件"></a>封装 WelcomeLayout 组件</h1><p>目的：消除重复</p><p>四个页面只有图片、文字不同，布局结构是一致的</p><p>重构前</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/components/welcome/First.tsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> s <span class="token keyword">from</span> <span class="token string">'./First.module.scss'</span><span class="token punctuation">;</span><span class="token keyword">import</span> pig <span class="token keyword">from</span> <span class="token string">'../../assets/icons/pig.svg'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RouterLink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> First <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>wrapper<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>card<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>pig<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">会挣钱</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">还要会省钱</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>actions<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterLink</span></span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>fake<span class="token punctuation">}</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/start<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">跳过</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RouterLink</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterLink</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/welcome/2<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">下一页</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RouterLink</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterLink</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/start<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">跳过</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RouterLink</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重构后</p><p>将布局封装为一个组件，内容通过插槽来传入</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/components/welcome/WelcomeLayout.tsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> s <span class="token keyword">from</span> <span class="token string">'./First.module.scss'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> WelcomeLayout <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>slots<span class="token punctuation">}</span> <span class="token operator">=</span> context    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>wrapper<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>card<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token punctuation">{</span>slots<span class="token punctuation">.</span>icon<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">           </span><span class="token punctuation">{</span>slots<span class="token punctuation">.</span>title<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>actions<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token punctuation">{</span>slots<span class="token punctuation">.</span>buttons<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">/* 还可以写成函数组件形式import { FunctionalComponent } from 'vue';import s from './WelcomeLayout.module.scss';export const WelcomeLayout: FunctionalComponent = (props, context) =&gt; {  const { slots: { icon, title, buttons } } = context  return (    &lt;div class={s.wrapper}&gt;      &lt;div class={s.card}&gt;        {icon?.()}        {title?.()}      &lt;/div&gt;      &lt;div class={s.actions}&gt;        {buttons?.()}      &lt;/div&gt;    &lt;/div&gt;  )}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/components/welcome/First.tsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> s <span class="token keyword">from</span> <span class="token string">'./First.module.scss'</span><span class="token punctuation">;</span><span class="token keyword">import</span> pig <span class="token keyword">from</span> <span class="token string">'../../assets/icons/pig.svg'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> WelcomeLayout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./WelcomeLayout'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RouterLink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> First <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> slots <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token function-variable function">icon</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>pig<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>      <span class="token function-variable function">title</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">会挣钱</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">还会省钱</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>      <span class="token function-variable function">buttons</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterLink</span></span> <span class="token attr-name">class</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>fake<span class="token punctuation">}</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/start<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">跳过</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RouterLink</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterLink</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/welcome/2<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">下一页</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RouterLink</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterLink</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/start<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">跳过</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RouterLink</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WelcomeLayout</span></span> <span class="token attr-name">v-slots</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>slots<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">WelcomeLayout</span></span><span class="token punctuation">&gt;</span></span>      <span class="token comment">/* 也可以不用 v-slot 这样写      &lt;WelcomeLayout&gt;      {{        icon: () =&gt; &lt;img src={pig} /&gt;,        title: () =&gt; &lt;h2&gt;会挣钱&lt;br /&gt;还会省钱&lt;/h2&gt;,        buttons: () =&gt; &lt;&gt;            &lt;RouterLink class={s.fake} to="/start" &gt;跳过&lt;/RouterLink&gt;            &lt;RouterLink to="/welcome/2" &gt;下一页&lt;/RouterLink&gt;            &lt;RouterLink to="/start" &gt;跳过&lt;/RouterLink&gt;        &lt;/&gt;      }}      &lt;/WelcomeLayout&gt;      */</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">/* 还可以写成函数组件形式  export const First: FunctionalComponent = () =&gt; {    return &lt;WelcomeLayout&gt;{{        icon: () =&gt; &lt;img src={pig} /&gt;,        title: () =&gt; &lt;h2&gt;会挣钱&lt;br /&gt;还会省钱&lt;/h2&gt;,        buttons: () =&gt; &lt;&gt;        &lt;RouterLink class={s.fake} to="/start" &gt;跳过&lt;/RouterLink&gt;        &lt;RouterLink to="/welcome/2" &gt;下一页&lt;/RouterLink&gt;        &lt;RouterLink to="/start" &gt;跳过&lt;/RouterLink&gt;        &lt;/&gt;    }}&lt;/WelcomeLayout&gt;    }    First.displayName = 'First'  */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> TSX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账前端（二）</title>
      <link href="/2024/05/14/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-er/"/>
      <url>/2024/05/14/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-er/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-CSS-Modules"><a href="#使用-CSS-Modules" class="headerlink" title="使用 CSS Modules"></a>使用 CSS Modules</h1><p>任何以 .module.css 为后缀名的 CSS 文件都被认为是一个 CSS modules 文件。导入这样的文件会返回一个相应的模块对象：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* example.module.css */</span><span class="token selector">.red</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> classes <span class="token keyword">from</span> <span class="token string">'./example.module.css'</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>className <span class="token operator">=</span> classes<span class="token punctuation">.</span>red<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>本项目用的是 scss ，需要安装预处理器依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> i <span class="token parameter variable">-D</span> sass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="完成第一个页面"><a href="#完成第一个页面" class="headerlink" title="完成第一个页面"></a>完成第一个页面</h1><ul><li><p>拷贝 windows 系统文件：<code>mv /workspaces/oh-my-env/temp/*.svg src/assets/icons</code></p></li><li><p>css 自定义全局变量</p></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">{</span>  <span class="token property">--main-color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.wrapper</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-color<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> TSX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账前端（一）</title>
      <link href="/2024/05/13/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-yi/"/>
      <url>/2024/05/13/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-qian-duan-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-oh-my-env-开发环境"><a href="#使用-oh-my-env-开发环境" class="headerlink" title="使用 oh-my-env 开发环境"></a>使用 oh-my-env 开发环境</h1><p>锁死 npm 版本号 <code>npm config set save-prefix=''</code></p><h1 id="dev、build-和-preview"><a href="#dev、build-和-preview" class="headerlink" title="dev、build 和 preview"></a>dev、build 和 preview</h1><p>创建项目 <code>pnpm create vite@2.9.0 projectName -- --template vue-ts</code>，<code>-- </code> 表示后面是 <code>vite</code> 构建工具的参数，<code>vue-ts</code> 使用 vue 和 ts</p><p>使用 <code>pnpm run build</code> 时报错：<code>Cannot access ambient const enums when the '--isolatedModules' flag is provided.</code></p><p>解决：tsconfig.json -&gt; compilerOptions -&gt; 设置 “skipLibCheck”: true</p><h1 id="修改-build-path-部署到-GitHub"><a href="#修改-build-path-部署到-GitHub" class="headerlink" title="修改 build path 部署到 GitHub"></a>修改 build path 部署到 GitHub</h1><p>在 vite.config.js 中设置正确的 base。</p><ul><li><p>base 设置为 <code>'/'</code>：部署到 <code>https://&lt;USERNAME&gt;.github.io/</code>，或者通过 GitHub Pages 部署到一个自定义域名（例如 <a href="http://www.example.com)/">www.example.com）</a></p></li><li><p>base 设置为 <code>'/&lt;REPO&gt;/'</code>：部署到 <code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;/</code></p></li></ul><p>删除远程仓库 dist 文件，保留本地文件：<code>git rm -r --cached dist</code></p><h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><p>env.d.ts 是 typescript 的声明文件，主要用来给编辑器做代码提示用（<a href="https://zhuanlan.zhihu.com/p/133344957">typescript 声明文件加载机制以及在不同场景下的正确使用方式</a>）</p><h1 id="Template-VS-TSX"><a href="#Template-VS-TSX" class="headerlink" title="Template VS TSX"></a>Template VS TSX</h1><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><p><code>&lt;script setup&gt;</code> 是在单文件组件 (SFC) 中使用组合式 API 的编译时语法糖。</p><pre class="line-numbers language-Vue" data-language="Vue"><code class="language-Vue">&lt;script setup&gt;import { ref } from 'vue'// 顶层的绑定会被暴露给模板const count = ref(0)console.log(count.value)&lt;/script&gt;&lt;template&gt;&lt;!-- ref 在模板中使用的时候会自动解包 --&gt;  &lt;button @click="count++"&gt;{{ count }}&lt;/button&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TSX"><a href="#TSX" class="headerlink" title="TSX"></a>TSX</h2><ol><li>安装插件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> <span class="token function">install</span> @vitejs/plugin-vue-jsx <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改配置</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// vite.config.js</span><span class="token keyword">import</span> vueJsx <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue-jsx'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">vueJsx</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment">// options are passed on to @vue/babel-plugin-jsx</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    // 注意这里需要.value    &lt;button @click="count++"&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> count<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="引入-Vue-Router-4"><a href="#引入-Vue-Router-4" class="headerlink" title="引入 Vue Router 4"></a>引入 Vue Router 4</h1><p>get some tips :</p><ol><li><p>给包管理工具起别名</p><p> 终端输入 <code>code ~/.bashrc</code> 打开 <code>.bashrc</code> 文件，添加 <code>alias npm='pnpm'</code>，终端输入 <code>source ~/.bashrc</code></p></li><li><p>git 修改最近提交</p><p> <code>git commit --amend</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> TSX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决：Error: error:0308010C:digital envelope routines::unsupported</title>
      <link href="/2024/05/11/jie-jue-error-error-0308010c-digital-envelope-routines-unsupported/"/>
      <url>/2024/05/11/jie-jue-error-error-0308010c-digital-envelope-routines-unsupported/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><code>yarn start</code> 启动一个以前的 React 项目，报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: error:0308010C:digital envelope routines::unsupported<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>Webpack 在构建过程中使用了 MD4 算法，而最新版本的 Node.js 默认不再支持该算法</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li>升级 Webpack ，新版本实现了自己的 MD4 算法，而不依赖于 Node 的实现</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> webpack@latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>添加 <code>--openssl-legacy-provider</code> 标志</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// package.json</span><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-scripts start --openssl-legacy-provider"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用 Node v16</li></ol>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 撤销修改</title>
      <link href="/2024/05/09/git-che-xiao-xiu-gai/"/>
      <url>/2024/05/09/git-che-xiao-xiu-gai/</url>
      
        <content type="html"><![CDATA[<h1 id="未使用-git-add-缓存代码"><a href="#未使用-git-add-缓存代码" class="headerlink" title="未使用 git add 缓存代码"></a>未使用 <code>git add</code> 缓存代码</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 撤销指定文件，--很重要，没有--，就变成了“切换到另一个分支”的命令</span><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span><span class="token comment"># 撤销所有文件</span><span class="token function">git</span> checkout <span class="token builtin class-name">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>相当于 SVN 的 <code>revert</code></p><h1 id="已使用-git-add-缓存代码未使用-git-commit-提交代码"><a href="#已使用-git-add-缓存代码未使用-git-commit-提交代码" class="headerlink" title="已使用 git add 缓存代码未使用 git commit 提交代码"></a>已使用 <code>git add</code> 缓存代码未使用 <code>git commit</code> 提交代码</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 撤销指定文件</span><span class="token function">git</span> reset HEAD <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span><span class="token comment"># 撤销所有文件</span><span class="token function">git</span> reset HEAD <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="已使用-git-commit-提交代码"><a href="#已使用-git-commit-提交代码" class="headerlink" title="已使用 git commit 提交代码"></a>已使用 <code>git commit</code> 提交代码</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 回退到当前版本的上一版本</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^<span class="token comment"># 回退到指定版本</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> commit_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>传送门：<a href="https://april-cl.github.io/2024/03/21/git-ming-ling-xun-lian-ying-learngitbranching/#toc-heading-20">git 命令训练营 learngitbranching</a></p>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账后端（五）</title>
      <link href="/2024/05/09/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-wu/"/>
      <url>/2024/05/09/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-wu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://april-cl.github.io/2024/05/07/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-si/#toc-heading-10">书接上回</a>，报错翻译过来就是</p><blockquote><p>!无法加载应用程序： 参数错误： 生产环境缺少 secret_key_base，请使用 “bin/rails credentials:edit “设置该字符串。</p></blockquote><h1 id="如何管理密钥"><a href="#如何管理密钥" class="headerlink" title="如何管理密钥"></a>如何管理密钥</h1><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>master.key + keys =&gt; encrypted<br>密钥 + 加密内容 =&gt; 密文</p><p>encrypted + master.key =&gt; keys<br>密文 + 密钥 =&gt; 解密内容</p><h2 id="Rails-读取-keys"><a href="#Rails-读取-keys" class="headerlink" title="Rails 读取 keys"></a>Rails 读取 keys</h2><p>打开控制台 <code>bin/rails console</code></p><p>输入 <code>Rails.application.credentials.config</code></p><p>可以查看到 keys （这些 keys 即加密内容，不能泄露）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/r/mangosteen-rails <span class="token comment"># ❯❯❯ bin/rails console</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:001:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> Rails.application.credentials.config<span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>:secret_key_base<span class="token operator">=</span><span class="token operator">&gt;</span>                                                                                       <span class="token string">"0b20f2b6b8dc0f440f4b0f22ebc74aec8c9156276728d5bcd2e96c3625aaeb4346ed94e6b507f647462cca583009e656e5486ece31d0f405506bec3af02605c"</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rails-写入-keys"><a href="#Rails-写入-keys" class="headerlink" title="Rails 写入 keys"></a>Rails 写入 keys</h2><ol><li><p>删除 config 目录下 的 credentials.yml.enc 和 master.key 文件（如果之前执行过下面操作就会生成这两个文件）</p></li><li><p>输入命令 <code>EDITOR="code --wait" bin/rails credentials:edit</code>，会生成一个 master.key 文件 和 xxxxx.credentials.yml 文件，将 keys 记录在 xxxxx.credentials.yml 文件，保存关闭编辑器，这个 xxxxx.credentials.yml 文件会自动销毁，可以通过前面<a href="https://april-cl.github.io/2024/05/09/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-wu/#toc-heading-3">Rails 读取 keys</a>的方法来读取</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Adding config/master.key to store the encryption key: abf694bcb7a2f9973efbab9b0ebfe409Save this <span class="token keyword">in</span> a password manager your team can access.If you lose the key, no one, including you, can access anything encrypted with it.      create  config/master.keyFile encrypted and saved.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rails-多环境密钥"><a href="#Rails-多环境密钥" class="headerlink" title="Rails 多环境密钥"></a>Rails 多环境密钥</h2><p>开发环境密钥</p><p>命令：<code>EDITOR="code --wait" bin/rails credentials:edit</code></p><p>产物：config/master.key、config/credentials.yml.enc</p><p>生产环境密钥</p><p>命令：<code>EDITOR="code --wait" rails credentials:edit --environment production</code></p><p>产物：config/credentials/production.key、config/credentials/production.yml.enc</p><h2 id="解决-Missing-secret-key-base-for-‘production’-environment"><a href="#解决-Missing-secret-key-base-for-‘production’-environment" class="headerlink" title="解决 Missing secret_key_base for ‘production’ environment"></a>解决 Missing <code>secret_key_base</code> for ‘production’ environment</h2><ol><li>修改 bin/setup_post.host，把 <code>secret_key_base</code> 写到环境变量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加了这个 -e RAILS_MASTER_KEY=$RAILS_MASTER_KEY</span><span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">RAILS_MASTER_KEY</span><span class="token operator">=</span><span class="token variable">$RAILS_MASTER_KEY</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3000</span>:3000 <span class="token parameter variable">--network</span><span class="token operator">=</span>network1  <span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token variable">$container_name</span> mangosteen:<span class="token variable">$version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><p>读取开发环境的 <code>secret_key_base</code>，可以通过前面<a href="https://april-cl.github.io/2024/05/09/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-wu/#toc-heading-3">Rails 读取 keys</a>的方法来读取，也可以通过前面<a href="https://april-cl.github.io/2024/05/09/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-wu/#toc-heading-4">Rails 写入 keys</a>的方法来重新获取一个，把这个 <code>secret_key_base</code> 的值复制下来</p></li><li><p>设置生产环境的 <code>secret_key_base</code></p><ol><li><p>输入命令：<code>EDITOR="code --wait" rails credentials:edit --environment production</code></p></li><li><p>在生成的 xxxxx.production.yml 写入 <code>secret_key_base: 刚刚复制的开发环境secret_key_base</code>，关闭编辑页会自动销毁这个文件</p></li></ol></li><li><p>重新生成开发环境的 <code>secret_key_base</code>，防止生产环境 <code>secret_key_base</code> 泄露</p></li><li><p>输入命令 <code>bin/pack_for_host.sh</code> 重新打包</p></li><li><p>复制 config/credentials/production.key 内容</p></li><li><p>宿主机执行 <code>RAILS_MASTER_KEY=xxxxxxxxxxxxxxx mangosteen_deploy/setup_host.sh</code>（这里 RAILS_MASTER_KEY 是步骤 1 命名的，xxxxxxxxxxxxxxx 就是上面步骤 6 复制的内容）</p></li><li><p>浏览器访问 <code>http://localhost:3000/</code>，页面出现 <code>{"message":"Welcome!"}</code> 即部署成功了</p></li></ol><p>但是访问 <code>http://localhost:3000/api/v1/items</code> 还是失败，原因是还没有配置生产环境数据库</p><h1 id="配置生产环境数据库"><a href="#配置生产环境数据库" class="headerlink" title="配置生产环境数据库"></a>配置生产环境数据库</h1><ol><li>修改 config/database.yml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">production</span><span class="token punctuation">:</span>  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*default</span>  <span class="token key atrule">database</span><span class="token punctuation">:</span> mangosteen_production  <span class="token key atrule">username</span><span class="token punctuation">:</span> mangosteen  <span class="token key atrule">password</span><span class="token punctuation">:</span> &lt;%= ENV<span class="token punctuation">[</span><span class="token string">"DB_PASSWORD"</span><span class="token punctuation">]</span> %<span class="token punctuation">&gt;</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> &lt;%= ENV<span class="token punctuation">[</span><span class="token string">"DB_HOST"</span><span class="token punctuation">]</span> %<span class="token punctuation">&gt;</span>  <span class="token comment"># &lt;%= ENV["DB_PASSWORD"] %&gt; &lt;%= ENV["DB_HOST"] %&gt; 使用环境变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>修改 bin/setup_host.sh</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加了 -e DB_HOST=$DB_HOST -e DB_PASSWORD=$DB_PASSWORD</span><span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">DB_HOST</span><span class="token operator">=</span><span class="token variable">$DB_HOST</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">DB_PASSWORD</span><span class="token operator">=</span><span class="token variable">$DB_PASSWORD</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">RAILS_MASTER_KEY</span><span class="token operator">=</span><span class="token variable">$RAILS_MASTER_KEY</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3000</span>:3000 <span class="token parameter variable">--network</span><span class="token operator">=</span>network1 <span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token variable">$container_name</span> mangosteen:<span class="token variable">$version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><p>执行上面<a href="https://april-cl.github.io/2024/05/09/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-wu/#toc-heading-6">解决 Missing <code>secret_key_base</code> for ‘production’ environment</a> 的步骤2/3/4/5/6</p></li><li><p>宿主机执行 <code>DB_HOST=db-for-mangosteen DB_PASSWORD=123456 RAILS_MASTER_KEY=xxxxxxxxxxxxxxx mangosteen_deploy/setup_host.sh</code>（举一反三理解DB_HOST、DB_PASSWORD）</p></li><li><p>宿主机执行 <code>docker exec -it mangosteen-prod-1 bin/rails db:create db:migrate</code> 创建和迁移数据库（mangosteen-prod-1 也可以改成容器 id）</p></li><li><p>浏览器访问 <code>http://localhost:3000/api/v1/items</code>，页面出现 <code>"resources":[],"pager":{"page":null,"per_page":100,"count":0}}</code> 即访问接口成功了</p></li></ol><blockquote><p>为什么不用 <code>curl http://localhost:3000/ -v</code> 和 <code>curl http://localhost:3000/api/v1/items -v</code><br>    这里其实正常是可以 curl 出来的，就很奇怪我的出不来，一直卡在返回那里，尝试 curl 百度和本地的其它端口也是成功的，说明 curl 没问题，但是浏览器访问也是成功的，说明接口也没问题，so I don’t understand why …</p></blockquote><hr><p><strong>谨慎操作：如何删除生产环境数据库</strong></p><ol><li><p>宿主机执行 <code>docker exec -it mangosteen-prod-1 bash</code> 进入容器内部</p></li><li><p>输入 <code>DISABLE_DATABASE_ENVIRONMENT_CHECK=1 bin/rails db:drop</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账后端（四）</title>
      <link href="/2024/05/07/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-si/"/>
      <url>/2024/05/07/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-si/</url>
      
        <content type="html"><![CDATA[<h1 id="购买便宜的云服务器"><a href="#购买便宜的云服务器" class="headerlink" title="购买便宜的云服务器"></a>购买便宜的云服务器</h1><p>需要购买服务器实际操作</p><h1 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><ul><li><p>不推荐使用「用户名 + 密码」登录，容易忘，且不安全</p></li><li><p>推荐使用 ssh-copy-id 上传公钥，使用 ssh 登录</p></li><li><p>具体教程请自己搜索（不同系统命令不同）</p></li></ul><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><ul><li><p>推荐开启测试端口，如 3000、3001、5000、8000、8080</p></li><li><p>自行选择是否开启重要端口，因为需要备案，如 80、443</p></li></ul><h2 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h2><ul><li><p>推荐只在 root 用户里安装 Docker 即可</p></li><li><p>每个应用创建一个独立用户，并加入 docker 用户组</p></li><li><p>切忌用 root 管理所有应用</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建独立用户 ubuntu add user to group</span>adduser mangosteen<span class="token comment"># ubuntu install docker</span><span class="token function">apt-get</span> update<span class="token comment"># 用户授权</span><span class="token comment"># 登录 root 账号</span><span class="token function">ssh</span> root@服务器ip<span class="token comment"># 创建 /home/mangosteen/.ssh 目录</span><span class="token function">mkdir</span> /home/mangosteen/.ssh<span class="token comment"># 复制 authorized_keys 文件到刚创建的目录</span><span class="token function">cp</span> ~/.ssh/authorized_keys /home/mangosteen/.ssh<span class="token builtin class-name">cd</span> /home/mangosteen<span class="token function">chown</span> <span class="token parameter variable">-R</span> mangosteen:mangosteen .ssh<span class="token comment"># 登录成功</span><span class="token function">ssh</span> mangosteen@服务器ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="部署思路"><a href="#部署思路" class="headerlink" title="部署思路"></a>部署思路</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li><p>准备一个新用户（看上文）</p></li><li><p>准备好 Docker（看上文）</p></li><li><p>上传 Dockerfile</p></li><li><p>上传源代码</p></li><li><p>用 Dockerfile 构建运行环境</p></li><li><p>在运行环境里运行源代码</p></li><li><p>使用 Nginx 做转发</p></li></ul><h2 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h2><ul><li><p>上传新 Dockerfile</p></li><li><p>上传新源代码</p></li><li><p>用 Dockerfile 构建新运行环境</p></li><li><p>在新环境运行新代码</p></li><li><p>使用 Nginx 做转发</p></li></ul><h2 id="配置前端生产环境"><a href="#配置前端生产环境" class="headerlink" title="配置前端生产环境"></a>配置前端生产环境</h2><ul><li><p>将代码中的路径替换成 CDN 路径</p></li><li><p>上传打包好的 CSS 和 JS 代码到 CDN</p></li><li><p>将 html 文件上传到后端服务器</p></li><li><p>使用 Nginx 处理 html 文件请求</p></li></ul><h1 id="在宿主机里部署"><a href="#在宿主机里部署" class="headerlink" title="在宿主机里部署"></a>在宿主机里部署</h1><p>bin 目录新建 pack_for_host.sh, setup_host.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># pack_for_host.sh</span><span class="token assign-left variable">dir</span><span class="token operator">=</span>oh-my-env<span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%Y%m%d-%H%M%S'</span><span class="token variable">)</span></span><span class="token assign-left variable">dist</span><span class="token operator">=</span>tmp/mangosteen-<span class="token variable">$time</span>.tar.gz<span class="token assign-left variable">current_dir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> $0<span class="token variable">)</span></span><span class="token assign-left variable">deploy_dir</span><span class="token operator">=</span>/workspaces/<span class="token variable">$dir</span>/mangosteen_deploy<span class="token function">yes</span> <span class="token operator">|</span> <span class="token function">rm</span> tmp/mangosteen-*.tar.gz<span class="token punctuation">;</span> <span class="token function">yes</span> <span class="token operator">|</span> <span class="token function">rm</span> <span class="token variable">$deploy_dir</span>/mangosteen-*.tar.gz<span class="token punctuation">;</span> <span class="token function">tar</span> <span class="token parameter variable">--exclude</span><span class="token operator">=</span><span class="token string">"tmp/cache/*"</span> <span class="token parameter variable">-czv</span> <span class="token parameter variable">-f</span> <span class="token variable">$dist</span> *<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$deploy_dir</span><span class="token function">cp</span> <span class="token variable">$current_dir</span>/<span class="token punctuation">..</span>/config/host.Dockerfile <span class="token variable">$deploy_dir</span>/Dockerfile<span class="token function">cp</span> <span class="token variable">$current_dir</span>/setup_host.sh <span class="token variable">$deploy_dir</span>/<span class="token function">mv</span> <span class="token variable">$dist</span> <span class="token variable">$deploy_dir</span><span class="token builtin class-name">echo</span> <span class="token variable">$time</span> <span class="token operator">&gt;</span> <span class="token variable">$deploy_dir</span>/version<span class="token builtin class-name">echo</span> <span class="token string">'DONE!'</span><span class="token comment"># setup_host.sh</span><span class="token assign-left variable">DB_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span><span class="token assign-left variable">container_name</span><span class="token operator">=</span>mangosteen-prod-1<span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> mangosteen_deploy/version<span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token string">'docker build ...'</span><span class="token function">docker</span> build mangosteen_deploy <span class="token parameter variable">-t</span> mangosteen:<span class="token variable">$version</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>^mangosteen-prod-1$<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">'docker rm ...'</span>  <span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">$container_name</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token string">'docker run ...'</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3000</span>:3000 <span class="token parameter variable">--network</span><span class="token operator">=</span>network1 <span class="token parameter variable">-e</span> <span class="token assign-left variable">DB_PASSWORD</span><span class="token operator">=</span><span class="token variable">$DB_PASSWORD</span> <span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token variable">$container_name</span> mangosteen:<span class="token variable">$version</span><span class="token builtin class-name">echo</span> <span class="token string">'DONE!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>config 目录新建 host.Dockerfile</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM ruby:3.0.0ENV RAILS_ENV productionRUN <span class="token function">mkdir</span> /mangosteenRUN bundle config mirror.https://rubygems.org https://gems.ruby-china.comWORKDIR /mangosteenADD mangosteen-*.tar.gz ./RUN bundle config <span class="token builtin class-name">set</span> <span class="token parameter variable">--local</span> without <span class="token string">'development test'</span>RUN bundle <span class="token function">install</span>ENTRYPOINT bundle <span class="token builtin class-name">exec</span> puma<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开发容器终端运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x bin/*.shbin/pack_for_host.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>回到 windows oh-my-env 目录，会看到打包好的 mangosteen_deploy，使用 cmder 或 git bash 运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mangosteen_deploy/setup_host.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候 <code>docker ps -a</code> 发现启动失败了</p><p>使用 <code>docker logs [CONTAINER ID]</code> 查看原因</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span> Unable to load application: ArgumentError: Missing <span class="token variable"><span class="token variable">`</span>secret_key_base<span class="token variable">`</span></span> <span class="token keyword">for</span> <span class="token string">'production'</span> environment, <span class="token builtin class-name">set</span> this string with <span class="token variable"><span class="token variable">`</span>bin/rails credentials:edit<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决见<a href="https://april-cl.github.io/2024/05/09/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-wu/">下篇</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账后端（三）</title>
      <link href="/2024/05/07/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-san/"/>
      <url>/2024/05/07/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-san/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-RSpec"><a href="#安装-RSpec" class="headerlink" title="安装 RSpec"></a>安装 RSpec</h1><p><a href="https://github.com/rspec/rpec-rails">看文档</a></p><ol><li>Gemfile 文件</li></ol><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">group <span class="token symbol">:development</span><span class="token punctuation">,</span> <span class="token symbol">:test</span> <span class="token keyword">do</span>  gem <span class="token string-literal"><span class="token string">"debug"</span></span><span class="token punctuation">,</span> <span class="token symbol">platforms</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">%i[ mri mingw x64_mingw ]</span></span>  gem <span class="token string-literal"><span class="token string">'rspec-rails'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'~&gt; 6.0.0'</span></span> <span class="token comment">#新增</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>终端运行</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Download and install</span>$ bundle <span class="token function">install</span><span class="token comment"># Generate boilerplate configuration files</span><span class="token comment"># (check the comments in each generated file for more information)</span>$ bin/rails generate rspec:install    create  .rspec    create  spec    create  spec/spec_helper.rb    create  spec/rails_helper.rb<span class="token comment"># 创建测试 model 文件</span>$ bin/rails generate rspec:model user    create  spec/models/user_spec.rb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置测试数据库</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># config/database.yml </span><span class="token key atrule">test</span><span class="token punctuation">:</span>  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*default</span>  <span class="token key atrule">database</span><span class="token punctuation">:</span>   <span class="token key atrule">username</span><span class="token punctuation">:</span>   <span class="token key atrule">password</span><span class="token punctuation">:</span>   <span class="token key atrule">host</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li> 在测试环境创建数据库</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 测试环境 创建数据库</span><span class="token assign-left variable">RAILS_ENV</span><span class="token operator">=</span>test bin/rails db:create<span class="token comment"># 测试环境 迁移数据库</span><span class="token assign-left variable">RAILS_ENV</span><span class="token operator">=</span>test bin/rails db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>启动测试用例</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bundle <span class="token builtin class-name">exec</span> rspec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="如何测试请求"><a href="#如何测试请求" class="headerlink" title="如何测试请求"></a>如何测试请求</h1><p>创建测试请求文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails generate rspec:request items    create  spec/requests/items_spec.rb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>具体测试用例看项目代码</p><h1 id="如何使用-SecureRandom"><a href="#如何使用-SecureRandom" class="headerlink" title="如何使用 SecureRandom"></a>如何使用 SecureRandom</h1><ol><li>创建测试请求文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bin/rails generate rspec:request validation_codes    create  spec/requests/validation_codes_spec.rb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>完善 controller</li></ol><p><a href="https://api.rubyonrails.org/classes/ActiveRecord/SecureToken/ClassMethods.html">ActiveRecord::SecureToken::ClassMethods</a></p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/api/v1/validation_codes_controller.rb</span><span class="token keyword">class</span> <span class="token class-name">Api</span><span class="token double-colon punctuation">::</span><span class="token constant">V1</span><span class="token double-colon punctuation">::</span>ValidationCodesController <span class="token operator">&lt;</span> ApplicationController  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>    code <span class="token operator">=</span> SecureRandom<span class="token punctuation">.</span>random_number<span class="token punctuation">.</span>to_s<span class="token punctuation">[</span><span class="token number">2.</span><span class="token number">.7</span><span class="token punctuation">]</span>    validation_code <span class="token operator">=</span> <span class="token class-name">ValidationCode</span><span class="token punctuation">.</span><span class="token keyword">new</span> email<span class="token operator">:</span> params<span class="token punctuation">[</span><span class="token symbol">:email</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token symbol">kind</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'sign_in'</span></span><span class="token punctuation">,</span> <span class="token symbol">code</span><span class="token operator">:</span> code    <span class="token keyword">if</span> validation_code<span class="token punctuation">.</span>save      head <span class="token number">200</span>    <span class="token keyword">else</span>      reder json<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token symbol">errors</span><span class="token operator">:</span> validation_code<span class="token punctuation">.</span>errors<span class="token punctuation">}</span>    <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment"># app/models/validation_code.rb</span><span class="token keyword">class</span> <span class="token class-name">ValidationCode</span> <span class="token operator">&lt;</span> ApplicationRecord    has_secure_token <span class="token symbol">:code</span><span class="token punctuation">,</span> <span class="token symbol">length</span><span class="token operator">:</span> <span class="token number">24</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Ctrl + P</code> 搜索 <code>schema.rb</code> 可以查看有数据表哪些字段</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 拉取指定版本</title>
      <link href="/2024/05/06/git-la-qu-zhi-ding-ban-ben/"/>
      <url>/2024/05/06/git-la-qu-zhi-ding-ban-ben/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>commit-hash<span class="token operator">&gt;</span><span class="token comment"># commit-hash 版本号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相当于 SVN 的 <code>update to revision</code></p>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账后端（二）</title>
      <link href="/2024/05/06/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-er/"/>
      <url>/2024/05/06/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-er/</url>
      
        <content type="html"><![CDATA[<h1 id="解决-Docker-依赖持久化问题"><a href="#解决-Docker-依赖持久化问题" class="headerlink" title="解决 Docker 依赖持久化问题"></a>解决 Docker 依赖持久化问题</h1><ul><li><p>哪些依赖没有持久化？<br>ruby 的 gems 没有持久化<br>archlinux 的 postgresql-libs 没有持久化</p></li><li><p>如何解决<br>使用 mount 参数和 Dockerfile 的 RUN 指令来解决</p><ul><li>使用 mount 参数<br>.devcontainer/devcontainer.json<br>添加 “source=gems,target=/usr/local/rvm/gems,type=volume”,<br>注意句尾逗号也要写</li><li>使用 RUN 指令<br>.devcontainer/Dockerfile<br>文末添加 RUN yes | pacman -S postgresql-libs</li></ul></li></ul><p>rebuild 后要重新设置国内镜像 <code>bundle config mirror.https://rubygems.org https://gems.ruby-china.com</code></p><h1 id="REST-风格是什么"><a href="#REST-风格是什么" class="headerlink" title="REST 风格是什么"></a>REST 风格是什么</h1><ul><li><p>看见路径就知道请求什么东西<br>  items - 数据<br>  tags - 标签<br>  validation_codes - 验证码</p></li><li><p>看见动词就知道是什么操作<br>  get - 获取<br>  post - 创建<br>  patch - 更新<br>  delete - 删除</p></li><li><p>看见状态码就知道结果是什么<br>  200 - 成功<br>  201 - 创建成功<br>  401 - 未登录<br>  402 - 需付费<br>  403 - 没有权限<br>  404 - 未找到<br>  412 - 不满足前提条件<br>  422 - 无法处理，参数有问题<br>  429 - 请求太频繁<br>  400 - 其他所有错误，详细原因可以放在 body 里</p></li></ul><h1 id="API概要设计"><a href="#API概要设计" class="headerlink" title="API概要设计"></a>API概要设计</h1><p>见课件</p><h1 id="路由与分页"><a href="#路由与分页" class="headerlink" title="路由与分页"></a>路由与分页</h1><h2 id="生成路由"><a href="#生成路由" class="headerlink" title="生成路由"></a>生成路由</h2><p><a href="https://april-cl.github.io/2024/04/30/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-yi/#toc-heading-4">回顾一下</a>，前面是手写创建路由，现在来使用 Rails 提供的<a href="https://ruby-china.github.io/rails-guides/v4.1/routing.html">路由</a>功能，Rails 路由能识别 URL，将其分发给控制器的动作进行处理，还能生成路径和 URL，无需直接在视图中硬编码字符串。</p><p><a href="https://ruby-china.github.io/rails-guides/v4.1/routing.html#%E6%8E%A7%E5%88%B6%E5%99%A8%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E8%B7%AF%E7%94%B1">控制器命名空间和路由</a></p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># config/routes.rb</span>Rails<span class="token punctuation">.</span>application<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>draw <span class="token keyword">do</span>  namespace <span class="token symbol">:api</span> <span class="token keyword">do</span>    namespace <span class="token symbol">:v1</span> <span class="token keyword">do</span>      <span class="token comment"># /api/v1/xxx</span>      resources <span class="token symbol">:validation_codes</span><span class="token punctuation">,</span> <span class="token symbol">only</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:create</span><span class="token punctuation">]</span>      <span class="token comment"># only: [:create] 只生成 create 接口</span>      resources <span class="token symbol">:session</span><span class="token punctuation">,</span> <span class="token symbol">only</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:create</span><span class="token punctuation">,</span> <span class="token symbol">:destory</span><span class="token punctuation">]</span>      <span class="token comment"># 啊啊啊做笔记才发现这里 destroy 拼写错了所以没生成 🤦🏻‍♀</span>      resources <span class="token symbol">:me</span><span class="token punctuation">,</span> <span class="token symbol">only</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:show</span><span class="token punctuation">]</span>      resources <span class="token symbol">:items</span>      resources <span class="token symbol">:tags</span>      <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令 <code>bin/rails routes</code></p><p>会生成</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">POST</span>   <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>validation_codes<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>   api<span class="token operator">/</span>v1<span class="token operator">/</span>validation_codes<span class="token comment">#create</span><span class="token constant">POST</span>   <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>session<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>            api<span class="token operator">/</span>v1<span class="token operator">/</span>session<span class="token comment">#create</span><span class="token constant">GET</span>    <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>me<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>             api<span class="token regex-literal"><span class="token regex">/v1/me</span></span><span class="token comment">#show</span><span class="token constant">GET</span>    <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>              api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token comment">#index</span><span class="token constant">POST</span>   <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>              api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token comment">#create</span><span class="token constant">GET</span>    <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token comment">#show</span><span class="token constant">PATCH</span>  <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token comment">#update</span><span class="token constant">PUT</span>    <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token comment">#update</span><span class="token constant">DELETE</span> <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          api<span class="token operator">/</span>v1<span class="token operator">/</span>items<span class="token comment">#destroy</span><span class="token constant">GET</span>    <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>               api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token comment">#index</span><span class="token constant">POST</span>   <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>               api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token comment">#create</span><span class="token constant">GET</span>    <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>           api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token comment">#show</span><span class="token constant">PATCH</span>  <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>           api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token comment">#update</span><span class="token constant">PUT</span>    <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>           api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token comment">#update</span><span class="token constant">DELETE</span> <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>           api<span class="token operator">/</span>v1<span class="token operator">/</span>tags<span class="token comment">#destroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h2><p>参照前面<a href="https://april-cl.github.io/2024/04/30/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-yi/#toc-heading-3">数据库建模</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建 ValidationCode 数据表</span>bin/rails g model ValidationCode email:string kind:string used_at:datetime<span class="token comment"># 创建 item 数据表</span>bin/rails g model item iser_id:integer amount:integer notes:text tags_id:integer happen_at:datetime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同步到数据库 <code>bin/rails db:migrate</code></p><h2 id="创建-controller"><a href="#创建-controller" class="headerlink" title="创建 controller"></a>创建 controller</h2><p>参照前面<a href="https://april-cl.github.io/2024/04/30/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-yi/#toc-heading-5">创建 controller</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails g controller Api::V1::Validation_codes createbin/rails g controller Api::V1::Items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装-kaminari"><a href="#安装-kaminari" class="headerlink" title="安装 kaminari"></a>安装 kaminari</h2><p><a href="https://github.com/kaminari/kaminari">kaminari github</a></p><p>在 Gemfile 里面添加 <code>gem 'kaminari'</code></p><p>终端执行 <code>bundle</code> </p><p>然后重启 <code>bin/rails s</code></p><p>修改配置 config/initializers/kaminari_config.rb</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Docker </tag>
            
            <tag> 实战 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账后端（一）</title>
      <link href="/2024/04/30/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-yi/"/>
      <url>/2024/04/30/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang-hou-duan-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="创建后端项目"><a href="#创建后端项目" class="headerlink" title="创建后端项目"></a>创建后端项目</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 把国外地址换成国内地址</span>gem sources <span class="token parameter variable">--add</span> https://gems.ruby-china.com/ <span class="token parameter variable">--remove</span> https://rubygems.org/<span class="token comment"># 设置国内镜像</span>bundle config mirror.https://rubygems.org https://gems.ruby-china.com<span class="token comment"># 安装 Rails</span>gem <span class="token function">install</span> rails <span class="token parameter variable">-v</span> <span class="token number">7.0</span>.2.3<span class="token comment"># 安装 postresql 驱动</span>pacman <span class="token parameter variable">-S</span> postgresql-libs<span class="token comment"># 进入工作目录</span><span class="token builtin class-name">cd</span> ~/repos<span class="token comment"># 创建 Rails 项目，--api 只使用 api 模式，数据库使用 postgresql，跳过测试，项目名</span>rails new <span class="token parameter variable">--api</span> <span class="token parameter variable">--database</span><span class="token operator">=</span>postgresql --skip-test mangosteen-1<span class="token comment"># 用 VSCode打开，这个时候可以把原来的窗口关掉了</span>code mangosteen-1<span class="token comment"># 新建终端</span>bundle exe rails server<span class="token comment"># 或者 bin/rails s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等待端口启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">=</span><span class="token operator">&gt;</span> Booting Puma<span class="token operator">=</span><span class="token operator">&gt;</span> Rails <span class="token number">7.0</span>.4.2 application starting <span class="token keyword">in</span> development <span class="token operator">=</span><span class="token operator">&gt;</span> Run <span class="token variable"><span class="token variable">`</span>bin/rails server <span class="token parameter variable">--help</span><span class="token variable">`</span></span> <span class="token keyword">for</span> <span class="token function">more</span> startup optionsPuma starting <span class="token keyword">in</span> single mode<span class="token punctuation">..</span>.* Puma version: <span class="token number">5.6</span>.5 <span class="token punctuation">(</span>ruby <span class="token number">3.0</span>.0-p0<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">"Birdie's Version"</span><span class="token punctuation">)</span>*  Min threads: <span class="token number">5</span>*  Max threads: <span class="token number">5</span>*  Environment: development*          PID: <span class="token number">8005</span>* Listening on http://127.0.0.1:3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器访问 <code>http://127.0.0.1:3000</code>，发现</p><p><code>ActiveRecord::ConnectionNotEstablished</code></p><p>数据库连接失败，因为没有数据库，终端运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span>      <span class="token parameter variable">--name</span> db-for-mangosteen      <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_USER</span><span class="token operator">=</span>mangosteen      <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span>      <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_DB</span><span class="token operator">=</span>mangosteen_dev      <span class="token parameter variable">-e</span> <span class="token assign-left variable">PGDATA</span><span class="token operator">=</span>/var/lib/postgresql/data/pgdata      <span class="token parameter variable">-v</span> mangosteen-data:/var/lib/postgresql/data      <span class="token parameter variable">--network</span><span class="token operator">=</span>network1      postgres:14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 database.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">development</span><span class="token punctuation">:</span>  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*default</span>  <span class="token key atrule">database</span><span class="token punctuation">:</span> mangosteen_dev  <span class="token key atrule">username</span><span class="token punctuation">:</span> mangosteen  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> db<span class="token punctuation">-</span>for<span class="token punctuation">-</span>mangosteen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次运行 <code>bin/rails s</code> 看到下面就成功啦</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1hp8ypnov4zj211y0gv774.jpg" alt="Rails启动成功.png"></p><h1 id="原来-Rails-这么爽"><a href="#原来-Rails-这么爽" class="headerlink" title="原来 Rails 这么爽"></a>原来 Rails 这么爽</h1><h2 id="数据库建模"><a href="#数据库建模" class="headerlink" title="数据库建模"></a>数据库建模</h2><p>建模工具：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># bin/rails generate model NAME [field[:type][:index] field[:type][:index]] [options]</span>bin/rails g model user email:string name:string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会创建两个文件</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/user.rb</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&lt;</span> ApplicationRecord<span class="token keyword">end</span><span class="token comment"># db/migrate/20230413060421_create_users.rb</span><span class="token keyword">class</span> <span class="token class-name">CreateUsers</span> <span class="token operator">&lt;</span> ActiveRecord<span class="token double-colon punctuation">::</span>Migration<span class="token punctuation">[</span><span class="token number">7.0</span><span class="token punctuation">]</span>  <span class="token operator">/</span><span class="token operator">/</span> 修改数据库  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">change</span></span>    <span class="token operator">/</span><span class="token operator">/</span> 创建一个 users 表    create_table <span class="token symbol">:users</span> <span class="token keyword">do</span> <span class="token operator">|</span>t<span class="token operator">|</span>      <span class="token operator">/</span><span class="token operator">/</span> t<span class="token punctuation">.</span>type <span class="token symbol">:XXX</span> 添加类型为 type 的 <span class="token constant">XXX</span> 字段       t<span class="token punctuation">.</span>string <span class="token symbol">:email</span>      t<span class="token punctuation">.</span>string <span class="token symbol">:name</span>      <span class="token operator">/</span><span class="token operator">/</span> t<span class="token punctuation">.</span>timestamps 会生成 created_at（创建时间）和 updated_at（更新时间） 两个字段      t<span class="token punctuation">.</span>timestamps    <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/Toml_/article/details/130881482#:~:text=Rails%20%E7%9A%84%E6%A0%87%E5%87%86%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%A6%82%E4%B8%8B%EF%BC%9A%20app%2F%20%23%20%E6%A0%B8%E5%BF%83%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%20%E2%94%9C%E2%94%80%E2%94%80%20assets%2F%20%23,%E2%94%9C%E2%94%80%E2%94%80%20channels%2F%20%23%20ActionCable%20websockets%20%E9%80%9A%E4%BF%A1%E7%9B%B8%E5%85%B3%E7%9A%84%20channel%20%E6%96%87%E4%BB%B6">Rails 目录结构说明</a></p><p>执行下面命令，同步到数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># config/routes.rb</span><span class="token operator">/</span><span class="token operator">/</span> curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">3000</span><span class="token operator">/</span>users<span class="token operator">/</span><span class="token number">1</span>，会调用 users 的 show 方法get <span class="token string-literal"><span class="token string">'/users/:id'</span></span><span class="token punctuation">,</span> <span class="token symbol">to</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'users#show'</span></span><span class="token operator">/</span><span class="token operator">/</span> curl <span class="token operator">-</span><span class="token constant">X</span> <span class="token constant">POST</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">3000</span><span class="token operator">/</span>users，会调用 users 的 create 方法post <span class="token string-literal"><span class="token string">'/users'</span></span><span class="token punctuation">,</span> <span class="token symbol">to</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'users#create'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建-controller"><a href="#创建-controller" class="headerlink" title="创建 controller"></a>创建 controller</h2><p>控制器生成器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># bin/rails generate controller NAME [action action] [options]</span>bin/rails g controller <span class="token function">users</span> create show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会创建一个实现方法的文件</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/users_controller.rb</span><span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token operator">&lt;</span> ApplicationController  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>  <span class="token keyword">end</span>  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">show</span></span>  <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记-山竹记账</title>
      <link href="/2024/04/29/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang/"/>
      <url>/2024/04/29/shi-zhan-pian-bi-ji-shan-zhu-ji-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="开发环境介绍"><a href="#开发环境介绍" class="headerlink" title="开发环境介绍"></a>开发环境介绍</h1><ol><li><p>安装 <a href="https://www.docker.com/products/docker-desktop/">Docker</a> 客户端【一个小插曲，安装完重启后笔记本居然出现“失联”（始终连不上网络，WLAN适配器失踪了）、陷入“开端”循环（无法关机一直在重启）奇葩现象，当时是在 BISO 把 Hyper-V 关了，设备管理器-&gt;网络适配器，更新驱动解决了“失联”，设置-&gt;电源和睡眠-&gt;其他电源设置-&gt;关机设置，取消掉启用快速启动前面的√解决了“开端”循环】</p></li><li><p>开启 WSL2 功能（<code>wsl --list --verbose</code> 查看是否开启），<a href="https://segmentfault.com/a/1190000041078669">Win10 安装 Docker Desktop ( 基于WSL2，WSL vs Hyper-V)</a></p></li><li><p>给 Docker 加速</p></li></ol><p>Docker 客户端设置-&gt;Docker Engine</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://ustc-edu-cn.mirror.aliyuncs.com"</span><span class="token punctuation">,</span>    <span class="token string">"https://hub-mirror.c.163.com"</span><span class="token punctuation">,</span>    <span class="token string">"https://mirror.baidubce.com"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>VSCode 安装插件 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers">Dev Containers</a></p></li><li><p>在 VSCode 中打开 <a href="https://github.com/FrankFang/oh-my-env-1">oh-my-env</a>，按下 <code>Ctrl + Shift + P</code>，输入 <code>reopen in container</code>，回车等待片刻进入开发环境（资源管理器目录名旁边会显示<code>[开发容器:OHMYENV]</code>或者<code>[Dev Container:OHMYENV]</code>）</p></li><li><p>命令行运行 <code>docker network create network1</code></p></li><li><p>使用 ruby3 和自带的 node</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rvm use <span class="token number">3</span>nvm use system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li><a href="https://april-cl.github.io/2023/02/25/docker-pei-zhi-git-zhang-hao/">配置 github ssh</a></li></ol><h1 id="关于-oh-my-env"><a href="#关于-oh-my-env" class="headerlink" title="关于 oh-my-env"></a>关于 oh-my-env</h1><pre class="line-numbers language-none"><code class="language-none">.├─.devcontainer├─.vscode├─mangosteen_deploy└─temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个目录是内外共享的, windows 和 Linux 都可以访问，性能一般，temp 用作中转站</p><p>这里提供了 ~/roepos 目录，这是 Linux 专享的，性能较好，默认在这个目录工作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/repos<span class="token comment"># or</span><span class="token comment"># cd ~/repos</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 命令行 </tag>
            
            <tag> git </tag>
            
            <tag> Docker </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生是旷野，不是轨道</title>
      <link href="/2024/04/16/ren-sheng-shi-kuang-ye-bu-shi-gui-dao/"/>
      <url>/2024/04/16/ren-sheng-shi-kuang-ye-bu-shi-gui-dao/</url>
      
        <content type="html"><![CDATA[<p>上星期一口气读了《ES6的标准入门 第2版》，当时读完是想写个笔记的，写的过程又涌现了一些旁的想法，而后又一头扎入《深入浅出Node.js》的阅读中，那些想法也就一直躺在草稿中了。今天本是要做点题补补脑的，早上花费了较多时间买菜备菜，还有一些杂七杂八的事情要做，剩下点时间较零碎，那就把草稿翻出来写完，马上踏入而立之年，权当写个序吧（虽然对于30岁女子称呼半老徐娘并非贬义，可是我接受不了，可能心智不够吧😺）</p><p>我一直不好写作，尤记得读书时期作文总是要拖到 deadline 才会动笔，当时可能认为灵感是逼出来的，现在觉得不过是积累不够丰富加之我又是个‘钝感力强’的人，记不住事，而命题作文我最为讨厌，文章最后的走向总能与题目相差十万八千里。</p><p>从 2020 年重新学习前端，我开始培养自己用文字记录的习惯，大多数是工作问题的记录，这些记录也确实在后面工作中给我带来了便利，我可能会记不住某些问题的解法，但只要我记录过的问题我一般总能记住，下次哪怕忘记了怎么解决也能通过问题记录找回当时的记忆（大概是 key 比 value 好记👀）。</p><p>前期出于习惯养成，总会强迫自己找知识点进行论述总结，而当时自己的经验较少，转行的迫切心理使得我难以静下心地去阅读行业大佬或团队编撰的书，对于不懂的点总是以网上赞同量多或很多人说的为准，多少有些人云亦云了，获取的知识也比较零散，若是以不懂的点散发关联的知识更是超脱理解，就像两地本有桥梁交通，但因为我不得其法，总是明白不了它们之间的联系。最近沉下心读书，惊喜的发现作者的编写总结如同火炬般驱散我的思维迷障，因为有了前辈的循循善诱，原本难以关联理解的知识也如同蜘蛛网般串行起来。当然，这或许也得益于这几年的工作经验，使得当一些略微复杂的场景能够在脑海中浮现以助理解。</p><p>为什么说是重新学习前端呢，其实在 2015 年大三时我已经开始自学前端，大二时有一门挂科了，当时心里很不服气，暗暗发誓要在大三拿到奖学金证明自己，所以大三一年为了学分参加了很多活动，还选修了并不熟悉的课程，也是在这当中认识并喜欢上前端开发，果然兴趣是最好的老师，那一年我总是有事没事往图书馆跑，从深入浅出系列看到犀牛书，加上不厌其烦的上机实践，不仅打下前端基础，还顺带辅助提升了对专业课程的理解能力，最后拿了一个三等奖学金。</p><p>说回看书，昨天读完《我的外婆，从不内耗》，里面的很多观点我很是受用。</p><blockquote><p>不要用吃苦获得道德上的崇高感和资格感</p></blockquote><p>还在坐月子的时候，因为是母乳喂养，老公提议说晚上他通宵不睡，娃醒了就叫我或者是奶粉代替，出于熬夜伤身的考虑，我希望老公能有更多精力应对白天的工作，而且我自身睡眠浅，娃一哼我就醒了，当时我并没有同意这样做，自然月子里没有休息好，人也越发的虚且抑郁。而我始终自我感动于自己的牺牲，在后面的日子里，每次因为带娃的问题发生争吵，我总会因为这样的事认定自已奉献巨大而否定这一路老公的付出。现在想来如果当初不是那么拧巴，会是怎样呢</p><p>大学毕业时我意向是做个程序员，几番碰壁迫于先就业积累资金的想法，当时在一个亲戚的介绍下来到仓库做类似财会助理的工作。理科出身思维还算不错，所以那些复杂难处理的数据对我而言还能对付，不过毕竟不是专科出身，所以在空暇时间我会看书学习一些便捷技巧提升效率。当时一个同事笑说我都毕业了还要看书，我不以为然，且不说我看的书确实于当时工作有所裨益，就算我看的只是一部小说，我从书中体会到了另外一种人生，从而对自己未来的规划更清晰一分，那于当下而言的我便是有用的。更者，我从不认为学习仅限于学校，毕竟人际交往、章程办理等更多是在社会实践中习得的。</p><p>第一份工作为我积累了一点资金，尽管这在转行前的空窗期已经消耗无几，但每每回想起来我总要感激自己当时这份固执。之前的工作无重大变故应该可以让我安安稳稳待上十几二十年，但温水煮青蛙最是消磨人的意志，一眼望到头的日子始终让我提不起激情。后来结婚生子，有段时间严重感觉记忆力衰退，又始终对程序员心有执念，于是我买了一些前端方面的课程，得益于坚持学习的习惯，生锈般的大脑在一次次思维训练中开始慢慢转动起来。其实当时的想法仅仅是想让自己脑子活跃起来，并没有多大的决心能够吃上这碗饭，后面学的多了，而且有人指路，接触到的例子多了，才燃起意志：既然别人可以，那我也行！现在回想起来，庆幸那段日子的坚持，奶娃入睡后又挑灯夜读，第二天顶着个熊猫眼上班，以及后面身子吃不消裸辞带娃学习，才能从月休一天到月休六天（现在的我要朝着更大的目标前进💪）</p><p>转业不熟悉的领域，有人勇往无畏，有人却十分忌惮，我便是后者。其实现在想来，这份忌惮是不必要的，缚手缚脚。在没找到第二份工作前，我总是给自己心理设限，对自己的学习成果不自信，甚至带入别人的视角轻视自己转行的想法。而在我入职后，通过对前人的观摩，我才意识到我虽不至优异也并不差劲。</p><p>以前我喜欢打游戏、喜欢购物，屁大点事也要发个圈图个热闹，而现在的我总习惯点开读书软件替换曾经着迷的短视频APP，可以半年不打开淘宝，新手机从来没安装过游戏，朋友圈早已关闭，可见喜欢也不是一成不变，甚至可以逆向发展。但我也欣于接受这种转变，与我而言这是一种成长。现在的我看当时的爱好会觉得浪费时间，但当时的我肯定因为能做喜欢的事情而开心的，既然已经享受过了的时光，回忆里就不该带入上帝视角吹毛求疵，毕竟我不能保证四十岁的我再来看现在的爱好是否有些沉闷，所以活在当下最好了。</p><p>写到这，其实和标题没什么关系，标题是我在写的时候刚好想到的一句话，而且前面说了，我写文会跑题吧😝</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 git push 报错超时</title>
      <link href="/2024/04/05/jie-jue-git-push-bao-cuo-chao-shi/"/>
      <url>/2024/04/05/jie-jue-git-push-bao-cuo-chao-shi/</url>
      
        <content type="html"><![CDATA[<p>问题：<code>git push</code> 一直失败</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Failed to connect to github.com port <span class="token number">443</span> after <span class="token number">21079</span> ms: Couldn't connect to server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决：去掉全局 git 代理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 配置备忘录</title>
      <link href="/2024/04/03/vscode-pei-zhi-bei-wang-lu/"/>
      <url>/2024/04/03/vscode-pei-zhi-bei-wang-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="配合-Cmder"><a href="#配合-Cmder" class="headerlink" title="配合 Cmder"></a>配合 Cmder</h1><ol><li><p><code>Ctrl + Shift + P</code> 打开命令面板，输入 <code>settings.json</code> 回车，会打开一个配置文件</p></li><li><p>修改 git.path 和 path，这里地址要设置成自己的安装路径，用搜索神器 everything 输入 git.exe</p></li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"git.path"</span><span class="token operator">:</span> <span class="token string">"D:\\cmder\\vendor\\git-for-windows\\bin\\bash.exe"</span><span class="token punctuation">,</span><span class="token property">"terminal.integrated.profiles.windows"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bash"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"D:\\cmder\\vendor\\git-for-windows\\bin\\bash.exe"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>重启下 VSCode </li></ol><blockquote><p>一点碎碎念<br>    托’大姨妈’的福，病了一个星期，床上躺了两天，今天勉强能起来码码字了，不过这几天倒是得了空看完一本《金粉世家》，嘿嘿~~~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义ECharts图表-设备运行状态图</title>
      <link href="/2024/03/22/zi-ding-yi-echarts-tu-biao-she-bei-yun-xing-zhuang-tai-tu/"/>
      <url>/2024/03/22/zi-ding-yi-echarts-tu-biao-she-bei-yun-xing-zhuang-tai-tu/</url>
      
        <content type="html"><![CDATA[<p>翻笔记看到两年前一个当时耗费挺长时间的看板页面，现在看来写的有些弱智，不过也侧面说明相较于之前有所成长吧（至少我觉得🤭）</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一个机台对应一个柱形图，柱形图反映机台从白班（当天早8点到晚8点）到夜班（当天晚8点到次日早8点）的运行状态，用不同颜色表示，每个柱形图后面还需要标注改机台的相关参数</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当时遇到的两个主要问题：</p><ol><li><p>运行状态是变化的，所以不能用常规的柱状图表示，它的效果类似于<a href="https://echarts.apache.org/examples/zh/editor.html?c=bar-y-category-stack">堆叠条形图</a></p></li><li><p>按照需求机台名称和参数应该显示成双 Y 轴的样子，但是机台参数有多列</p></li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>对于问题1，当时恰好看到官网提供的<a href="https://echarts.apache.org/examples/zh/editor.html?c=custom-profile">性能分析图</a>很适配，所以照着模拟出来了</p><p>对于问题2，当时想到的办法是把所有参数写在同一 Y 轴，用转义字符 <code>\t</code> 格式（现在想来有点蠢🤦🏻，后面知道了其实 <code>ECharts</code> 是支持多 Y 轴的）</p><p><code>option</code> 配置如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function-variable function">formatter</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> start <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> interval<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">&gt;</span> <span class="token number">24</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span>                interval<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">16</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> interval<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span>            <span class="token keyword">const</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> interval<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">24</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span>                interval<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">15</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> interval<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">9</span>            <span class="token keyword">return</span> <span class="token string">'时间段：'</span> <span class="token operator">+</span> start <span class="token operator">+</span> <span class="token string">'时 - '</span> <span class="token operator">+</span> end <span class="token operator">+</span> <span class="token string">'时&lt;br/&gt;'</span> <span class="token operator">+</span> params<span class="token punctuation">.</span>marker <span class="token operator">+</span> params<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'：'</span> <span class="token operator">+</span> Math                <span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 分钟'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">grid</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'120'</span><span class="token punctuation">,</span>        <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token string">'300'</span><span class="token punctuation">,</span>        <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token string">'10'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">xAxis</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">设备运行状态</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">nameLocation</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>        <span class="token literal-property property">nameGap</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        <span class="token literal-property property">nameTextStyle</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#FFF'</span><span class="token punctuation">,</span>            <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">'bold'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">'top'</span><span class="token punctuation">,</span>        interval<span class="token punctuation">,</span>        <span class="token literal-property property">max</span><span class="token operator">:</span> interval <span class="token operator">*</span> hours<span class="token punctuation">,</span>        <span class="token literal-property property">axisLabel</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#FFF'</span><span class="token punctuation">,</span>            <span class="token function-variable function">formatter</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>value <span class="token operator">/</span> interval<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">&gt;</span> <span class="token number">24</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>value <span class="token operator">/</span> interval<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">16</span> <span class="token operator">:</span> Math                    <span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>value <span class="token operator">/</span> interval<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">axisPointer</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">triggerTooltip</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">splitLine</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">yAxis</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">机台编号  \n产品编号  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>            <span class="token literal-property property">nameLocation</span><span class="token operator">:</span> <span class="token string">'start'</span><span class="token punctuation">,</span>            <span class="token literal-property property">nameGap</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>            <span class="token literal-property property">nameTextStyle</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token literal-property property">verticalAlign</span><span class="token operator">:</span> <span class="token string">'top'</span><span class="token punctuation">,</span>                <span class="token literal-property property">align</span><span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#FFF'</span><span class="token punctuation">,</span>                <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>                <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>                <span class="token literal-property property">lineHeight</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token literal-property property">inverse</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">axisLine</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token literal-property property">axisTick</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">axisLabel</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#FFF'</span><span class="token punctuation">,</span>                <span class="token literal-property property">fontSize</span><span class="token operator">:</span> window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>availHeight <span class="token operator">&gt;</span> <span class="token number">1000</span> <span class="token operator">?</span> <span class="token number">16</span> <span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                <span class="token function-variable function">formatter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> machineList<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">平均成型周期\t\t\t合模数\t\t\t达成率</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>            <span class="token literal-property property">nameLocation</span><span class="token operator">:</span> <span class="token string">'start'</span><span class="token punctuation">,</span>            <span class="token literal-property property">nameGap</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>            <span class="token literal-property property">nameTextStyle</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token literal-property property">align</span><span class="token operator">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#FFF'</span><span class="token punctuation">,</span>                <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>                <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">'bold'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token literal-property property">inverse</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">axisLine</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token literal-property property">axisTick</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">axisLabel</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#FFF'</span><span class="token punctuation">,</span>                <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> infoList<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'custom'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'custom'</span><span class="token punctuation">,</span>        <span class="token literal-property property">labelLine</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        renderItem<span class="token punctuation">,</span>        <span class="token literal-property property">encode</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> machineItemList    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>renderItem</code> 函数</p><p><code>custom</code> 系列需要开发者自己提供图形渲染的逻辑。这个渲染逻辑一般命名为 <code>renderItem</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">renderItem</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> api</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> categoryIndex <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> start <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">coord</span><span class="token punctuation">(</span><span class="token punctuation">[</span>api<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> categoryIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> end <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">coord</span><span class="token punctuation">(</span><span class="token punctuation">[</span>api<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> categoryIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> height <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.4</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rectShape <span class="token operator">=</span> echarts<span class="token punctuation">.</span>graphic<span class="token punctuation">.</span><span class="token function">clipRectByRect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">x</span><span class="token operator">:</span> start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">y</span><span class="token operator">:</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> height    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token literal-property property">x</span><span class="token operator">:</span> params<span class="token punctuation">.</span>coordSys<span class="token punctuation">.</span>x<span class="token punctuation">,</span>        <span class="token literal-property property">y</span><span class="token operator">:</span> params<span class="token punctuation">.</span>coordSys<span class="token punctuation">.</span>y<span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> params<span class="token punctuation">.</span>coordSys<span class="token punctuation">.</span>width<span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> params<span class="token punctuation">.</span>coordSys<span class="token punctuation">.</span>height    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        rectShape <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'rect'</span><span class="token punctuation">,</span>            <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'shape'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">shape</span><span class="token operator">:</span> rectShape<span class="token punctuation">,</span>            <span class="token literal-property property">style</span><span class="token operator">:</span> api<span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据的格式类似这样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 变量说明    * machineList：机台列表数组    * infoList：[[平均成型周期，合模数，达成率],...]    * machineItemList: [{        * name状态        * value[machineList.index，起始x坐标，结束x坐标，差值]        * itemStyle{        * normal: {color} green:正常;yellow:待机;red:异常;orange:修模;gray:关机        * }    * }]*/</span><span class="token punctuation">{</span>    <span class="token string-property property">"machineList"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"机台1 "</span><span class="token punctuation">,</span>        <span class="token comment">// ...</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"infoList"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"         0.00           0      0.00%"</span><span class="token punctuation">,</span>        <span class="token comment">// ...</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"machineItemList"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"正常"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"green"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"异常"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"red"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"待机"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"yellow"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"停机"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"gray"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 此处省略了92个对象，每100个对象为一个机台数据，因为后端传回的数据即一个小时一种状态，一天24个小时，每一个小时存在4种状态可能，差值为100表示该时段状态</span>        <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"正常"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2400</span><span class="token punctuation">,</span> <span class="token number">2400</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"green"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"异常"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2400</span><span class="token punctuation">,</span> <span class="token number">2400</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"red"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"待机"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2400</span><span class="token punctuation">,</span> <span class="token number">2400</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"yellow"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"停机"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2400</span><span class="token punctuation">,</span> <span class="token number">2500</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"gray"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"正常"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"green"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"异常"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"red"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"待机"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"yellow"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"停机"</span><span class="token punctuation">,</span> <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-property property">"itemStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"gray"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// ...</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1hnzrzptwi3j21520cqtf9.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令训练营 learngitbranching</title>
      <link href="/2024/03/21/git-ming-ling-xun-lian-ying-learngitbranching/"/>
      <url>/2024/03/21/git-ming-ling-xun-lian-ying-learngitbranching/</url>
      
        <content type="html"><![CDATA[<p>目前公司用的代码管理工具是 <code>SVN</code>，用久了倒是有点记不清 <code>git</code> 的用法了，趁着这几日空了回顾回顾，果真发现了个好玩的网站 <a href="https://learngitbranching.js.org/?locale=zh_CN">learngitbranching</a>，还补上了以前钻研不会的知识盲区，记录下答案~</p><p>下面代码块为 <code>learngitbranching</code> 提供的答案（使用 <code>show solution</code> 命令就可以看到），视频是我自己写的答案，有些对不上，不过倒是殊途同归</p><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit$ <span class="token function">git</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1302227299&amp;bvid=BV1eu4m1T75F&amp;cid=1477053279&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-Branch"><a href="#Git-Branch" class="headerlink" title="Git Branch"></a>Git Branch</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch bugFix$ <span class="token function">git</span> checkout bugFix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1952193285&amp;bvid=BV1uC411t7T1&amp;cid=1477087242&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-Merge"><a href="#Git-Merge" class="headerlink" title="Git Merge"></a>Git Merge</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> bugFix$ <span class="token function">git</span> commit$ <span class="token function">git</span> checkout main$ <span class="token function">git</span> commit$ <span class="token function">git</span> merge bugFix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1602242343&amp;bvid=BV1rm421J74F&amp;cid=1477087887&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-Rebase"><a href="#Git-Rebase" class="headerlink" title="Git Rebase"></a>Git Rebase</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> bugFix$ <span class="token function">git</span> commit$ <span class="token function">git</span> checkout main$ <span class="token function">git</span> commit$ <span class="token function">git</span> checkout bugFix$ <span class="token function">git</span> rebase main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1352115494&amp;bvid=BV1N6421c7uT&amp;cid=1477088762&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h1 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h1><h2 id="分离的-HEAD"><a href="#分离的-HEAD" class="headerlink" title="分离的 HEAD"></a>分离的 HEAD</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout C4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1202094945&amp;bvid=BV1xF4m1F7VP&amp;cid=1477116376&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="相对引用（-）"><a href="#相对引用（-）" class="headerlink" title="相对引用（^）"></a>相对引用（^）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout bugFix^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1702129143&amp;bvid=BV1SK421Y7Bg&amp;cid=1477118549&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="相对引用2（-）"><a href="#相对引用2（-）" class="headerlink" title="相对引用2（~）"></a>相对引用2（~）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch <span class="token parameter variable">-f</span> main C6$ <span class="token function">git</span> checkout HEAD~1$ <span class="token function">git</span> branch <span class="token parameter variable">-f</span> bugFix HEAD~1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1802150423&amp;bvid=BV1Xt421G7YS&amp;cid=1477120547&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> reset HEAD~1$ <span class="token function">git</span> checkout pushed$ <span class="token function">git</span> revert HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1802038862&amp;bvid=BV1Kt421G7me&amp;cid=1477121604&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h1 id="移动提交记录"><a href="#移动提交记录" class="headerlink" title="移动提交记录"></a>移动提交记录</h1><h2 id="Git-Cherry-pick"><a href="#Git-Cherry-pick" class="headerlink" title="Git Cherry-pick"></a>Git Cherry-pick</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> cherry-pick C3 C4 C7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1402222007&amp;bvid=BV1Rr421t7sS&amp;cid=1478082826&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="交互式-rebase"><a href="#交互式-rebase" class="headerlink" title="交互式 rebase"></a>交互式 rebase</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> rebase <span class="token parameter variable">-i</span> overHere<span class="token comment"># 选择 C3 C4 C5，然后调换 C4 C5 的位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1252014124&amp;bvid=BV1UJ4m1j7dU&amp;cid=1478085862&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="只取一个提交记录"><a href="#只取一个提交记录" class="headerlink" title="只取一个提交记录"></a>只取一个提交记录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> rebase <span class="token parameter variable">-i</span> main <span class="token comment"># 只选择 C4</span>$ <span class="token function">git</span> rebase bugFix main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1502003248&amp;bvid=BV1uD42177DR&amp;cid=1478086568&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="提交的技巧-1"><a href="#提交的技巧-1" class="headerlink" title="提交的技巧 #1"></a>提交的技巧 #1</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~2<span class="token comment"># 调换 C2 C3 的位置</span>$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span>$ <span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~2<span class="token comment"># 调换 C3' C2'' 的位置</span>$ <span class="token function">git</span> rebase caption main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1102175836&amp;bvid=BV1kA4m1P7jJ&amp;cid=1478087275&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="提交的技巧-2"><a href="#提交的技巧-2" class="headerlink" title="提交的技巧 #2"></a>提交的技巧 #2</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout main$ <span class="token function">git</span> cherry-pick C2$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span>$ <span class="token function">git</span> cherry-pick C3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1952211230&amp;bvid=BV1NC411t7Ro&amp;cid=1478087767&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-Tag"><a href="#Git-Tag" class="headerlink" title="Git Tag"></a>Git Tag</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tag v1 side~1$ <span class="token function">git</span> tag v0 main~2$ <span class="token function">git</span> checkout v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1152226324&amp;bvid=BV1xZ421t77x&amp;cid=1480767138&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-Describe"><a href="#Git-Describe" class="headerlink" title="Git Describe"></a>Git Describe</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1952091735&amp;bvid=BV1EC41187MG&amp;cid=1480767461&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h1 id="高级话题"><a href="#高级话题" class="headerlink" title="高级话题"></a>高级话题</h1><h2 id="多次-Rebase"><a href="#多次-Rebase" class="headerlink" title="多次 Rebase"></a>多次 Rebase</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> rebase main bugFix$ <span class="token function">git</span> rebase bugFix side$ <span class="token function">git</span> rebase side another$ <span class="token function">git</span> rebase another main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1052189921&amp;bvid=BV1jH4y1W78Y&amp;cid=1480767985&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="两个-parent-节点"><a href="#两个-parent-节点" class="headerlink" title="两个 parent 节点"></a>两个 parent 节点</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch bugWork main^^2^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1102097616&amp;bvid=BV1tA4m1P7ra&amp;cid=1480770491&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="纠缠不清的分支"><a href="#纠缠不清的分支" class="headerlink" title="纠缠不清的分支"></a>纠缠不清的分支</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout one$ <span class="token function">git</span> cherry-pick C4 C3 C2$ <span class="token function">git</span> checkout two$ <span class="token function">git</span> cherry-pick C5 C4 C3 C2$ <span class="token function">git</span> branch <span class="token parameter variable">-f</span> three C2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1602138184&amp;bvid=BV122421P71o&amp;cid=1480771098&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h1 id="Push-amp-Pull-——-Git-远程仓库！"><a href="#Push-amp-Pull-——-Git-远程仓库！" class="headerlink" title="Push &amp; Pull —— Git 远程仓库！"></a>Push &amp; Pull —— Git 远程仓库！</h1><h2 id="Git-Clone"><a href="#Git-Clone" class="headerlink" title="Git Clone"></a>Git Clone</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1802095499&amp;bvid=BV1st421G7GM&amp;cid=1480772400&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit$ <span class="token function">git</span> checkout o/main$ <span class="token function">git</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1352138293&amp;bvid=BV1F6421c7ZK&amp;cid=1480773271&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-Fetch"><a href="#Git-Fetch" class="headerlink" title="Git Fetch"></a>Git Fetch</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> fetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1752238562&amp;bvid=BV1Wx421Q74x&amp;cid=1480773952&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-Pull"><a href="#Git-Pull" class="headerlink" title="Git Pull"></a>Git Pull</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1952144309&amp;bvid=BV1sC41187vQ&amp;cid=1480775059&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="模拟团队合作"><a href="#模拟团队合作" class="headerlink" title="模拟团队合作"></a>模拟团队合作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone$ <span class="token function">git</span> fakeTeamwork <span class="token number">2</span>$ <span class="token function">git</span> commit$ <span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1202177208&amp;bvid=BV16F4m1F7jT&amp;cid=1480776263&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-Push"><a href="#Git-Push" class="headerlink" title="Git Push"></a>Git Push</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit$ <span class="token function">git</span> commit$ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1602148879&amp;bvid=BV1z2421P7cQ&amp;cid=1481286624&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="偏离的历史提交"><a href="#偏离的历史提交" class="headerlink" title="偏离的历史提交"></a>偏离的历史提交</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone$ <span class="token function">git</span> fakeTeamwork$ <span class="token function">git</span> commit$ <span class="token function">git</span> pull <span class="token parameter variable">--rebase</span>$ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1002244414&amp;bvid=BV1Sx4y127Ry&amp;cid=1481287267&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="锁定的-Main"><a href="#锁定的-Main" class="headerlink" title="锁定的 Main"></a>锁定的 Main</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> o/main$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature C2$ <span class="token function">git</span> push origin feature<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1452183439&amp;bvid=BV1zi42197ih&amp;cid=1481287913&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h1 id="关于-origin-和它的周边-——-Git-远程仓库高级操作"><a href="#关于-origin-和它的周边-——-Git-远程仓库高级操作" class="headerlink" title="关于 origin 和它的周边 —— Git 远程仓库高级操作"></a>关于 origin 和它的周边 —— Git 远程仓库高级操作</h1><h2 id="推送主分支"><a href="#推送主分支" class="headerlink" title="推送主分支"></a>推送主分支</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> fetch$ <span class="token function">git</span> rebase o/main side1$ <span class="token function">git</span> rebase side1 side2$ <span class="token function">git</span> rebase side2 side3$ <span class="token function">git</span> rebase side3 main$ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1552023913&amp;bvid=BV1t1421Q7TY&amp;cid=1481288347&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="合并远程仓库"><a href="#合并远程仓库" class="headerlink" title="合并远程仓库"></a>合并远程仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout main$ <span class="token function">git</span> pull$ <span class="token function">git</span> merge side1$ <span class="token function">git</span> merge side2$ <span class="token function">git</span> merge side3$ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1102125280&amp;bvid=BV1qA4m1P7aH&amp;cid=1481288791&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="远程追踪"><a href="#远程追踪" class="headerlink" title="远程追踪"></a>远程追踪</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> side o/main$ <span class="token function">git</span> commit$ <span class="token function">git</span> pull <span class="token parameter variable">--rebase</span>$ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1552262318&amp;bvid=BV1f1421S7bf&amp;cid=1481289372&amp;p=1 scrolling=" no"="" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-push-的参数"><a href="#Git-push-的参数" class="headerlink" title="Git push 的参数"></a>Git push 的参数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin main$ <span class="token function">git</span> push origin foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1852473087&amp;bvid=BV16p42117HK&amp;cid=1481289931&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-push-的参数2"><a href="#Git-push-的参数2" class="headerlink" title="Git push 的参数2"></a>Git push 的参数2</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin main^:foo$ <span class="token function">git</span> push origin foo:main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1352269909&amp;bvid=BV13z421f71v&amp;cid=1481290401&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-fetch-的参数"><a href="#Git-fetch-的参数" class="headerlink" title="Git fetch 的参数"></a>Git fetch 的参数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> fetch origin main~1:foo$ <span class="token function">git</span> fetch origin foo:main$ <span class="token function">git</span> checkout foo$ <span class="token function">git</span> merge main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1752342464&amp;bvid=BV1Rx421Q7Ci&amp;cid=1481290816&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="没有-source-的-source"><a href="#没有-source-的-source" class="headerlink" title="没有 source 的 source"></a>没有 source 的 source</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin :foo$ <span class="token function">git</span> fetch origin :bar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1302306333&amp;bvid=BV1Tu4m1M7X1&amp;cid=1481291330&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h2 id="Git-pull-的参数"><a href="#Git-pull-的参数" class="headerlink" title="Git pull 的参数"></a>Git pull 的参数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> pull origin bar:foo$ <span class="token function">git</span> pull origin main:side<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=1952276544&amp;bvid=BV1xC411t7Ey&amp;cid=1481291545&amp;p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><blockquote><p>一点碎碎念——弄视频真是要了老命<br>    视频是用远程控制软件录屏做的，直接上传到B站报 <code>P1-该视频数据有误，请检查并修复视频数据后重新上传</code>，网上查到导入视频编辑软件再导出就可以了，试了下果然行~<br>    把三十几个视频重新生成好，因为是尊贵的非正式会员所以一天只能上传五个视频，so ~~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令之 git rebase</title>
      <link href="/2024/03/21/git-ming-ling-zhi-git-rebase/"/>
      <url>/2024/03/21/git-ming-ling-zhi-git-rebase/</url>
      
        <content type="html"><![CDATA[<h2 id="git-rebase-参数1-参数2"><a href="#git-rebase-参数1-参数2" class="headerlink" title="git rebase 参数1 参数2"></a>git rebase 参数1 参数2</h2><p>复制一系列提交记录放在另一个地方，注意：并不会改变被接下去的分支指向，但是把HEAD节点指向被复制的节点<br>参数1：要被接下去的节点/分支<br>参数2：如果没写就是从当前的HEAD节点与参数1的交叉点开始到当前的HEAD节点的提交记录复制到参数1后面，如果写了就是参数2与参数1的交叉点开始到参数2的提交记录复制到参数1后面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> foo$ <span class="token function">git</span> commit$ <span class="token function">git</span> commit$ <span class="token function">git</span> checkout main$ <span class="token function">git</span> commit$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> bar$ <span class="token function">git</span> commit$ <span class="token function">git</span> commit$ <span class="token function">git</span> checkout main$ <span class="token function">git</span> commit<span class="token comment"># 参数2未指定，从 main 分支与 foo 分支的交叉点到 main 分支所在的节点的提交记录会复制到 foo 分支所在的节点后面，注意 foo 分支所在的节点并没有变化</span>$ <span class="token function">git</span> rebase foo<span class="token comment"># 参数2指定为 bar，从 bar 分支与 foo 分支的交叉点到 bar 分支所在的节点的提交记录会复制到 foo 分支所在的节点后面，注意 HEAD 由指向 main 变成指向 bar</span>$ <span class="token function">git</span> rebase foo bar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>懒得做动图了，把代码复制到 <a href="https://learngitbranching.js.org/?locale=zh_CN&amp;NODEMO=">learngitbranching沙箱</a> 看看效果吧</p>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令之 git branch -f</title>
      <link href="/2024/03/20/git-ming-ling-zhi-git-branch-f/"/>
      <url>/2024/03/20/git-ming-ling-zhi-git-branch-f/</url>
      
        <content type="html"><![CDATA[<h2 id="git-branch-f-参数1-参数2"><a href="#git-branch-f-参数1-参数2" class="headerlink" title="git branch -f 参数1 参数2"></a>git branch -f 参数1 参数2</h2><p>改变分支指向提交节点，注意，并不会改变当前HEAD指向<br>参数1：是要移动的分支<br>参数2：如果没写就是将参数1指向 HEAD 所在的节点，如果写了就是将参数1指向该参数的节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> foo$ <span class="token function">git</span> commit$ <span class="token function">git</span> checkout main$ <span class="token function">git</span> commit$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> bar$ <span class="token function">git</span> commit$ <span class="token function">git</span> checkout main$ <span class="token function">git</span> commit<span class="token comment"># 参数2未指定，当前 HEAD 指向 main，所以会把 foo 移动到 main 所在的节点</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-f</span> foo<span class="token comment"># 参数2指定了 bar，所以会把 foo 移动到 bar 所在的节点</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-f</span> foo bar<span class="token comment"># 参数2未指定，当前 HEAD 指向 main，所以会把 main 移动到 main 所在的节点，即没有变化</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-f</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>懒得做动图了，把代码复制到 <a href="https://learngitbranching.js.org/?locale=zh_CN&amp;NODEMO=">learngitbranching沙箱</a> 看看效果吧</p>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决npm设置registry.npmmirror.com仍报错registry.npm.taobao.org的问题</title>
      <link href="/2024/03/19/jie-jue-npm-she-zhi-registry-npmmirror-com-reng-bao-cuo-registry-npm-taobao-org-de-wen-ti/"/>
      <url>/2024/03/19/jie-jue-npm-she-zhi-registry-npmmirror-com-reng-bao-cuo-registry-npm-taobao-org-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>早上打算运行电脑里面一个许久没动过的项目，在输入 <code>npm install</code> 时报了一个错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> ERR<span class="token operator">!</span> code CERT_HAS_EXPIRED<span class="token function">npm</span> ERR<span class="token operator">!</span> request to https://registry.npm.taobao.org/yorkie/download/yorkie-2.0.0.tgz failed, reason: certificate has expired<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>嗯 <code>https://registry.npm.taobao.org</code> 过期了</p><p>But</p><p>🤔 我记着我设置的是 <code>https://registry.npmmirror.com/</code> 啊</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> <span class="token function">npm</span> config get registryhttps://registry.npmmirror.com/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>尝试 <code>npm config set strict-ssl false</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> <span class="token function">npm</span> config <span class="token builtin class-name">set</span> strict-ssl <span class="token boolean">false</span><span class="token operator">&gt;</span> <span class="token function">npm</span> cache <span class="token function">clear</span> <span class="token parameter variable">--force</span><span class="token operator">&gt;</span> <span class="token function">npm</span> <span class="token function">install</span><span class="token punctuation">..</span>. // 省略过程added <span class="token number">1560</span> packages <span class="token keyword">in</span> 5m<span class="token number">17</span> packages are looking <span class="token keyword">for</span> funding<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>😀 嘿嘿成了</p><p>不过 <code>npm config set strict-ssl false</code> 是什么意思呢</p><p>查了一下，<code>strict-ssl</code> 是 <code>npm</code> 中用于控制 <code>SSL</code> 证书校验的选项，当其为 <code>true</code> 时，<code>npm</code> 会对连接的服务器的 <code>SSL</code> 证书进行严格的校验，并要求它是由可信的认证机构颁发的。如果校验失败，<code>npm</code> 将无法连接到服务器并会报错；当其为 <code>false</code> 时，则 <code>npm</code> 将不会对服务器的 <code>SSL</code> 证书进行校验，并且即使证书是由不可信的认证机构颁发的也不会报错，这就存在一定的安全风险，所以问题解决完了还是赶紧设置回去吧</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> <span class="token function">npm</span> config <span class="token builtin class-name">set</span> strict-ssl <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>2024.05.09 更新<br>    这次是用 yarn 遇到这个问题啦，把项目中的 <code>yarn.lock</code> 文件删掉再 <code>yarn install</code> 就好了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10 找不到Hyper-V的解决办法</title>
      <link href="/2024/03/18/win10-zhao-bu-dao-hyper-v-de-jie-jue-ban-fa/"/>
      <url>/2024/03/18/win10-zhao-bu-dao-hyper-v-de-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[<p>打算安装 Docker 时发现电脑没有启动 Hyper-V 选项（控制面板-&gt;程序-&gt;启用或关闭 windows 功能）</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1hnuwb118y6j20cs0knjyt.jpg"></p><p>于是百度一下解决啦~~~</p><p>先在桌面新建一个记事本，复制粘贴以下内容，修改文件名后缀为 <code>cmd</code>，右键该文件点击<code>以管理员身份运行</code></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">pushd "%~dp0" dir /b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt for /f %%i in ('findstr /i . hyper-v.txt 2^&gt;nul') do dism /online /norestart /add-package:"%SystemRoot%\servicing\Packages\%%i" del hyper-v.txt Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会自动弹出一个窗口，显示<code>正在处理 XXX</code>，耐心等待几分钟，安装好了后会提示<code>是否立即重新启动计算机？（Y/N）</code>，输入 Y，等重启成功后就可以看到 Hyper-V 选项了</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1hnuwbtlrxlj20bu0ko46a.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于HBuilderX的一些疑难杂症</title>
      <link href="/2024/03/15/guan-yu-hbuilderx-de-yi-xie-yi-nan-za-zheng/"/>
      <url>/2024/03/15/guan-yu-hbuilderx-de-yi-xie-yi-nan-za-zheng/</url>
      
        <content type="html"><![CDATA[<p>以下大部分为非官方来源，属于瞎猫碰上死耗子解法，如果网上找不着就试试吧~~~<br>可能会持续更新，取决于遇到的坑多不多（逃~</p><h2 id="真机-模拟器调试"><a href="#真机-模拟器调试" class="headerlink" title="真机/模拟器调试"></a>真机/模拟器调试</h2><ol><li>检测到当前使用的ADB不支持反向代理，如果出现连接不上的问题，请更换HBuilder自带的ADB进行真机运行或保持手机和电脑在同一个局域网下</li></ol><p>解决：在HBuilderX的安装目录下找到adb.exe（路径大概长这样：HBuilderX.3.8.4.20230531\HBuilderX\plugins\launcher-tools\tools\adbs），双击它，再重启HBuilderX运行</p><ol start="2"><li>本应用无法独立运行，需与HBuilderX搭配使用。<br><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1hnrqmve8wkj20xa0iqgo0.jpg"></li></ol><p>解决：重启！重启！重启！HBuilderX 重启！如果是运行到模拟器也把模拟器重启下</p>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于web-view组件层级过高导致其它视图组件不可视的解决办法</title>
      <link href="/2024/03/15/guan-yu-web-view-zu-jian-ceng-ji-guo-gao-dao-zhi-qi-ta-shi-tu-zu-jian-bu-ke-shi-de-jie-jue-ban-fa/"/>
      <url>/2024/03/15/guan-yu-web-view-zu-jian-ceng-ji-guo-gao-dao-zhi-qi-ta-shi-tu-zu-jian-bu-ke-shi-de-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>当点击左边红色框内的单号时，右边黄色框展示区域显示对应的信息（视频或者PDF）。如果该单号同时存在视频或者PDF，则绿色框单选按钮组显示视频和PDF单选框，如果只存在一种则只显示一种单选框。<br><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1hnrncom665j20jd0eaq4f.jpg"><br><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1hnrnhedhbaj20jg0eb757.jpg"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>布局如下</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;view class="pageContainer"&gt;&lt;view class="sidebar"&gt;&lt;h3 class="orderHeader"&gt;&lt;text&gt;生产单号&lt;/text&gt;&lt;u-button icon="reload" @click="getOrderList"&gt;&lt;/u-button&gt;&lt;/h3&gt;&lt;ul v-if="hasOrder" class="orderList"&gt;&lt;li v-for="(item,index) in orderList" :key="index" :class="{active: activeOrder === index}"@click="clickOrder(item, index)"&gt;&lt;text&gt;{{item}}&lt;/text&gt;&lt;/li&gt;&lt;/ul&gt;&lt;u-empty v-else mode="list" iconSize="36" marginTop="20"&gt;&lt;/u-empty&gt;&lt;/view&gt;&lt;view class="displayArea"&gt;&lt;template v-if="sopInfo.isExist"&gt;&lt;video v-if="radioValue === 'video'" style="width: 100%;height: 100%;" :src="sopUrl" controls loopautoplay&gt;&lt;/video&gt;&lt;scroll-view style="height: 100%;" v-if="radioValue === 'pdf'" scroll-y="true"&gt;&lt;web-view :src="sopUrl" :update-title="false" :webview-styles="webviewStyles"&gt;&lt;/web-view&gt;&lt;/scroll-view&gt;&lt;/template&gt;&lt;dataNull v-else title="暂无相关资料~"&gt;&lt;/dataNull&gt;&lt;/view&gt;&lt;!-- #ifdef H5 --&gt;&lt;u-radio-group class="modeGroup" placement="row" v-model="radioValue" @change="changeRadio"&gt;&lt;template v-for="(r, i) in radioList"&gt;&lt;u-radio v-if="r.show" :customStyle="{marginLeft: '16px'}" labelColor="white" :label="r.label":name="r.name"&gt;&lt;/u-radio :key="i"&gt;&lt;/template&gt;&lt;/u-radio-group&gt;&lt;!-- #endif --&gt;&lt;/view&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意1"><a href="#注意1" class="headerlink" title="注意1"></a>注意1</h2><p>右边黄色区域为一个 <code>web-view</code> 组件，<code>web-view</code> 是一个 web 浏览器组件，可以用来承载网页的容器，会自动铺满整个页面，nvue 使用需要手动指定宽高，即这里 <code>webviewStyles</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default {data() {return {webviewStyles: {width: '',height: '',top: '44px',left: '224px'}            }},    }&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意2"><a href="#注意2" class="headerlink" title="注意2"></a>注意2</h2><p>web-view组件在App和小程序中层级较高，如需要在vue页面中写代码为web-view组件覆盖内容，小程序端无解，只能由web-view的组件自己弹出div，<a href="https://uniapp.dcloud.net.cn/component/web-view.html">官方文档</a>提供了4种解决方法，这里用的是 <code>plus.nativeObj.view</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// radioList是一个存放单选框按钮组数据的数组radioList.forEach((radio, index, list) =&gt; {    radio.view = null   // 这里需把之前渲染的view对象清除    radio.view = new plus.nativeObj.View(radio.name + 'View', {        top: this.topDist + (index * 40) + 'px',        left: this.leftDist + 'px',        height: '30px',        width: '60px',        zIndex: '10'    })    radio.view.drawRect({        color: that.radioValue === radio.name ? 'rgb(41, 121, 255)' : 'gray',        radius: '10px'    }, {        top: '0px',        left: '0px',        width: '100%',        height: '100%'    }, radio.name)    radio.view.drawText(radio.label, {}, {        align: 'center',        color: '#fff'    })    radio.view.addEventListener("click", function(e) {        radio.view.drawRect({            color: 'rgb(41, 121, 255)',            radius: '10px'        }, {}, radio.name)        list[(index + 1) % 2].view.drawRect({            color: 'gray',            radius: '10px'        }, {}, list[(index + 1) % 2].name)        that.changeRadio(radio.name)    }, false)})// 如果是存在视频/PDF就显示视频/PDF单选框（`.show()`），反之就隐藏（`.hide()`）watch: {    radioList: {        deep: true,        handler: function(newValue) {            //#ifdef APP-PLUS            newValue.forEach(item =&gt; {                item.show ? item.view.show() : item.view.hide()            })            //#endif        }    }},// 页面销毁时记得清理closePlusView() {    //#ifdef APP-PLUS    this.radioList.forEach(radio =&gt; {        radio.view.close()    })    //#endif},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
            <tag> APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录 APP 扫描一维码不准确的原因</title>
      <link href="/2024/03/15/ji-lu-app-sao-miao-yi-wei-ma-bu-zhun-que-de-yuan-yin/"/>
      <url>/2024/03/15/ji-lu-app-sao-miao-yi-wei-ma-bu-zhun-que-de-yuan-yin/</url>
      
        <content type="html"><![CDATA[<p><code>plus.barcode.Barcode(domId, filters, styles, autoDecodeCharset)</code></p><p><em><strong>参数：</strong></em></p><ul><li>domId: ( String ) 必选 关联DOM标签的标识<br>系统将查找到此id的DOM标签节点，设置扫码识别控件的位置和大小与其保持一致。</li><li>filters: ( Array[Number] ) 可选 条码类型过滤器<br>条码类型常量数组，默认情况支持QR、EAN13、EAN8类型。 通过此参数可设置扫码识别支持的条码类型（注意：设置支持的条码类型越多，扫描识别速度可能将会降低）。</li><li>styles: ( BarcodeStyles ) 可选 条码识别控件样式<br>用于设置扫码控件在页面中显示的样式，如扫码框、扫码条的颜色等。</li><li>autoDecodeCharset: ( Boolean ) 必选 自动解码字符集<br>  可取值：<ul><li>false - 将二维码解码数据当做utf-8字符集处理，对于非utf-8字符集数据可能会出现乱码</li><li>true - 自动检测二维码解码数据，兼容处理utf-8、GBK、Big5编码格式的字符<br>默认值为false。<br>注意：HBuilderX2.9.5+版本Android平台支持，iOS平台暂不支持。</li></ul></li></ul><p><em><strong>返回值：</strong></em><br>Barcode : 扫码识别控件对象</p><p><em><strong>注意</strong></em><br>filters默认情况支持QR、EAN13、EAN8类型，而项目用到的一维码是CODE128类型，所以应该修改一下filters</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">plus<span class="token punctuation">.</span>barcode<span class="token punctuation">.</span>Barcode</span><span class="token punctuation">(</span><span class="token string">'bcid'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>plus<span class="token punctuation">.</span>barcode<span class="token punctuation">.</span><span class="token constant">QR</span><span class="token punctuation">,</span>plus<span class="token punctuation">.</span>barcode<span class="token punctuation">.</span><span class="token constant">CODE39</span><span class="token punctuation">,</span>plus<span class="token punctuation">.</span>barcode<span class="token punctuation">.</span><span class="token constant">CODE128</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
            <tag> APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zb-table 动态显示操作按钮</title>
      <link href="/2024/03/14/zb-table-dong-tai-xian-shi-cao-zuo-an-niu/"/>
      <url>/2024/03/14/zb-table-dong-tai-xian-shi-cao-zuo-an-niu/</url>
      
        <content type="html"><![CDATA[<p>在uni-app开发时遇到一个需求，需要用表格显示内容，有一列操作列要求根据某列内容显示对应操作</p><p><code>例子：有完成时间的行操作列不能显示【删除】、【完成】按钮</code></p><p>在 DCLOUD 插件市场下载安装 <a href="https://ext.dcloud.net.cn/plugin?id=7511">zb-table</a> 插件，查看文档，没找到可以动态显示操作列按钮的示例，于是研究源代码，发现操作列的渲染由一个 permission 函数执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">permission</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> renders<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>permissionBtn <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>permissionBtn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">permissionBtn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> renders<span class="token punctuation">,</span> index<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> renders<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>permissionBtn</code> 是一个 <code>props</code>，是一个返回要渲染的操作按钮数组的函数，用法如下</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// 父组件（省略了一些代码）&lt;zb-table :columns="columns" :permissionBtn="permissionFun" @complete="completeFun" @delete="deleteFun" ... &gt;&lt;/zb-table&gt;columns:[    ...    {        type: 'operation',        label: '操作',        align: 'center',        fixed: true,        width: 150,        renders: [{            name: '完成',            type: 'primary',            func: "complete"        }, {            name: '删除',            type: 'warn',            func: "delete",        }]    }]permissionFun( row, renders, index ) {    if (没有完成时间) {// 根据上面例子的判断条件，返回两个按钮        return [renders[0], renders[1]]    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1hnqcol1nenj20i004p75n.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/08/hello-world/"/>
      <url>/2024/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less 中使用 url 设置问题</title>
      <link href="/2023/02/28/less-zhong-shi-yong-url-she-zhi-wen-ti/"/>
      <url>/2023/02/28/less-zhong-shi-yong-url-she-zhi-wen-ti/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.content</span> <span class="token punctuation">{</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"@/assets/imgs/logo.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>报错</p><pre class="line-numbers language-node" data-language="node"><code class="language-node"> ERROR  Failed to compile with 1 error                                             09:49:35This relative module was not found:* ./@/assets/imgs/logo.png in ./node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!./node_modules/postcss-loader/src??ref--10-oneOf-1-2!./node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/views/Login.vue?vue&amp;type=style&amp;index=0&amp;id=26084dc2&amp;lang=less&amp;scoped=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token selector">.content(<span class="token variable">@url</span>)</span> <span class="token punctuation">{</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> ~<span class="token string">'url("@/assets/imgs/logo.png")'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意 <code>(@url)</code> | <code>~'url()'</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LESS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置git账号</title>
      <link href="/2023/02/25/docker-pei-zhi-git-zhang-hao/"/>
      <url>/2023/02/25/docker-pei-zhi-git-zhang-hao/</url>
      
        <content type="html"><![CDATA[<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>在 Docker 里面创建的项目，上传 Github 失败</p><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">~/r/mangosteen-1 # ❯❯❯ git push -u origin maingit@github.com: Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>机翻一下就是：权限被拒绝（公钥）</p><h2 id="怎样做"><a href="#怎样做" class="headerlink" title="怎样做"></a>怎样做</h2><p>在 Docker 环境里面的终端输入以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-agent<span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>ssh-agent <span class="token parameter variable">-s</span><span class="token variable">)</span></span>ssh-keygen <span class="token parameter variable">-o</span> <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">"用户名"</span>ssh-add ~/.ssh/id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一直回车，好了之后可以在 Docker 客户端看到 ssh 目录里面有3个文件</p><pre class="line-numbers language-none"><code class="language-none">id_rsaid_rsa.pub // 复制这个文件夹里面的内容known_hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>登录 Github<br>Settings<br>=》 SSH and GPG keys<br>=》 New SSH key</p><ul><li>Title（标识名）</li><li>Key（id_rsa.pub 文件里面的内容）</li></ul><p>回到 Docker 环境里面的终端输入 <code>ssh -T git@github.com</code> 出现以下语句表示配置成功</p><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">~/repos # ❯❯❯ ssh -T git@github.com   Hi April-cl! You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_38537503/article/details/119571562">Docker中配置Git环境</a></p><p>快一年没写啦~~~，可真懒啊 🫥</p>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> git </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>slice、substr、substring、splice、split的用法</title>
      <link href="/2022/04/02/slice-substr-substring-splice-split-de-yong-fa/"/>
      <url>/2022/04/02/slice-substr-substring-splice-split-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h1><p>截取字符串或数组，并返回一个新的字符串或数组（不改变原字符串或数组）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="substr（不建议使用）"><a href="#substr（不建议使用）" class="headerlink" title="substr（不建议使用）"></a>substr（不建议使用）</h1><p>截取字符串，并返回一个新的字符串（不会改变原数组）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h1><p>截取字符串，并返回一个新的字符串（不会改变原数组）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与 <code>slice</code> 的区别：</p><ul><li><p>参数为正数的时候结果没区别</p></li><li><p>参数为负时，<code>slice</code> 倒数计数，<code>substring</code> 将负数置为0</p></li><li><p><code>start</code> 位置在 <code>end</code> 之后时 <code>slice</code> 返回空字符串，<code>substring</code> 仍返回两个参数位置字符串</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyz'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str.slice(3)'</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str.substring(3)'</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str.slice(3, 8)'</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str.substring(3, 8)'</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str.slice(3, 1)'</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str.substring(3, 1)'</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str.slice(-3)'</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str.substring(-3)'</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str.slice(-3, 7)'</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str.substring(-3, 7)'</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// str.slice(3) defghijklmnopqrstuvwxyz</span><span class="token comment">// str.substring(3) defghijklmnopqrstuvwxyz</span><span class="token comment">// str.slice(3, 8) defgh</span><span class="token comment">// str.substring(3, 8) defgh</span><span class="token comment">// str.slice(3, 1) </span><span class="token comment">// str.substring(3, 1) bc</span><span class="token comment">// str.slice(-3) xyz</span><span class="token comment">// str.substring(-3) abcdefghijklmnopqrstuvwxyz</span><span class="token comment">// str.slice(-3, 7) </span><span class="token comment">// str.substring(-3, 7) abcdefg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h1><p>用于数组操作，可以对数组中的元素进行删除、插入和替换（会改变原数组）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> num<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="split"><a href="#split" class="headerlink" title="split"></a>split</h1><p>以基于指定的分隔符将一个字符串分割成 多个子字符串，并将结果放在一个数组中（不会改变原数组）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'分隔字符串'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一道深拷贝面试题中学到的知识记录</title>
      <link href="/2022/04/01/cong-yi-dao-shen-kao-bei-mian-shi-ti-zhong-xue-dao-de-zhi-shi-ji-lu/"/>
      <url>/2022/04/01/cong-yi-dao-shen-kao-bei-mian-shi-ti-zhong-xue-dao-de-zhi-shi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>以前心里一直很抵触刷题，不过最近看了不少面试题才发现通过这些题反倒是有不少收获，有空看看就当是夯实基础吧 ~</p><p>在理解深/浅拷贝之前先弄明白对象赋值。</p><p>当我们把一个对象赋值给一个新的变量时，赋的其实<strong>是该对象的在栈中的地址，而不是堆中的数据</strong>。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'ha'</span><span class="token punctuation">,</span>    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj0 <span class="token operator">=</span> objobj0<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">'haha'</span>obj0<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token boolean">false</span>obj0<span class="token punctuation">.</span>c<span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj0'</span><span class="token punctuation">,</span> obj0<span class="token punctuation">)</span><span class="token comment">// obj {a: 1, b: 'haha', c: {d: false, e: 2}}</span><span class="token comment">// obj0 {a: 1, b: 'haha', c: {d: false, e: 2}}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="深拷贝和浅拷贝的定义"><a href="#深拷贝和浅拷贝的定义" class="headerlink" title="深拷贝和浅拷贝的定义"></a>深拷贝和浅拷贝的定义</h1><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址，所以<strong>如果其中一个对象改变了这个地址，就会影响到另一个对象</strong>。</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0uh2h04q6j20s10b4dhi.jpg" alt="浅拷贝.png"></p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象，且<strong>修改新对象不会影响原对象</strong>。</p><p>对于上面的例子</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0uh48ofijj20w10b40uc.jpg" alt="深拷贝.png"></p><h1 id="实现浅拷贝"><a href="#实现浅拷贝" class="headerlink" title="实现浅拷贝"></a>实现浅拷贝</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shallowClone</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'ha'</span><span class="token punctuation">,</span>    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>obj1<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">'haha'</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token boolean">false</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj1'</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token comment">// obj {a: 1, b: 'ha', c: {d: false, e: 2}}</span><span class="token comment">// obj1 {a: 1, b: 'haha', c: {d: false, e: 2}}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实现深拷贝"><a href="#实现深拷贝" class="headerlink" title="实现深拷贝"></a>实现深拷贝</h1><h2 id="用JSON"><a href="#用JSON" class="headerlink" title="用JSON"></a>用JSON</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>缺点：</p><ul><li><p>不支持 Date、正则、undefined、函数等数据（记忆点：JSON存储的数据类型）</p></li><li><p>不支持引用（环状结构，<code>obj.self=obj</code>）</p></li></ul><h2 id="用递归"><a href="#用递归" class="headerlink" title="用递归"></a>用递归</h2><p>关于实现深拷贝代码随便一搜就有了，但一大串代码本小白看得云里雾里，下面一步一步解释，虽繁琐，但有助于理解。</p><h3 id="1-判断基本类型-引用类型"><a href="#1-判断基本类型-引用类型" class="headerlink" title="1. 判断基本类型 | 引用类型"></a>1. 判断基本类型 | 引用类型</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 这里先空着，接下来要针对类做判断</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-判断类（函数-数组-正则-日期-普通对象）"><a href="#2-判断类（函数-数组-正则-日期-普通对象）" class="headerlink" title="2. 判断类（函数 | 数组 | 正则 | 日期 | 普通对象）"></a>2. 判断类（函数 | 数组 | 正则 | 日期 | 普通对象）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result  <span class="token comment">// 深拷贝结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这里先空着，接下来要针对函数类型做判断</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 或者 result = new Array()</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 或者 result= new RegExp(obj.source, obj.flags)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">// 日期类型-0变成时间戳</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-判断普通函数-箭头函数"><a href="#3-判断普通函数-箭头函数" class="headerlink" title="3. 判断普通函数 | 箭头函数"></a>3. 判断普通函数 | 箭头函数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result  <span class="token comment">// 深拷贝结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 有 prototype 就是普通函数</span>                <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 或者 result = new Array()</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 或者 result= new RegExp(obj.source, obj.flags)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">// 日期类型-0变成时间戳</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment">// 这里只考虑到第一层属性</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-考虑更深层属性（递归）"><a href="#4-考虑更深层属性（递归）" class="headerlink" title="4. 考虑更深层属性（递归）"></a>4. 考虑更深层属性（递归）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result  <span class="token comment">// 深拷贝结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 有 prototype 就是普通函数</span>                <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 或者 result = new Array()</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 或者 result= new RegExp(obj.source, obj.flags)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">// 日期类型-0变成时间戳</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-考虑环状引用（obj-self-obj）"><a href="#5-考虑环状引用（obj-self-obj）" class="headerlink" title="5. 考虑环状引用（obj.self=obj）"></a>5. 考虑环状引用（<code>obj.self=obj</code>）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 后面回答为什么要用 Map</span><span class="token keyword">function</span> <span class="token function">deepClone</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result  <span class="token comment">// 深拷贝结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 有 prototype 就是普通函数</span>                <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 或者 result = new Array()</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 或者 result= new RegExp(obj.source, obj.flags)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">// 日期类型-0变成时间戳</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> result<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环状引用即对象的属性间接或直接的引用了自身导致递归进入死循环导致栈内存溢出，所以需要另外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中找，有没有拷贝过这个对象，如果有的话直接返回，如果没有的话继续拷贝。那么这个存储空间的数据格式应该为 <code>key-value</code> 形式，并且 <code>key</code> 可能是引用类型，所以选择 <code>Map</code> 这种数据结构。</p><h3 id="6-考虑-map-应该在哪声明"><a href="#6-考虑-map-应该在哪声明" class="headerlink" title="6. 考虑 map 应该在哪声明"></a>6. 考虑 map 应该在哪声明</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'ha'</span><span class="token punctuation">,</span>    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>obj1<span class="token punctuation">.</span>self <span class="token operator">=</span> obj1console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj1'</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj2'</span><span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后会发现 <code>obj2</code> 也有 <code>self</code> 属性，所以 <code>map</code> 不该声明为全局变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result  <span class="token comment">// 深拷贝结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 有 prototype 就是普通函数</span>                <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 或者 result = new Array()</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 或者 result= new RegExp(obj.source, obj.flags)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">// 日期类型-0变成时间戳</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> result<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-考虑拷贝应该是拷贝自身属性"><a href="#7-考虑拷贝应该是拷贝自身属性" class="headerlink" title="7. 考虑拷贝应该是拷贝自身属性"></a>7. 考虑拷贝应该是拷贝自身属性</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result  <span class="token comment">// 深拷贝结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 有 prototype 就是普通函数</span>                <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 或者 result = new Array()</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 或者 result= new RegExp(obj.source, obj.flags)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">// 日期类型-0变成时间戳</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> result<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此算是基本结束了，一个完整的深拷贝应当还要考虑更多的情况（如跨 iframe），这里只是实现了一些基本的功能，不过在这个推理过程我受益良多：</p><ul><li><p>判断数据类型和对象类型</p></li><li><p>全局变量的影响</p></li><li><p>Map 用法</p></li><li><p>普通函数和箭头函数区别</p></li><li><p>递归思维</p></li><li><p>考虑问题应当严谨，既要向前多走一步，还要往后多看一眼</p></li></ul><h1 id="使用-lodash-库"><a href="#使用-lodash-库" class="headerlink" title="使用 lodash 库"></a>使用 lodash 库</h1><h2 id="clone-方法"><a href="#clone-方法" class="headerlink" title="_.clone 方法"></a>_.clone 方法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> objects <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string-property property">'a'</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">'b'</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> shallow <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cloneDeep-方法"><a href="#cloneDeep-方法" class="headerlink" title="_.cloneDeep 方法"></a>_.cloneDeep 方法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> objects <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string-property property">'a'</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">'b'</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> deep <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deep<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 自定义指令</title>
      <link href="/2022/03/27/vue-zi-ding-yi-zhi-ling/"/>
      <url>/2022/03/27/vue-zi-ding-yi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<p>在之前 Vue 学习中有篇<a href="https://april-cl.github.io/2021/08/26/xiao-bai-cai-bi-ji-vue-er-zhi-ling/">笔记</a>记录了项目中常用的内置指令，此外 Vue 也允许注册自定义指令。</p><h1 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h1><p>在全局作用域下自定义指令，同时这个指令也能够用于全局，即任何组件都能够使用这个全局指令。如要声明多个全局指令，多次调用 <code>Vue.directive</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明全局指令，注意在全局作用域下</span><span class="token comment">// 注册</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">update</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">componentUpdated</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">unbind</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 注册 (指令函数)</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive-fun'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 这里将会被 `bind` 和 `update` 调用</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// getter，返回已注册的指令</span><span class="token keyword">var</span> myDirective <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">)</span><span class="token comment">// 使用全局指令，在任何组件中都可以使用 v-my-directive</span><span class="token operator">&lt;</span>myComponent v<span class="token operator">-</span>my<span class="token operator">-</span>directive <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>myComponent<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="局部自定义指令"><a href="#局部自定义指令" class="headerlink" title="局部自定义指令"></a>局部自定义指令</h1><p>在某个组件 Vue 组件下进行声明，只能在该 Vue 组件的实例中使用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明局部指令</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>        <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string-property property">"my-directive"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function-variable function">update</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function-variable function">componentUpdated</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function-variable function">unbind</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token comment">// 只能在该组件中使用局部指令</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>my<span class="token operator">-</span>directive <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意区分：全局是 <code>Vue.directive</code>，局部是 <code>directives</code></p></blockquote><h1 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h1><p>摘抄自<a href="https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0">文档</a></p><ul><li><p>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</p></li><li><p>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</p></li><li><p>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。可以通过比较更新前后的值来忽略不必要的模板更新。</p></li><li><p>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</p></li><li><p>unbind：只调用一次，指令与元素解绑时调用。</p></li></ul><h1 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h1><ul><li>el：指令所绑定的元素，可以用来直接操作 DOM。</li><li>binding：一个对象，包含以下 property：<ul><li>name：指令名，不包括 v- 前缀。</li><li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li><li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li><li>expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li><li>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li><li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li></ul></li><li>vnode：Vue 编译生成的虚拟节点。</li><li>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span>stringify    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>      <span class="token string">'name: '</span>       <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br&gt;'</span> <span class="token operator">+</span>      <span class="token string">'value: '</span>      <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br&gt;'</span> <span class="token operator">+</span>      <span class="token string">'expression: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br&gt;'</span> <span class="token operator">+</span>      <span class="token string">'argument: '</span>   <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>arg<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br&gt;'</span> <span class="token operator">+</span>      <span class="token string">'modifiers: '</span>  <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br&gt;'</span> <span class="token operator">+</span>      <span class="token string">'vnode keys: '</span> <span class="token operator">+</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#hook-arguments-example'</span><span class="token punctuation">,</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'hello!'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hook-arguments-example<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-demo:</span>foo.a.b</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0onjhp1u8j20ci06imz8.jpg"></p><h1 id="指令的作用以及使用场景"><a href="#指令的作用以及使用场景" class="headerlink" title="指令的作用以及使用场景"></a>指令的作用以及使用场景</h1><ul><li>用于 DOM 操作</li></ul><p>Vue 组件/实例的主要用于数据绑定、事件监听、DOM 更新，而指令的作用主要是完成原生DOM操作。</p><ul><li>减少重复</li></ul><p>当我们需要重复多次相同的原生 DOM 操作，或者是进行一些比较复杂的原生 DOM 操作时，可以借助指令来完成。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 对 data 做了什么</title>
      <link href="/2022/03/23/vue-de-data-shu-xing/"/>
      <url>/2022/03/23/vue-de-data-shu-xing/</url>
      
        <content type="html"><![CDATA[<p>在 Vue 项目中，通过 <code>let vm = new Vue({data: myData})</code> 就可以在当数据发生变化后，使用到该数据的视图也会相应进行自动更新，这是为什么呢？</p><p>本文不从源码分析 Vue 对 data 做了什么（毕竟我也读不懂源码😜），只为记录学习到的研究方法，有时，方法比知识本身更重要不是么（授人以鱼不如授人以渔）</p><p>首先，这里卖个关子，撇开 Vue，学几个 ES6 的新语法</p><h1 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter / setter"></a>getter / setter</h1><p>get 语法将对象属性绑定到查询该属性时将被调用的函数</p><p>当尝试设置属性时，set 语法将对象属性绑定到要调用的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">_num</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_num <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_num <span class="token operator">=</span> n <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>num<span class="token punctuation">)</span>obj<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0kz7l4zitj207c04hq3l.jpg"></p><p>大白话讲它们的用法就是 getter 调用时不加括号的函数，setter 用 <code>= xxx</code> 对属性赋值</p><h1 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty()</a> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</p><p>它的语法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在有一个需求，data 对象的 n 属性值不能小于0</p><p>结合 getter / setter 的用法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>data1<span class="token punctuation">.</span>_n <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// _n 用来偷偷存储 n 的值</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_n  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_n <span class="token operator">=</span> value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">需求一：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data1<span class="token punctuation">.</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>data1<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">需求一：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data1<span class="token punctuation">.</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 设置为 -1 失败</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>data1<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">需求一：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data1<span class="token punctuation">.</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 设置为 1 成功</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0kziyrdnuj20ea084mzh.jpg" alt="需求一.png"></p><p>倘若这里直接修改 <code>data1._n</code> 呢？</p><p>可以发现 <code>data1.n</code> 也被修改了</p><p>考虑将 <code>_n</code> 包装为一个匿名对象的属性，通过代理函数访问</p><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data2 <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 括号里是匿名对象，无法访问</span><span class="token keyword">function</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span>n    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span>      data<span class="token punctuation">.</span>n <span class="token operator">=</span> value    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> obj  <span class="token comment">// obj 就是代理</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">需求二：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data2<span class="token punctuation">.</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>data2<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">需求二：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data2<span class="token punctuation">.</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，设置为 -1 失败</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>data2<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">需求二：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data2<span class="token punctuation">.</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，设置为 1 成功</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0l0bqv7oqj20cy097gob.jpg" alt="需求二.png"></p><p>假如先定义 <code>myData = {n:0}</code>，再将 <code>myData</code> 对象传递给匿名对象（<code>data2 = proxy({ data:myData })</code>），则仍可以通过 <code>myData.n</code> 来修改 <code>data2.n</code> 的值，所以需要对代理接收的数据进行监听</p><h1 id="数据监听"><a href="#数据监听" class="headerlink" title="数据监听"></a>数据监听</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">let</span> data3 <span class="token operator">=</span> <span class="token function">proxy2</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span>myData <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">proxy2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> data<span class="token punctuation">.</span>n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> value    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>newValue<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span>      value <span class="token operator">=</span> newValue    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 就加了上面几句，这几句话会监听 data</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span>n    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>      data<span class="token punctuation">.</span>n <span class="token operator">=</span> value    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> obj <span class="token comment">// obj 就是代理</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">需求三：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data3<span class="token punctuation">.</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>myData<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">需求三：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data3<span class="token punctuation">.</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，设置为 -1 失败了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>myData<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">需求三：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data3<span class="token punctuation">.</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，设置为 1 成功了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0l0q6ntybj20ca0djgpj.jpg" alt="需求三.png"></p><h1 id="Vue-的-data"><a href="#Vue-的-data" class="headerlink" title="Vue 的 data"></a>Vue 的 data</h1><p>现在，回过头来看看 <code>let vm = new Vue({data: myData})</code> 做了什么</p><ol><li><p>让 <code>vm</code> 成为 <code>myData</code> 的代理，由 <code>vm</code> 全权负责 <code>myData</code> 对象的属性读写</p></li><li><p>对 <code>myData</code> 的所有属性进行监听，当 <code>myData</code> 的属性发生变化则通知 <code>vm</code> 调用 <code>render(data)</code> 更新 UI</p></li></ol><h1 id="Vue-set-和-this-set"><a href="#Vue-set-和-this-set" class="headerlink" title="Vue.set 和 this.$set"></a>Vue.set 和 this.$set</h1><p>看前面 <code>Object.defineProperty()</code> 的用法可以知道必须要有一个 <code>prop</code> 才可以监听代理 obj[prop]，在Vue 文档中 [Vue 示例] -&gt; [数据与方法] 一节中也提及 </p><blockquote><p>当一个 Vue 实例被创建时，它将 data 对象中的所有的 property 加入到 Vue 的响应式系统中，比如：<code>var vm = new Vue({ data: { a: 1 }})</code>。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。当这些数据改变时，视图会进行重渲染。值得注意的是只有当实例被创建时就已经存在于 data 中的 property 才是响应式的。也就是说如果你添加一个新的 property，比如：<code>vm.b = 'hi'</code> 那么对 b 的改动将不会触发任何视图的更新。如果你知道你会在晚些时候需要一个 property，但是一开始它为空或不存在，那么你仅需要设置一些初始值。</p></blockquote><p>但如果一开始不知道这个 <code>property</code>，则可以通过 <code>Vue.set()</code> 或 <code>vm.$set()</code> 动态添加</p><p>作用：</p><ul><li><p>新增 property</p></li><li><p>自动创建代理和监听</p></li><li><p>触发 UI 更新（但不会立即更新）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 的伪类和伪元素</title>
      <link href="/2022/03/17/css-de-wei-lei-he-wei-yuan-su/"/>
      <url>/2022/03/17/css-de-wei-lei-he-wei-yuan-su/</url>
      
        <content type="html"><![CDATA[<p>昨天在写文章的时候发现对伪类和伪元素的概念有些混淆，查阅一番有所收获，记一下~</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>伪类即假的类，表示被选择元素的某种状态，通常可以添加类来达到效果，如 <code>:hover</code>。</p><p>伪元素即假元素，表示被选择元素的某个部分，这个部分看起来像一个独立的元素，换句话说通常需要通过添加元素才能达到效果，如 <code>::before</code>。</p><h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><p>在 CSS3 中，规定了伪类用一个冒号（:）表示，伪元素用两个冒号表示（::）。但除了 selection，其余四个伪元素选择器已经在 CSS2 中存在且和伪类用的是一样的单冒号表示的。为了向下兼容，现在的浏览器中伪元素选择器用单冒号和双冒号都可以。在没有兼容问题的情况下，建议 CSS3 标准来开发。</p><p>下面举几个栗子来帮助消化上面的文字</p><p>例 1：将一行字符串的首字母变成红色</p><p>现在不用伪元素应该如何实现？用 CSS slector 选择？想了一晚上也没想出来，既然没法选择也就没法添加一个类来改变首字母的颜色。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>I am snow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加元素试试，如下，创建一个元素 span 将首字母包裹起来，进而改变其颜色，成功了。这里，关键点在于我们创建了新的元素达到了::first-letter的作用，且不能通过添加其他类来实现这一效果，因此将::first-letter叫做伪元素而不是伪类。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value css language-css"><span class="token punctuation">{</span><span class="token punctuation">{</span></span></span></span> <span class="token attr-name"><span class="token namespace">color:</span></span> <span class="token attr-name">red</span> <span class="token attr-name">}}</span><span class="token punctuation">&gt;</span></span>I<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> am snow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例 2: 如下要将 I am snow 这句话变为红色</p><p>很简单用:first-child，同样添加一个类试试，显然很容易达到同样效果，我们并没有创建新的元素只是添加了一个类.red-line，因此将:first-child叫做伪类而不是伪元素，尽管它和::first-letter在语义上十分相似。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">div:first-child { color: red;}或.red-line {   color: red;}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red-line<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>I am snow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个例子我从这篇文章《<a href="https://juejin.cn/post/6844903810951806989">伪类与伪元素的区别</a>》抄录过来的，对这两者的区别也是在看过这两个例子后豁然开朗的 🙂</p><h1 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h1><ul><li><p><code>::before</code>：创建一个伪元素，其将成为匹配选中的元素的第一个子元素。常通过 <code>content</code> 属性来为一个元素添加修饰性的内容。此元素默认为行内元素。</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">&gt;</span></span>一些引用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">&gt;</span></span>, 他说, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">&gt;</span></span>比没有好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">&gt;</span></span>。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">q::before</span> <span class="token punctuation">{</span>   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"«"</span><span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">q::after</span> <span class="token punctuation">{</span>   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"»"</span><span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0g4xonn0ij208c00umx7.jpg"></p></li><li><p><code>::after</code>：用来创建一个伪元素，作为已选中元素的最后一个子元素。通常会配合 <code>content</code> 属性来为该元素添加装饰内容。这个虚拟元素默认是行内元素。</p></li><li><p><code>::first-letter</code>：会选中块级元素第一行的第一个字母，并且文字所处的行之前没有其他内容（如图片和内联的表格）。</p></li><li><p><code>::first-line</code>：在块级元素的第一行应用样式。第一行的长度取决于很多因素，包括元素宽度，文档宽度和文本的文字大小。</p></li><li><p><code>::section</code>：应用于文档中被用户高亮的部分（比如使用鼠标或其他选择设备选中的部分）。</p></li><li><p><code>::slotted()</code>：用于选定那些被放在 HTML模板 中的元素。</p></li><li><p><code>::placehoder</code>：可以选择一个表单元素的占位文本，它允许开发者和设计师自定义占位文本的样式。</p></li></ul><h1 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h1><h2 id="状态类伪类"><a href="#状态类伪类" class="headerlink" title="状态类伪类"></a>状态类伪类</h2><ul><li><p><code>:link</code>：正常的链接，即未被点击时</p></li><li><p><code>:visited</code>：点击后</p></li><li><p><code>:hover</code>：悬停时</p></li><li><p><code>:active</code>：被激活时</p></li><li><p><code>:focus</code>：聚焦时</p></li></ul><p>为了可以正确地渲染链接元素的样式，<code>:link</code> 伪类选择器应当放在其他伪类选择器的前面，并且遵循LVHA的先后顺序，即：<code>:link</code> — <code>:visited</code> — <code>:hover</code> — <code>:active</code></p><h2 id="结构类伪类"><a href="#结构类伪类" class="headerlink" title="结构类伪类"></a>结构类伪类</h2><ul><li><p><code>:not()</code>：用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为反选伪类</p> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 选择所有不是段落（p）的元素 */</span><span class="token selector">:not(p)</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>:first-child</code>：表示在一组兄弟元素中的第一个元素</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This text is selected!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This text isn't selected.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>This text isn't selected: it's not a `p`.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This text isn't selected.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p:first-child</span> <span class="token punctuation">{</span>   <span class="token property">color</span><span class="token punctuation">:</span> lime<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>   <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0fmpvb8eqj208s05r3zl.jpg"></p></li><li><p><code>:last-child</code>：代表父元素的最后一个子元素</p></li><li><p><code>:only-child</code>：匹配没有任何兄弟元素的元素</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>I am a lonely only child.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>I have siblings.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>So do I!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>I also have siblings, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>but this is an only child.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">main :only-child</span> <span class="token punctuation">{</span>   <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0g4uf09glj208q03gjs3.jpg"></p></li><li><p><code>:nth-child(n)</code>：匹配第n个元素</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Span 1!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Span 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Span 3!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Span 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Span 5!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Span 6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Span 7!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.first span:nth-child(2n+1)</span> <span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> lime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0fmp7atouj208m01lt92.jpg"></p></li><li><p><code>:nth-last-child(n)</code>：倒数第n个元素</p></li><li><p><code>:first-of-type</code>：表示一组兄弟元素中其类型的第一个元素</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This `div` is first!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>nested `span` is first<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>nested `em` is first<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>, but this <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>nested `em` is last<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>nested `span` gets styled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>This `b` qualifies!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>This is the final `div`.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">article :first-of-type</span> <span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0fmqady4qj208t04l75p.jpg"></p></li><li><p><code>:last-of-type</code>：表示了在（它父元素的）子元素列表中，最后一个给定类型的元素</p></li><li><p><code>:only-of-type</code>：代表了任意一个元素，这个元素没有其他相同类型的兄弟元素</p></li><li><p><code>:nth-of-type(n)</code>：针对具有一组兄弟节点的标签, 用 n 来筛选出在一组兄弟节点的位置</p></li><li><p><code>:nth-last-of-type(n)</code>：特定类型倒数第n个</p></li><li><p><code>:target</code>：代表一个唯一的页面元素(目标元素)，其id 与当前URL片段匹配</p></li><li><p><code>:empty</code>：代表没有子元素的元素。子元素只可以是元素节点或文本（包括空格）。注释或处理指令都不会产生影响</p></li></ul><h2 id="表单相关伪类"><a href="#表单相关伪类" class="headerlink" title="表单相关伪类"></a>表单相关伪类</h2><ul><li><p><code>:checked</code>：表示任何处于选中状态的 radio (<code>&lt;input type="radio"&gt;</code>), checkbox (<code>&lt;input type="checkbox"&gt;</code>) 或(“select”) 元素中的 option HTML 元素(“option”)</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-input<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>No<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt-in<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt-in<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Check me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-select<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fruit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Apples<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Grapes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opt3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Pears<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input:checked + label</span> <span class="token punctuation">{</span>   <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input[type="radio"]:checked</span> <span class="token punctuation">{</span>   <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 3px orange<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input[type="checkbox"]:checked</span> <span class="token punctuation">{</span>   <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 3px hotpink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">option:checked</span> <span class="token punctuation">{</span>   <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 3px lime<span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0g53mslz3j209n04awes.jpg"></p></li><li><p><code>:disabled</code>：表示任何被禁用的元素</p></li><li><p><code>:enabled</code>：表示任何被启用的元素</p></li><li><p><code>:required</code>：表示任意设置了required属性的 <code>&lt;input&gt;</code>，<code>&lt;select&gt;</code>, 或 <code>&lt;textarea&gt;</code> 元素</p></li><li><p><code>:read-only</code>:表示元素不可被用户编辑的状态（如锁定的文本输入框）</p></li><li><p><code>:valid</code>：表示内容验证正确的 <code>&lt;input&gt;</code> 或其他 <code>&lt;form&gt;</code> 元素</p></li><li><p><code>:invalid</code>：表示任意内容未通过验证的 <code>&lt;input&gt;</code> 或其他 <code>&lt;form&gt;</code> 元素</p></li><li><p><code>:optional</code>：表示任意没有required属性的<code> &lt;input&gt;</code>，<code>&lt;select&gt;</code> 或 <code>&lt;textarea&gt;</code> 元素使用它</p></li><li><p><code>:default</code>：表示一组相关元素中的默认表单元素</p></li><li><p><code>:in-range</code>：代表一个 <code>&lt;input&gt;</code> 元素，其当前值处于属性 min 和max 限定的范围之内</p></li><li><p><code>:out-of-range</code>：表示一个 <code>&lt;input&gt;</code> 元素，其当前值处于属性 min 和 max 限定的范围外</p></li><li><p><code>:indeterminate</code>：表示状态不确定的表单元素</p></li><li><p><code>:scope</code>：表示作为选择器要匹配的参考点的元素</p></li></ul><h2 id="其他伪类"><a href="#其他伪类" class="headerlink" title="其他伪类"></a>其他伪类</h2><ul><li><p><code>:root</code>：匹配文档树的根元素。对于 HTML 来说，:root 表示 <code>&lt;html&gt;</code> 元素，除了优先级更高之外，与 html 选择器相同</p></li><li><p><code>:fullscreen</code>：应用于当前处于全屏显示模式的元素。 它不仅仅选择顶级元素，还包括所有已显示的栈内元素</p></li><li><p><code>:dir()</code>：匹配特定文字书写方向的元素</p></li><li><p><code>:lang()</code>：基于元素语言来匹配页面元素</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">&gt;</span></span>This English quote has a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">&gt;</span></span>nested<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">&gt;</span></span> quote inside.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fr<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">&gt;</span></span>This French quote has a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">&gt;</span></span>nested<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">&gt;</span></span> quote inside.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>de<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">&gt;</span></span>This German quote has a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">&gt;</span></span>nested<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">&gt;</span></span> quote inside.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:lang(en) &gt; q</span> <span class="token punctuation">{</span> <span class="token property">quotes</span><span class="token punctuation">:</span> <span class="token string">'\201C'</span> <span class="token string">'\201D'</span> <span class="token string">'\2018'</span> <span class="token string">'\2019'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">:lang(fr) &gt; q</span> <span class="token punctuation">{</span> <span class="token property">quotes</span><span class="token punctuation">:</span> <span class="token string">'« '</span> <span class="token string">' »'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">:lang(de) &gt; q</span> <span class="token punctuation">{</span> <span class="token property">quotes</span><span class="token punctuation">:</span> <span class="token string">'»'</span> <span class="token string">'«'</span> <span class="token string">'\2039'</span> <span class="token string">'\203A'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0g5zehlr3j20ct02a3ys.jpg"></p></li></ul><p>参考文章：</p><p><a href="https://juejin.cn/post/6976646049456717838">一篇搞清伪类和伪元素</a></p><p><a href="https://juejin.cn/post/6844903810951806989">伪类与伪元素的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弄懂 BFC 奖励一顿 KFC</title>
      <link href="/2022/03/14/nong-dong-bfc-jiang-li-yi-dun-kfc/"/>
      <url>/2022/03/14/nong-dong-bfc-jiang-li-yi-dun-kfc/</url>
      
        <content type="html"><![CDATA[<p>前言</p><p>对于 BFC 的概念和应用场景一直很模糊，趁着疫情在家有闲着重了解一下，做个总结。</p><h1 id="BFC-是什么"><a href="#BFC-是什么" class="headerlink" title="BFC 是什么"></a>BFC 是什么</h1><p>BFC 全称：Block Formatting Context， 名为『块级格式化上下文』</p><h1 id="BFC-触发条件"><a href="#BFC-触发条件" class="headerlink" title="BFC 触发条件"></a>BFC 触发条件</h1><ul><li>根元素（<code>&lt;html&gt;</code>）</li><li>浮动元素（元素的 float 不是 none）</li><li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li>行内块 inline block 元素</li><li>overflow 值不为 visible 的块元素</li><li>弹性元素（display为 flex 或 inline-flex元素的直接子元素）</li></ul><h1 id="BFC-的约束规则"><a href="#BFC-的约束规则" class="headerlink" title="BFC 的约束规则"></a>BFC 的约束规则</h1><ul><li>内部的Box会在垂直方向上一个接一个的放置</li><li>垂直方向上的距离由margin决定</li><li>每个元素的左外边距与包含块的左边界相接触（从左向右），即使浮动元素也是如此</li><li>BFC的区域不会与float的元素区域重叠</li><li>计算BFC的高度时，浮动子元素也参与计算</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然</li></ul><h1 id="解决了什么问题"><a href="#解决了什么问题" class="headerlink" title="解决了什么问题"></a>解决了什么问题</h1><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JS Bin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.aside</span> <span class="token punctuation">{</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span>lightpink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.container</span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span>150px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span>220px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span>mediumturquoise<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.outer_box1, .outer_box2</span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.outer_box2 .container</span> <span class="token punctuation">{</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer_box1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aside<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>HaHa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>HeHe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer_box2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aside<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>HaHa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>HeHe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0c6244z08j20q40irn2q.jpg"></p><h2 id="防止-margin-合并"><a href="#防止-margin-合并" class="headerlink" title="防止 margin 合并"></a>防止 margin 合并</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JS Bin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">      <span class="token selector">p</span> <span class="token punctuation">{</span>          <span class="token property">color</span><span class="token punctuation">:</span> #f55<span class="token punctuation">;</span>          <span class="token property">background</span><span class="token punctuation">:</span> #fcc<span class="token punctuation">;</span>          <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>          <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>          <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>          <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>          <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token selector">.wrap</span> <span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> flow-root    <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    两个相邻Box垂直方向margin重叠    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Haha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hehe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    在p外面包裹一层容器，并触发该容器生成一个新BFC    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Haha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hehe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0c5edk7skj20qb0i0afh.jpg"></p><h2 id="解决高度塌陷"><a href="#解决高度塌陷" class="headerlink" title="解决高度塌陷"></a>解决高度塌陷</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JS Bin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box</span><span class="token punctuation">{</span>      <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span>rosybrown<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token selector">.outer_box1, .outer_box2</span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.outer_box2</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer_box1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>HaHa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>HeHe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer_box2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>HaHa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>HeHe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0c5rll4f6j20q80hc79f.jpg"></p><h1 id="BFC-的副作用"><a href="#BFC-的副作用" class="headerlink" title="BFC 的副作用"></a>BFC 的副作用</h1><ul><li>display: table 可能引发响应性问题</li><li>overflow: scroll 可能产生多余的滚动条</li><li>float: left 将把元素移至左侧，并被其他元素环绕</li><li>overflow: hidden 将裁切溢出元素</li></ul><p>可以使用的 <code>display: flow-root</code> 来触发 BFC 消除副作用</p><hr><p>阿不知不觉因为疫情宅在家已经有20来天了，我的记忆还停留在2月份 🍂 </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 wx.navigateTo、wx.redirectTo、wx.reLaunch、wx.switchTab 和 wx.navigateBack 的区别</title>
      <link href="/2022/03/07/guan-yu-wx-navigateto-wx-redirectto-wx-relaunch-wx-switchtab-he-wx-navigateback-de-qu-bie/"/>
      <url>/2022/03/07/guan-yu-wx-navigateto-wx-redirectto-wx-relaunch-wx-switchtab-he-wx-navigateback-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>接口</th><th>用法</th><th>参数(标*为必填参数)</th><th>路由方式</th><th>使用场景</th></tr></thead><tbody><tr><td>wx.navigateTo(Object object)</td><td>用于保留当前页面、跳转到应用内的某个页面，但不能跳到 tabbar 页面</td><td>{<br>*url: string,<br><br>events: Object,<br><br>success: function,<br><br>fail: function,<br><br>complete: function<br>}</td><td>打开新页面</td><td>页面不多的小程序推荐使用</td></tr><tr><td>wx.redirectTo(Object object)</td><td>用于关闭当前页面，跳转到应用内的某个页面，但不能跳到 tabbar 页面</td><td>{<br>*url: string,<br><br>success: function,<br><br>fail: function,<br><br>complete: function<br>}</td><td>页面重定向</td><td>页面过多时，被保留页面会挤占微信分配给小程序的内存，或是达到微信所限制的5层页面栈</td></tr><tr><td>wx.navigateBack(Object object)</td><td>用于关闭当前页面，并返回上一页面或多级页面</td><td>{<br>delta: number,<br><br>success: function,<br><br>fail: function,<br><br>complete: function<br>}</td><td>页面返回</td><td>返回历史页面</td></tr><tr><td>wx.switchTab(Object object)</td><td>用于跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</td><td>{<br>*url: string,<br><br>success: function,<br><br>fail: function,<br><br>complete: function<br>}</td><td>Tab 切换</td><td>tabBar 页面跳转</td></tr><tr><td>wx.reLaunch(Object object)</td><td>用于关闭内存中所有保留的页面，再跳转到目标页面</td><td>{<br>*url: string,<br><br>success: function,<br><br>fail: function,<br><br>complete: function<br>}</td><td>重启动</td><td>同 wx.redirectTo</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（十一）</title>
      <link href="/2022/03/06/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-shi-yi/"/>
      <url>/2022/03/06/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-shi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="我的订单"><a href="#我的订单" class="headerlink" title="我的订单"></a>我的订单</h1><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h0093p0kdyj20ak0imn0r.jpg" alt="我的订单.png"></p><h2 id="获取历史订单数据"><a href="#获取历史订单数据" class="headerlink" title="获取历史订单数据"></a>获取历史订单数据</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages/my-order/my-order.vue</span><span class="token comment">// 省略部分代码</span><span class="token keyword">const</span> db <span class="token operator">=</span> wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> _ <span class="token operator">=</span> db<span class="token punctuation">.</span>command<span class="token keyword">const</span> good_collect <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'order-data'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Price <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'e-commerce_price'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span>        Price<span class="token punctuation">,</span>         <span class="token literal-property property">res_data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">async</span> <span class="token function">get_menu</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> field_obj <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">transac_status</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token literal-property property">table_number</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token literal-property property">order_time</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token literal-property property">sett_amount</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span>                <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">'order_time'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>field_obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>res_data <span class="token operator">=</span> res<span class="token punctuation">.</span>data            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">onLoad</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get_menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="选择人数页面"><a href="#选择人数页面" class="headerlink" title="选择人数页面"></a>选择人数页面</h1><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h009ekvbdsj20af0in0wd.jpg" alt="选择人数.png"></p><h2 id="扫描二维码获取桌号"><a href="#扫描二维码获取桌号" class="headerlink" title="扫描二维码获取桌号"></a>扫描二维码获取桌号</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages/index/index.vue</span><span class="token comment">// 省略部分代码</span><span class="token function">onLoad</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>table_number <span class="token operator">=</span> e<span class="token punctuation">.</span>number    wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'table_num'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1h009w45uflj20iv0rgn5m.jpg" alt="e.png"></p><h2 id="查询当前桌号结账状态"><a href="#查询当前桌号结账状态" class="headerlink" title="查询当前桌号结账状态"></a>查询当前桌号结账状态</h2><ul><li><p>当前桌号历史订单已结束，即开始新订单</p></li><li><p>当前桌号存在历史订单未结账，则跳转到订单详情页</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages/index/index.vue</span><span class="token comment">// 省略部分代码</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">query_order</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">table_number</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>table_number<span class="token punctuation">,</span> <span class="token literal-property property">transac_status</span><span class="token operator">:</span> <span class="token string">'unsettled'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                wx<span class="token punctuation">.</span><span class="token function">reLaunch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/pages/order-details/details'</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//TODO handle the exception</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">onLoad</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>table_number <span class="token operator">=</span> e<span class="token punctuation">.</span>number    wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'table_num'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>number<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择人数"><a href="#选择人数" class="headerlink" title="选择人数"></a>选择人数</h2><p>通过 <code>wx.setStorageSync('number_of_diners', item)</code> 接口保存选择人数</p><h2 id="点击开始跳转点单页面"><a href="#点击开始跳转点单页面" class="headerlink" title="点击开始跳转点单页面"></a>点击开始跳转点单页面</h2><p>通过 <code>x.getStorageSync('number_of_diners')</code> 和 <code>wx.getStorageSync('table_num')</code> 接口获取桌号和人数</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 实战 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（十）</title>
      <link href="/2022/03/05/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-shi/"/>
      <url>/2022/03/05/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="订单详情页"><a href="#订单详情页" class="headerlink" title="订单详情页"></a>订单详情页</h1><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz93xhbd9j20ao0ii41w.jpg" alt="订单详情页.png"></p><h2 id="获取订单数据"><a href="#获取订单数据" class="headerlink" title="获取订单数据"></a>获取订单数据</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages/order-details/details.vue</span><span class="token comment">// 省略部分代码</span><span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        Price<span class="token punctuation">,</span>        <span class="token literal-property property">overall</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">other_data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">comp_data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">goods_data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">get_menu</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> field_obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">number_of_diners</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">transac_status</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">order_receiving</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">openid</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span>            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">table_number</span><span class="token operator">:</span> <span class="token string">'002'</span><span class="token punctuation">,</span> <span class="token literal-property property">transac_status</span><span class="token operator">:</span> <span class="token string">'unsettled'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>field_obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> res_data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>menu            res_data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>overall <span class="token operator">+=</span> item<span class="token punctuation">.</span>goods_list<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>other_data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>comp_data <span class="token operator">=</span> res_data            <span class="token keyword">this</span><span class="token punctuation">.</span>goods_data <span class="token operator">=</span> res_data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">backup_data</span><span class="token operator">:</span> item<span class="token punctuation">.</span>backup_data<span class="token punctuation">,</span>                    <span class="token literal-property property">goods_list</span><span class="token operator">:</span> item<span class="token punctuation">.</span>goods_list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token literal-property property">max</span><span class="token operator">:</span> item<span class="token punctuation">.</span>goods_list<span class="token punctuation">.</span>length                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">onLoad</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get_menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>Collection.where(condition: Object)</code> 指定查询条件，返回带新查询条件的新的集合引用</p></li><li><p><code>Collection.field(projection: Object)</code> 指定返回结果中记录需返回的字段。方法接受一个必填对象用于指定需返回的字段，对象的各个 key 表示要返回或不要返回的字段，value 传入 true|false（或 1|-1）表示要返回还是不要返回</p></li></ul><h2 id="点击展开全部"><a href="#点击展开全部" class="headerlink" title="点击展开全部"></a>点击展开全部</h2><p>实现思路：</p><p>通过 <code>max</code> 值来判断是否已经展示全部</p><ul><li><p>大于3，折叠多余数据</p></li><li><p>小于3，展示全部</p></li></ul><p><code>comp_data</code> 存放完整数据</p><p><code>goods_data</code> 存放前三项数据，<code>goods_data[0]</code> 表示第一次下单的前三项数据</p><p>点击 <code>index</code> 对应的展开全部按钮，更新该次 <code>goods_data[index]</code> 下单的所有数据，并将对应的 <code>max</code> 值标记为0表示已展示全部隐藏展开全部按钮。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// psges/order-details/details.vue</span><span class="token comment">// 省略部分代码</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">opEn</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'goods_list'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>comp_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>goods_list<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加菜"><a href="#加菜" class="headerlink" title="加菜"></a>加菜</h2><p>点击加菜按钮跳转到点单页面，用到 <code>wx.reLaunch(Object object)</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// psges/order-details/details.vue</span><span class="token comment">// 省略部分代码</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">add_Dish</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wx<span class="token punctuation">.</span><span class="token function">reLaunch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/pages/home-page/page'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://april-cl.github.io/2022/03/07/guan-yu-wx-navigateto-wx-redirectto-wx-relaunch-wx-switchtab-he-wx-navigateback-de-qu-bie/">关于 wx.navigateTo、wx.redirectTo、wx.reLaunch、wx.switchTab 和 wx.navigateBack 的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 实战 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（九）</title>
      <link href="/2022/03/05/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-jiu/"/>
      <url>/2022/03/05/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-jiu/</url>
      
        <content type="html"><![CDATA[<h1 id="计算每一天销售额"><a href="#计算每一天销售额" class="headerlink" title="计算每一天销售额"></a>计算每一天销售额</h1><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol><li>获取seven_day_sales数据表数据</li></ol><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz0tikeoyj20an042t9i.jpg" alt="seven_day_sales数据表"></p><ol start="2"><li>获取当前日期记录</li></ol><ul><li><p>无记录，新增当前日期销售记录</p></li><li><p>有记录，将当前订单总价与该日期销售额相加</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config/Date_anaysis.js</span><span class="token keyword">const</span> db <span class="token operator">=</span> wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> _ <span class="token operator">=</span> db<span class="token punctuation">.</span>command<span class="token keyword">const</span> seven <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'seven_day_sales'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">analysis</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token function">sameday</span> <span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> sales_value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token keyword">await</span> seven<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>time<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">await</span> seven<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>time<span class="token punctuation">,</span> sales_value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">let</span> total_amount <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sales_value<span class="token punctuation">)</span> <span class="token operator">+</span> sales_value<span class="token keyword">let</span> final_data <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">await</span> seven<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">sales_value</span><span class="token operator">:</span>total_amount<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token string">'错误'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>analysis<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="小程序端调用订阅消息接口"><a href="#小程序端调用订阅消息接口" class="headerlink" title="小程序端调用订阅消息接口"></a>小程序端调用订阅消息接口</h1><p>订阅消息接口：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/subscribe-message/wx.requestSubscribeMessage.html">wx.requestSubscribeMessage(Object object)</a></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz2y5o9ktj20yt0ozdky.jpg" alt="订阅消息模板.png"></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz383c6knj20ns0ev75k.jpg" alt="订阅消息模板详情.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages/home-page-page.vue</span><span class="token comment">// 省略部分代码</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">placean_order</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wx<span class="token punctuation">.</span><span class="token function">requestSubscribeMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">tmplIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>tmplIds<span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sub_database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sub_database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz1l1segsj20j20rjk03.jpg" alt="订阅消息.png"></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz3nzi0s6j20f20lldif.jpg" alt="服务通知.png"></p><h1 id="使用-GoEasy"><a href="#使用-GoEasy" class="headerlink" title="使用 GoEasy"></a>使用 GoEasy</h1><p><a href="https://www.goeasy.io/cn/docs/goeasy-2.x/pubsub/message/client-pub-sub.html">Websocket消息发送和接收 - GoEasy PubSub</a></p><h2 id="小程序端"><a href="#小程序端" class="headerlink" title="小程序端"></a>小程序端</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span><span class="token comment">// 省略部分代码</span><span class="token keyword">import</span> GoEasy <span class="token keyword">from</span> <span class="token string">'goeasy'</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>goeasy <span class="token operator">=</span> GoEasy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">"hangzhou.goeasy.io"</span><span class="token punctuation">,</span>  <span class="token comment">//若是新加坡区域：singapore.goeasy.io</span>    <span class="token literal-property property">appkey</span><span class="token operator">:</span><span class="token string">"您的common key"</span><span class="token punctuation">,</span>    <span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'pubsub'</span><span class="token punctuation">]</span><span class="token comment">//根据需要，传入‘pubsub’或'im’，或数组方式同时传入</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// App.vue</span><span class="token comment">// 省略部分代码</span><span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//建立连接</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>goeasy<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">//pubsub选填，im必填</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//必须是一个对象，pubsub选填，im必填，用于上下线提醒和查询在线用户列表时，扩展更多的属性</span>        <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//连接成功</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span> <span class="token comment">//连接成功</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">onFailed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//连接失败</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">onProgress</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">attempts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//连接或自动重连中</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接或自动重连中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/main.js</span><span class="token comment">// 省略部分代码</span><span class="token keyword">import</span> GoEasy <span class="token keyword">from</span> <span class="token string">'goeasy'</span><span class="token comment">// 即时通讯：订单提醒</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>goeasy <span class="token operator">=</span> GoEasy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">"hangzhou.goeasy.io"</span><span class="token punctuation">,</span>  <span class="token comment">//若是新加坡区域：singapore.goeasy.io</span>  <span class="token literal-property property">appkey</span><span class="token operator">:</span> <span class="token string">"您的common key"</span><span class="token punctuation">,</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'pubsub'</span><span class="token punctuation">]</span><span class="token comment">//根据需要，传入‘pubsub’或'im’，或数组方式同时传入</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/App.vue</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 订单数存入本地缓存</span>    <span class="token keyword">const</span> order_num <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"order_num"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>order_num <span class="token operator">||</span> order_num <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'order_num'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">//1.建立连接</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>goeasy<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token comment">//pubsub选填，im必填</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">"avatar"</span><span class="token operator">:</span><span class="token string">"/www/xxx.png"</span><span class="token punctuation">,</span><span class="token string-property property">"nickname"</span><span class="token operator">:</span><span class="token string">"Neo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//必须是一个对象，pubsub选填，im必填，用于上下线提醒和查询在线用户列表时，扩展更多的属性</span>        <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token comment">//连接成功</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span> <span class="token comment">//连接成功</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sub_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">onFailed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">//连接失败</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">onProgress</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">attempts</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">//连接或自动重连中</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接或自动重连中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">// 2.接收订阅消息</span>    <span class="token function">sub_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> pubsub <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>goeasy<span class="token punctuation">.</span>pubsub<span class="token punctuation">;</span>        pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">channel</span><span class="token operator">:</span> <span class="token string">"my_channel"</span><span class="token punctuation">,</span><span class="token comment">//替换为您自己的channel</span>            <span class="token function-variable function">onMessage</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> order_num_a <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"order_num"</span><span class="token punctuation">)</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'order_num'</span><span class="token punctuation">,</span><span class="token function">Number</span><span class="token punctuation">(</span>order_num_a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">const</span> order_num_b <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"order_num"</span><span class="token punctuation">)</span>                <span class="token comment">// console.log(order_num_b)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'order_remind'</span><span class="token punctuation">,</span><span class="token function">Number</span><span class="token punctuation">(</span>order_num_b<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// console.log(message);</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Channel订阅成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">onFailed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Channel订阅失败, 错误编码："</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">" 错误信息："</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz3i4tqbaj20yv0km45x.jpg" alt="后台订阅消息.png"></p><h1 id="即时通讯功能新订单提醒"><a href="#即时通讯功能新订单提醒" class="headerlink" title="即时通讯功能新订单提醒"></a>即时通讯功能新订单提醒</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages/home-page/page.vue</span><span class="token comment">// 省略部分代码</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">push_message</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> pubsub <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>goeasy<span class="token punctuation">.</span>pubsub        pubsub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">channel</span><span class="token operator">:</span> <span class="token string">"my_channel"</span><span class="token punctuation">,</span><span class="token comment">//替换为您自己的channel</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"小程序端发送"</span><span class="token punctuation">,</span><span class="token comment">//替换为您想要发送的消息内容</span>            <span class="token function-variable function">onSuccess</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"消息发布成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">onFailed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"消息发送失败，错误编码："</span><span class="token operator">+</span>error<span class="token punctuation">.</span>code<span class="token operator">+</span><span class="token string">" 错误信息："</span><span class="token operator">+</span>error<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gzz3leb0l9g21gt0ogk7z.gif" alt="订单提醒.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 实战 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reduce的一点小理解</title>
      <link href="/2022/02/18/reduce-de-yi-dian-xiao-li-jie/"/>
      <url>/2022/02/18/reduce-de-yi-dian-xiao-li-jie/</url>
      
        <content type="html"><![CDATA[<p>前阵子在项目中有用到 <code>reduce()</code> 方法，当时不是很理解，后来空了学习了一下，有了一点小收获，记之~</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p><code>Array.prototype.reduce()</code>  方法对数组中的每个元素执行指定回调函数，将其结果汇总为单个返回值。这个方法接收两个参数：</p><ul><li><p>回调函数（必选），执行数组中每个值 (如果没有提供初始值则第一个值除外)的函数，包含四个参数：</p><ul><li><p>accumulator（累计器），累计回调的返回值，值为上一次调用回调时返回的累积值或者初始值</p></li><li><p>currentValue，数组中正在处理的元素</p></li><li><p>index，数组中正在处理的当前元素的索引。如果提供了初始值，则起始索引号为0，否则从索引1起始</p></li><li><p>array，调用reduce()的数组，即源数组</p></li></ul></li><li><p>初始值（可选），作为第一次调用回调函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的<strong>空数组</strong>上调用 <code>reduce()</code> 将报错</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 1 + 2 + 3</span><span class="token comment">// 6</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 1 + 1 + 2 + 3</span><span class="token comment">// 7</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 报错</span><span class="token comment">// Uncaught TypeError: Reduce of empty array with no initial value</span><span class="token comment">// at Array.reduce (&lt;anonymous&gt;)</span><span class="token comment">// at &lt;anonymous&gt;:1:4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="filter-find-forEach-map-reduce-的对比"><a href="#filter-find-forEach-map-reduce-的对比" class="headerlink" title="filter/find/forEach/map/reduce 的对比"></a>filter/find/forEach/map/reduce 的对比</h1><p>这几个方法我总是会混淆，列了个表格方便对比</p><table><thead><tr><th>方法名</th><th>描述</th><th>语法</th><th>参数1</th><th>参数2</th><th>返回值</th></tr></thead><tbody><tr><td>filter</td><td>返回满足所提供回调函数筛选条件的所有元素或空数组</td><td>var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</td><td>用来测试数组的每个元素的函数。返回 <code>true</code> 表示该元素通过测试，保留该元素，<code>false</code> 则不保留。它接受以下三个参数：<br><strong>element</strong> 当前遍历到的元素<br><code>index</code><strong>可选</strong> 当前遍历到的索引<br><code>array</code><strong>可选</strong> 数组本身</td><td>执行回调时用作<code>this</code> 的对象</td><td>一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组</td></tr><tr><td>find</td><td>返回满足所提供回调函数筛选条件的第一个元素的值或 <code>undefined</code></td><td>arr.find(callback(element[, index[, array]])[, thisArg])</td><td>在数组每一项上执行的函数，它接受以下三个参数：<br><strong>element</strong> 当前遍历到的元素<br><code>index</code><strong>可选</strong> 当前遍历到的索引<br><code>array</code><strong>可选</strong> 数组本身</td><td>执行回调时用作<code>this</code> 的对象</td><td>数组中第一个满足所提供测试函数的元素的值，否则返回 <code>undefined</code></td></tr><tr><td>forEach</td><td>对数组的每个元素执行一次提供的回调函数</td><td>arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</td><td>为数组中每个元素执行的函数，它接受以下三个参数：<br><strong>element</strong> 当前遍历到的元素<br><code>index</code><strong>可选</strong> 当前遍历到的索引<br><code>array</code><strong>可选</strong> 数组本身</td><td>执行回调时用作<code>this</code> 的对象</td><td><code>undefined</code></td></tr><tr><td>map</td><td>返回数组中的每个元素调用一次提供的函数后组合形成的新数组</td><td>var new_array = arr.map(function callback(currentValue[, index[, array]]) {  <br>// Return element for new_array  <br>}[, thisArg])</td><td>生成新数组元素的函数，它接受以下三个参数：<br><strong>element</strong> 当前遍历到的元素<br><code>index</code><strong>可选</strong> 当前遍历到的索引<br><code>array</code><strong>可选</strong> 数组本身</td><td>执行回调时用作<code>this</code> 的对象</td><td>一个由原数组每个元素执行回调函数的结果组成的新数组</td></tr><tr><td>reduce</td><td>返回数组中的每个元素升序调用一次提供的函数后汇总而成的值</td><td>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</td><td>执行数组中每个值 (如果没有提供 <code>initialValue则第一个值除外</code>)的函数，它接受以下四个参数：<br><strong><code>accumulator</code></strong>  累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或<code>initialValue</code><br><strong>element</strong> 当前遍历到的元素<br><code>index</code><strong>可选</strong> 当前遍历到的索引<br><code>array</code><strong>可选</strong> 数组本身</td><td>作为第一次调用 <code>callback</code>函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素</td><td>函数累计处理的结果</td></tr></tbody></table><h2 id="使用-reduce-实现-filter"><a href="#使用-reduce-实现-filter" class="headerlink" title="使用 reduce 实现 filter"></a>使用 reduce 实现 filter</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>filterUsingReduce<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">filterUsingReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filterArray<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        filterArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> filterArray    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filterUsingReduce</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentValue <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// [16]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-reduce-实现-find"><a href="#使用-reduce-实现-find" class="headerlink" title="使用 reduce 实现 find"></a>使用 reduce 实现 find</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>findUsingReduce<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">findUsingReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">findArray<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>findArray <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">&amp;&amp;</span> findArray<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        findArray <span class="token operator">=</span> currentValue        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">===</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> findArray <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">&amp;&amp;</span> findArray<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        findArray <span class="token operator">=</span> <span class="token keyword">undefined</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> findArray    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findUsingReduce</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentValue <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// [4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-reduce-实现-forEach"><a href="#使用-reduce-实现-forEach" class="headerlink" title="使用 reduce 实现 forEach"></a>使用 reduce 实现 forEach</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEachUsingReduce<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">forEachUsingReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">forEachArray<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">forEachUsingReduce</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>element<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>element<span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// a: a1</span><span class="token comment">// b: b1</span><span class="token comment">// c: c1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-reduce-实现-map"><a href="#使用-reduce-实现-map" class="headerlink" title="使用 reduce 实现 map"></a>使用 reduce 实现 map</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mapUsingReduce<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mapUsingReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mappedArray<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mappedArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span>      <span class="token keyword">return</span> mappedArray    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">mapUsingReduce</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentValue <span class="token operator">+</span> index <span class="token operator">+</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// [5, 9, 15, 23]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p><a href="https://juejin.cn/post/6844904025310117901">自从学会了 Array.reduce() ，再也离不开它</a></p><p><a href="https://juejin.cn/post/6916087983808626701">以前我没得选，现在我只想用 Array.prototype.reduce</a></p><p><a href="https://juejin.cn/post/6844903870154588168#heading-6">生动形象解释forEach、filter、map、some、every、find、findIndex、reduce间的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（十二）</title>
      <link href="/2022/01/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi-er/"/>
      <url>/2022/01/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi-er/</url>
      
        <content type="html"><![CDATA[<h1 id="生成小程序码"><a href="#生成小程序码" class="headerlink" title="生成小程序码"></a>生成小程序码</h1><p>接口：<a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html">wxacode.get</a></p><p>通过该接口生成的小程序码，永久有效，有数量限制</p><p>HTTPS 调用：<code>POST https://api.weixin.qq.com/wxa/getwxacode?access_token=ACCESS_TOKEN</code></p><h1 id="提交桌号到数据库"><a href="#提交桌号到数据库" class="headerlink" title="提交桌号到数据库"></a>提交桌号到数据库</h1><p>实现思路：</p><ol><li><p>获取请求内容（桌号）</p></li><li><p>验证桌号是否已经存在</p></li><li><p>通过 HTTPS 调用接口生成该桌号的小程序码 </p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// router/qr-code/code.js</span><span class="token comment">// 添加桌号</span><span class="token comment">// 省略部分代码</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/qrcode'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>table<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">postcode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('table_qr_code').where({table:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>table<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).get()</span><span class="token template-punctuation string">`</span></span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'该桌号已存在'</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> res_code <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">qrcode</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>      <span class="token keyword">const</span> res_img <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">buffer</span><span class="token punctuation">(</span><span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res_code<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token keyword">let</span> code_image <span class="token operator">=</span> <span class="token string">'https://'</span> <span class="token operator">+</span> res_img      <span class="token keyword">let</span> table_data <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('table_qr_code').add({data:{time:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',table:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>table<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',code:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code_image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}})</span><span class="token template-punctuation string">`</span></span>      <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> table_data<span class="token punctuation">)</span>      <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'添加成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config/code-img.js</span><span class="token comment">// 给二进制图片重新命名</span><span class="token keyword">let</span> <span class="token function-variable function">Code</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> orderCode <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    orderCode <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  orderCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> orderCode  <span class="token keyword">return</span> orderCode <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>Code<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config/checking.js</span><span class="token comment">// 桌号为空校验</span><span class="token comment">// 省略部分代码</span><span class="token keyword">class</span> <span class="token class-name">postcode</span> <span class="token keyword">extends</span> <span class="token class-name">checking</span> <span class="token punctuation">{</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'桌号不能为空'</span><span class="token punctuation">]</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Errunder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Blank</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config/databaseapi.js</span><span class="token comment">// 生成小程序码</span><span class="token keyword">class</span> <span class="token class-name">getToken</span> <span class="token punctuation">{</span>  <span class="token comment">// 省略部分代码</span>  <span class="token keyword">async</span> <span class="token function">qrcode</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">gettoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> <span class="token constant">OBJ</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'pages/index/index?number='</span> <span class="token operator">+</span> number<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> colldata <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>Qrcode <span class="token operator">+</span> token<span class="token punctuation">,</span> <span class="token constant">OBJ</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">'arraybuffer'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> colldata    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// cos/cos.js</span><span class="token comment">// 二进制上传</span><span class="token comment">// 省略部分代码</span><span class="token keyword">let</span> <span class="token function-variable function">buffer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    cos<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      Bucket<span class="token punctuation">,</span>      Region<span class="token punctuation">,</span>      <span class="token literal-property property">Key</span><span class="token operator">:</span> filename<span class="token punctuation">,</span>      <span class="token literal-property property">Body</span><span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Location<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="请求桌号数据"><a href="#请求桌号数据" class="headerlink" title="请求桌号数据"></a>请求桌号数据</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// router/qr-code/code.js</span><span class="token comment">// 获取桌号</span><span class="token comment">// 省略部分代码</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/getqrcode'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>page<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">let</span> sk <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('table_qr_code').orderBy('time', 'desc').limit(10).skip(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sk<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">).get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">total</span><span class="token operator">:</span> res<span class="token punctuation">.</span>pager<span class="token punctuation">.</span>Total<span class="token punctuation">}</span>    <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span><span class="token literal-property property">result</span><span class="token operator">:</span> data<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>total<span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查询前7天数据"><a href="#查询前7天数据" class="headerlink" title="查询前7天数据"></a>查询前7天数据</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// router/qr-code/code.js</span><span class="token comment">// 获取前7天数据</span><span class="token comment">// 省略部分代码</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/salesvolume'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> catedays <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token string">'days'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>catedays<span class="token punctuation">)</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('seven_day_sales').where({time:db.command.in(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)}).orderBy('time','asc').field({time:true,sales_value:true}).get()</span><span class="token template-punctuation string">`</span></span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">sales_value</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span>sales_value<span class="token punctuation">,</span>        <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span>time<span class="token punctuation">,</span>        <span class="token literal-property property">unix</span><span class="token operator">:</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> days <span class="token operator">=</span> catedays<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">sales_value</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">time</span><span class="token operator">:</span> item<span class="token punctuation">,</span>        <span class="token literal-property property">unix</span><span class="token operator">:</span> <span class="token function">moment</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> ab <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">let</span> removal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>data<span class="token punctuation">,</span> <span class="token operator">...</span>days<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">.</span>time<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        obj<span class="token punctuation">[</span>item<span class="token punctuation">.</span>time<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> prev    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> res_sort <span class="token operator">=</span> removal<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span>unix <span class="token operator">-</span> <span class="token constant">B</span><span class="token punctuation">.</span>unix<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> res_sort<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（八）</title>
      <link href="/2021/12/29/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-ba/"/>
      <url>/2021/12/29/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-ba/</url>
      
        <content type="html"><![CDATA[<h1 id="生成订单编号"><a href="#生成订单编号" class="headerlink" title="生成订单编号"></a>生成订单编号</h1><p>实现思路：当前时间戳 + 10位整数随机数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config\order.js</span><span class="token keyword">let</span> <span class="token function-variable function">Code</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> orderCode <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>orderCode <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span>orderCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> orderCode<span class="token keyword">return</span> orderCode<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>Code<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="调用订阅消息接口"><a href="#调用订阅消息接口" class="headerlink" title="调用订阅消息接口"></a>调用订阅消息接口</h1><p>以下使用说明摘自<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/subscribe-message.html">文档</a></p><p>步骤一：获取模板 ID</p><p>登录小程序 -&gt; 功能 -&gt; 订阅消息 -&gt; 公共模板库 -&gt; 搜索’商家确认订单通知’并选用 -&gt; 复制模板ID</p><p>步骤二：获取下发权限</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wx<span class="token punctuation">.</span><span class="token function">requestSubscribeMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">tmplIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'模板ID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">success</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>步骤三：调用接口下发订阅消息</p><p>服务端调用，见 <a href="https://april-cl.github.io/2021/12/26/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi-yi/#toc-heading-7">微信订阅消息</a></p><h1 id="提交订单"><a href="#提交订单" class="headerlink" title="提交订单"></a>提交订单</h1><h2 id="订单数据库设计"><a href="#订单数据库设计" class="headerlink" title="订单数据库设计"></a>订单数据库设计</h2><pre class="line-numbers language-none"><code class="language-none">[{table_number:桌号number_of_diners:用餐人数order_time:下单时间sett_amount:交易金额order_no:订单编号transac_status:结账状态=&gt;未结账:'unsettled'|已结账:'success'order_receiving:接单状态=&gt;未接单:'mis_orders'|已接单:'rec_order'menu:[{goods_list:[购物车里的菜单]}//第一次下单{goods_list:[购物车里的菜单]}//第二次下单{}n次]下单的菜品：第一次下单;{二次,三次,n次}=&gt;加菜}]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="考虑需求"><a href="#考虑需求" class="headerlink" title="考虑需求"></a>考虑需求</h2><ol><li>客户初次提交订单</li><li>客户加单</li></ol><p>依据 <code>transac_status</code> 结账状态和 <code>table_number</code> 当前桌号判断。</p><p>向数据查询当前桌号并且未结账记录</p><ul><li>无记录则表示之前的订单已结，此单为初次点单，向数据库创建新纪录</li><li>有记录则表示该桌号此单为加单，向数据库修改记录</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">sub_database</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopping_card<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>total_price <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> sett_amount <span class="token operator">=</span> <span class="token number">0</span>    res<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>sett_amount <span class="token operator">+=</span> item<span class="token punctuation">.</span>total_price<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> order <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">table_number</span><span class="token operator">:</span> <span class="token string">'004'</span><span class="token punctuation">,</span>        <span class="token literal-property property">number_of_diners</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token literal-property property">order_time</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        sett_amount<span class="token punctuation">,</span>        <span class="token literal-property property">order_no</span><span class="token operator">:</span> <span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">transac_status</span><span class="token operator">:</span> <span class="token string">'unsettled'</span><span class="token punctuation">,</span>        <span class="token literal-property property">order_receiving</span><span class="token operator">:</span> <span class="token string">'mis_orders'</span><span class="token punctuation">,</span>        <span class="token literal-property property">menu</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">backup_data</span><span class="token operator">:</span> <span class="token string">'备用字段'</span><span class="token punctuation">,</span> <span class="token literal-property property">goods_list</span><span class="token operator">:</span> res<span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> add_goods <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">backup_data</span><span class="token operator">:</span> <span class="token string">'备用字段'</span><span class="token punctuation">,</span> <span class="token literal-property property">goods_list</span><span class="token operator">:</span> res<span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">table_number</span><span class="token operator">:</span> <span class="token string">'004'</span><span class="token punctuation">,</span> <span class="token literal-property property">transac_status</span><span class="token operator">:</span> <span class="token string">'unsettled'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">sett_amount</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span> order<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> total_amount <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sett_amount<span class="token punctuation">)</span> <span class="token operator">+</span> sett_amount            <span class="token keyword">await</span> good_collect<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">sett_amount</span><span class="token operator">:</span> total_amount<span class="token punctuation">,</span>                    <span class="token literal-property property">order_receiving</span><span class="token operator">:</span> <span class="token string">'mis_orders'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">menu</span><span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>add_goods<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">await</span> dishes_data<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token literal-property property">monthlysale</span><span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> time_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">analysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sameday</span><span class="token punctuation">(</span>time_data<span class="token punctuation">,</span> sett_amount<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 实战 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（十一）</title>
      <link href="/2021/12/26/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi-yi/"/>
      <url>/2021/12/26/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="订单管理页"><a href="#订单管理页" class="headerlink" title="订单管理页"></a>订单管理页</h1><h2 id="前端接口"><a href="#前端接口" class="headerlink" title="前端接口"></a>前端接口</h2><p>获取订单：obtainorder</p><p>获取菜单详情：vieworder</p><p>接单：receiving</p><p>结账：checkout</p><h2 id="获取订单信息"><a href="#获取订单信息" class="headerlink" title="获取订单信息"></a>获取订单信息</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/obtainorder'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>page<span class="token punctuation">,</span> transac_status<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">let</span> sk <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>  <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>transac_status <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    param<span class="token punctuation">[</span><span class="token string">'transac_status'</span><span class="token punctuation">]</span> <span class="token operator">=</span> transac_status  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">delete</span> param<span class="token punctuation">.</span>transac_status  <span class="token punctuation">}</span>  <span class="token keyword">let</span> <span class="token constant">OBJ</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('order-data').where(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">OBJ</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">).orderBy('order_time', 'desc').field({menu: false}).limit(10).skip(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sk<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">).get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">total</span><span class="token operator">:</span> res<span class="token punctuation">.</span>pager<span class="token punctuation">.</span>Total<span class="token punctuation">}</span>    <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span><span class="token literal-property property">result</span><span class="token operator">:</span> data<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>total<span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200.</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取菜单详情"><a href="#获取菜单详情" class="headerlink" title="获取菜单详情"></a>获取菜单详情</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/vieworder'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('order-data').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').field({menu: true}).get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现接单"><a href="#实现接单" class="headerlink" title="实现接单"></a>实现接单</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/receiving'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span>  <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('order-data').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').update({data:{order_receiving:'rec_order'}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'已接单，快上菜吧'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现结账"><a href="#实现结账" class="headerlink" title="实现结账"></a>实现结账</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/checkout'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> openid<span class="token punctuation">,</span> sett_amount<span class="token punctuation">,</span> order_no<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">let</span> newmoney <span class="token operator">=</span> <span class="token function">Price</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>sett_amount<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> subscribe <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string-property property">'amount1'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">'value'</span><span class="token operator">:</span> newmoney<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string-property property">'time2'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">'value'</span><span class="token operator">:</span> time<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string-property property">'character_string3'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">'value'</span><span class="token operator">:</span> order_no<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('order-data').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').update({data:{transac_status:'success'}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>openid<span class="token punctuation">,</span> subscribe<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'结账成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="微信订阅消息"><a href="#微信订阅消息" class="headerlink" title="微信订阅消息"></a>微信订阅消息</h2><p>登录小程序 -&gt; 功能 -&gt; 订阅消息 -&gt; 公共模板库 -&gt; 搜索’商家确认订单通知’并选用 -&gt; 复制模板ID</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// databaseapi.js</span><span class="token keyword">let</span> Subscribe <span class="token operator">=</span> <span class="token string">'https://api.weixin.qq.com/cgi-bin/message/subscribe/send?access_token='</span><span class="token keyword">class</span> <span class="token class-name">getToken</span> <span class="token punctuation">{</span>  <span class="token comment">// 一些代码</span>  <span class="token keyword">async</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">touser<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">gettoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> <span class="token constant">OBJ</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        touser<span class="token punctuation">,</span>        data<span class="token punctuation">,</span>        <span class="token literal-property property">template_id</span><span class="token operator">:</span> <span class="token string">'上面复制的模板ID'</span><span class="token punctuation">,</span>        <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token string">'pages/my-order/my-order'</span><span class="token punctuation">,</span>        <span class="token literal-property property">miniprogram_state</span><span class="token operator">:</span> <span class="token string">'developer'</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> colldata <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>Subscribe <span class="token operator">+</span> token<span class="token punctuation">,</span> <span class="token constant">OBJ</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token string">'success'</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（七）</title>
      <link href="/2021/12/20/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-qi/"/>
      <url>/2021/12/20/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="详情页组件"><a href="#详情页组件" class="headerlink" title="详情页组件"></a>详情页组件</h1><h2 id="封装组件"><a href="#封装组件" class="headerlink" title="封装组件"></a>封装组件</h2><p>在 <code>pages\home-page\components</code> 目录创建 <code>goods-details.vue</code>，布局样式代码略</p><h2 id="调用组件"><a href="#调用组件" class="headerlink" title="调用组件"></a>调用组件</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Details<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Details<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Details <span class="token keyword">from</span> <span class="token string">'./components/goods-details.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>Details<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切换显示菜品详情"><a href="#切换显示菜品详情" class="headerlink" title="切换显示菜品详情"></a>切换显示菜品详情</h2><p>实现思路同 <a href="https://april-cl.github.io/2021/12/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-liu/#toc-heading-4">切换显示关闭购物车</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"popup_item()"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Details v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"popupItem"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Details<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Details <span class="token keyword">from</span> <span class="token string">'./components/goods-details.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>Details<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">popupItem</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">pop_Shopping</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>popupItem <span class="token operator">=</span> value<span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// goods-details.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"close()"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">close</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">popup_item</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>实现思路：通过 <code>v-bind</code> 将父组件向购物车组件动态赋值，用一个对象 <code>pro_details</code> 存储父组件当前点击菜品数据，详情页组件通过 <code>props</code> 接收菜品数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in goods"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(itemgood, good_index) in item.good_query"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"good_index"</span> @click<span class="token operator">=</span><span class="token string">"popup_item(true, index, good_index, item.cid, itemgood)"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Details v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"popupItem"</span> <span class="token operator">:</span>pro_details<span class="token operator">=</span><span class="token string">"pro_details"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Details<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Details <span class="token keyword">from</span> <span class="token string">'./components/goods-details.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>Details<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">pro_details</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">popup_item</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>popupItem <span class="token operator">=</span> value<span class="token keyword">this</span><span class="token punctuation">.</span>pro_details <span class="token operator">=</span> <span class="token punctuation">{</span>index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// goods-details.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"details-name"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>pro_details<span class="token punctuation">.</span>itemgood<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">pro_details</span><span class="token operator">:</span> Object<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同步计算菜品加减"><a href="#同步计算菜品加减" class="headerlink" title="同步计算菜品加减"></a>同步计算菜品加减</h2><p>见 <a href="https://april-cl.github.io/2021/12/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-wu/">实战篇笔记 扫码点餐小程序云开发小程序端（五）</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 实战 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（六）</title>
      <link href="/2021/12/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-liu/"/>
      <url>/2021/12/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="购物车组件"><a href="#购物车组件" class="headerlink" title="购物车组件"></a>购物车组件</h1><h2 id="封装组件"><a href="#封装组件" class="headerlink" title="封装组件"></a>封装组件</h2><p>在 <code>pages\home-page\components</code> 目录创建 <code>shopping-cart.vue</code>，布局样式代码略</p><h2 id="调用组件"><a href="#调用组件" class="headerlink" title="调用组件"></a>调用组件</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Cart<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Cart<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Cart <span class="token keyword">from</span> <span class="token string">'./components/shopping-cart.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>Cart<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切换显示关闭购物车"><a href="#切换显示关闭购物车" class="headerlink" title="切换显示关闭购物车"></a>切换显示关闭购物车</h2><h3 id="点击父组件"><a href="#点击父组件" class="headerlink" title="点击父组件"></a>点击父组件</h3><p>实现思路：用一个布尔值标记购物车显隐状态，当值为 <code>true</code> 时，购物车显示，此时若点击父组件控制购物车显隐状态开关，值切换为 <code>false</code>，购物车关闭</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"pop_Shopping(!card)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Cart v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Cart<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Cart <span class="token keyword">from</span> <span class="token string">'./components/shopping-cart.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>Cart<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">card</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">pop_Shopping</span> <span class="token punctuation">(</span><span class="token parameter">value <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>card <span class="token operator">=</span> value<span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="点击子组件（即购物车组件）"><a href="#点击子组件（即购物车组件）" class="headerlink" title="点击子组件（即购物车组件）"></a>点击子组件（即购物车组件）</h3><p>实现思路：点击时调用父组件<code>pop_Shopping</code> 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// shopping-cart.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"close()"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">close</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">pop_Shopping</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加菜品进购物车"><a href="#添加菜品进购物车" class="headerlink" title="添加菜品进购物车"></a>添加菜品进购物车</h2><p>实现思路：通过 <code>v-bind</code> 将父组件向购物车组件动态赋值，用一个数组 <code>shopping_card</code> 存储父组件中要加入购物车的菜品，购物车组件通过 <code>props</code> 接收菜品数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Cart v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"card"</span> <span class="token operator">:</span>shopping_card<span class="token operator">=</span><span class="token string">"shopping_card"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Cart<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Cart <span class="token keyword">from</span> <span class="token string">'./components/shopping-cart.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>Cart<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">shopping_card</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">plus</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">{</span>quantity<span class="token punctuation">,</span> image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> _id<span class="token punctuation">}</span> <span class="token operator">=</span> itemgood<span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>good_query<span class="token punctuation">[</span>good_index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span>image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token constant">QU</span><span class="token punctuation">,</span> unit<span class="token punctuation">,</span> <span class="token literal-property property">total_price</span><span class="token operator">:</span> unitprice <span class="token operator">*</span> <span class="token constant">QU</span><span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shopping_Cart</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">reduce</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">{</span>quantity<span class="token punctuation">,</span> image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> _id<span class="token punctuation">}</span> <span class="token operator">=</span> itemgood<span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>good_query<span class="token punctuation">[</span>good_index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span>image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token constant">QU</span><span class="token punctuation">,</span> unit<span class="token punctuation">,</span> <span class="token literal-property property">total_price</span><span class="token operator">:</span> unitprice <span class="token operator">*</span> <span class="token constant">QU</span><span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shopping_Cart</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">shopping_Cart</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopping_card<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// shopping-cart.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in shopping_card"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"goods-list"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"item.quantity &gt; 0"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"goods-list-image"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>image <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"item.image[0].url"</span> mode<span class="token operator">=</span><span class="token string">"aspectFill"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>image<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"goods-list-name"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list-text"</span><span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>text<span class="token operator">&gt;</span>￥<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>text<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>total_price<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"goods-quantity"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>quantity<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">shopping_card</span><span class="token operator">:</span> Array<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 <code>plus</code> 和 <code>reduce</code> 为加减菜品函数，见 <a href="https://april-cl.github.io/2021/12/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-wu/">实战篇笔记 扫码点餐小程序云开发小程序端（五）</a></p><h2 id="清空购物车所有菜品"><a href="#清空购物车所有菜品" class="headerlink" title="清空购物车所有菜品"></a>清空购物车所有菜品</h2><p>实现思路：父组件封装好清空数据的接口，子组件进行调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">empty_data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopping_card <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">this</span><span class="token punctuation">.</span>itemize<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>sale_quantity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>item<span class="token punctuation">.</span>good_query<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">T</span></span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// shopping-cart.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"empTy()"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">empTy</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">empty_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 实战 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（五）</title>
      <link href="/2021/12/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-wu/"/>
      <url>/2021/12/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="菜品数量加减"><a href="#菜品数量加减" class="headerlink" title="菜品数量加减"></a>菜品数量加减</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// page.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in goods"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(itemgood, good_index) in item.good_query"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"good_index"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>view @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"reduce(index, good_index, item.cid, itemgood)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>view @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"plus(index, good_index, item.cid, itemgood)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Cart<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Cart<span class="token operator">&gt;</span><span class="token operator">&lt;</span>Details<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Details<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> Cart <span class="token keyword">from</span> <span class="token string">'./components/shopping-cart.vue'</span>    <span class="token keyword">import</span> Details <span class="token keyword">from</span> <span class="token string">'./components/goods-details.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>Cart<span class="token punctuation">,</span>Details<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">card</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">plus</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span>quantity<span class="token punctuation">,</span> image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> _id<span class="token punctuation">}</span> <span class="token operator">=</span> itemgood                <span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>good_query<span class="token punctuation">[</span>good_index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">)</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">reduce</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span>quantity<span class="token punctuation">,</span> image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> _id<span class="token punctuation">}</span> <span class="token operator">=</span> itemgood                <span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>goods<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>good_query<span class="token punctuation">[</span>good_index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">shopping_Cart_add_sub</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> unitprice</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopping_card<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'quantity'</span><span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopping_card<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'total_price'</span><span class="token punctuation">,</span> <span class="token constant">QU</span> <span class="token operator">*</span> unitprice<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Vue.set(object, propertyName, value)</code> 向响应式对象中添加一个 property，并确保这个新 property 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新 property，因为 Vue 无法探测普通的新增 property (比如 this.myObject.newProperty = ‘hi’)</p></blockquote><blockquote><p><code>.stop</code> 阻止事件继续传播</p></blockquote><hr><p>下面内容需结合购物车和菜品详情页一起看，可先略过</p><h1 id="购物车菜品数量加减"><a href="#购物车菜品数量加减" class="headerlink" title="购物车菜品数量加减"></a>购物车菜品数量加减</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// shopping-cart.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>block v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in shopping_card"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"reduce(index, item.quantity, item._id, item.cid, item.good_index, item.unitprice)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"plus(index, item.quantity, item._id, item.cid, item.good_index, item.unitprice)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>block<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">reduce</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> unitprice</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">shopping_Cart_add_sub</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> unitprice<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">plus</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> unitprice</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token constant">QU</span> <span class="token operator">=</span> quantity <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">shopping_Cart_add_sub</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token constant">QU</span><span class="token punctuation">,</span> _id<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> unitprice<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="详情页菜品数量加减"><a href="#详情页菜品数量加减" class="headerlink" title="详情页菜品数量加减"></a>详情页菜品数量加减</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// goods-details.vue</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"reduce(pro_details)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>view<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>view @click<span class="token operator">=</span><span class="token string">"plus(pro_details)"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">pro_details</span><span class="token operator">:</span> Object<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">plus</span><span class="token punctuation">(</span><span class="token parameter">pro_details</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> <span class="token punctuation">{</span>index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood<span class="token punctuation">}</span> <span class="token operator">=</span> pro_details                <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>itemgood<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">pro_details</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> <span class="token punctuation">{</span>index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood<span class="token punctuation">}</span> <span class="token operator">=</span> pro_details                <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> good_index<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> itemgood<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>看了眼归档竟停了5天没写🤦🏻 一开始是因为拔牙疼了两天没有心思，后面突如其来的疫情和被困在家的神兽又搞得没点空闲🤦🏻</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 实战 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烟火集——火锅</title>
      <link href="/2021/12/11/yan-huo-ji-huo-guo/"/>
      <url>/2021/12/11/yan-huo-ji-huo-guo/</url>
      
        <content type="html"><![CDATA[<p>广东的冬天冷热无常，天冷的时候计划好打火锅，隔天就升温了。But！对吃货来说，天气算什么呢😏</p><p>小夫妻忙碌了半天准备食材，邀上三五好友，虽然中间出现一些不愉快的插曲，但幸好最终大家吃得满足🍲</p><p>此处表扬本场黑马——『炸腐竹』，好吃到意外🏆</p><p>另外，『牛肉丸』选手也发挥出优秀的水平👏</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gx9aq74s11j235s2dc1kz.jpg" alt="火锅.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 菜谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（四）</title>
      <link href="/2021/12/09/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-si/"/>
      <url>/2021/12/09/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-si/</url>
      
        <content type="html"><![CDATA[<h1 id="菜单左右联动"><a href="#菜单左右联动" class="headerlink" title="菜单左右联动"></a>菜单左右联动</h1><p>需求：</p><ol><li><p>滚动右边菜品栏时，当该分类详情模块顶部接触到滚动区域的顶部，左边对应的分类栏高亮，并且显示在可视区域</p></li><li><p>点击左边分类栏高亮显示，右边菜品栏滚动到该分类顶部菜品所在位置（类似于 HTML 里的锚点功能）</p></li></ol><h2 id="滚动右边菜品联动左边分类"><a href="#滚动右边菜品联动左边分类" class="headerlink" title="滚动右边菜品联动左边分类"></a>滚动右边菜品联动左边分类</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>使用微信小程序提供的API <code>wx.createSelectorQuery</code> 创建节点查询器，获取右边菜品栏每一个分类菜品的高度</p></li><li><p>用一个数组变量 <code>heightset</code> 存储右边每一个分类菜品的高度</p></li><li><p>用一个变量 <code>trigger</code> 记录当前左边所在类目选中的值</p></li><li><p>用一个变量 <code>tophei</code> 记录滚动时距离顶部的高度</p></li><li><p>右边菜品栏滚动时获取当前滚动的高度</p><ul><li><p>若该高度大于 <code>tophei</code>，右边菜品栏向下滚动，若该高度大于 <code>heightset</code> 中 <code>trigger</code> 对应的高度时跳转下一个分类</p></li><li><p>若该高度小于 <code>tophei</code>，右边菜品栏向上滚动，若该高度小于 <code>heightset</code> 中 <code>trigger</code> 对应的高度时跳转上一个分类</p></li></ul></li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">goods_height</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>heightset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> cate_height <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createSelectorQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    query<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">'.rig-height'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    query<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            cate_height <span class="token operator">+=</span> item<span class="token punctuation">.</span>height            <span class="token keyword">this</span><span class="token punctuation">.</span>heightset<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cate_height<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">scroll</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>scrollTop    <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tophei<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heightset<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>trigger<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>trigger <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heightset<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>trigger <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>trigger <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tophei <span class="token operator">=</span> scrollTop<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="点击左边分类联动右边菜品"><a href="#点击左边分类联动右边菜品" class="headerlink" title="点击左边分类联动右边菜品"></a>点击左边分类联动右边菜品</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>利用<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">文档</a>提供的 <code>scroll-into-view</code>实现类似于锚点的效果，用一个变量 <code>scroll_into</code> 记录当前视图元素 id 值（此前已设置为对应分类的 cid），点击左边分类时将该分类的 cid 赋值给 <code>scroll_into</code> </p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">itemIze</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> cid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>trigger <span class="token operator">=</span> index    <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_into <span class="token operator">=</span> cid    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 防止因为已经点击过而不能二次触发</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_into <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 实战 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（三）</title>
      <link href="/2021/12/07/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-san/"/>
      <url>/2021/12/07/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-san/</url>
      
        <content type="html"><![CDATA[<h1 id="创建云函数"><a href="#创建云函数" class="headerlink" title="创建云函数"></a>创建云函数</h1><p>创建uniapp项目时， 如果勾选了 <code>启用uniCloud</code> ，会创建一个uniCloud云开发环境，因为前面在创建项目的时候没有勾选 <code>启用uniCloud</code> 选项，所以这里需要自己创建云服务空间。</p><p>在 <code>HBuilderX</code> 编辑器打开 <code>manifest.json</code> 源码视图，在 <code>mp-weixin</code> 选项新增 cloudfunctionRoot 字段，指定本地已存在的目录作为云开发的本地根目录</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"mp-weixin"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">"appid"</span> <span class="token operator">:</span> <span class="token string">"APPID"</span><span class="token punctuation">,</span>    <span class="token string-property property">"setting"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string-property property">"urlCheck"</span> <span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string-property property">"usingComponents"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string-property property">"cloudfunctionRoot"</span><span class="token operator">:</span> <span class="token string">"cloudfunctions/"</span>  <span class="token comment">// +</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>HBuilderX</code> 运行微信开发者工具，在微信开发者工具编辑器中新建 <code>cloudfunctions</code> 目录，然后右键 <code>新建Node.js云函数</code></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gx4lixk5hfj207m0a6myn.jpg"></p><p>点击刚创建的云函数目录，右键 <code>在内建终端打开</code>，执行 <code>npm install --save wx-server-sdk@latest</code> 【文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/wx-server-sdk.html">在云函数中使用 wx-server-sdk</a>】</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gx4lrwwrqwj20ji0o6gzl.jpg"></p><p>在 <code>cloudfunctions/Dish-manage/index.js</code> 文件中编写云函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 云函数入口文件</span><span class="token keyword">const</span> cloud <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'wx-server-sdk'</span><span class="token punctuation">)</span>cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token string">'改为你自己的云环境id'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> db <span class="token operator">=</span> cloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> _ <span class="token operator">=</span> db<span class="token punctuation">.</span>command<span class="token keyword">const</span> category <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'dishes-category'</span><span class="token punctuation">)</span><span class="token comment">//菜品类目数据库</span><span class="token keyword">const</span> dishes <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'dishes-data'</span><span class="token punctuation">)</span><span class="token comment">//菜品所有数据</span><span class="token comment">// 云函数入口函数event:可以接到前端传来的值</span>exports<span class="token punctuation">.</span><span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// 1.请求数据库的菜品类目的数据</span><span class="token comment">// 2.请求所有菜品的数据</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res_cate <span class="token operator">=</span> <span class="token keyword">await</span> category<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span>_<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// console.log(res_cate.data)</span>      <span class="token keyword">const</span> res_dis <span class="token operator">=</span> <span class="token keyword">await</span> dishes<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">onsale</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> newdata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      res_dis<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span>category<span class="token punctuation">,</span>cid<span class="token punctuation">,</span><span class="token operator">...</span>data<span class="token punctuation">}</span> <span class="token operator">=</span> item        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>newdata<span class="token punctuation">[</span>cid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          newdata<span class="token punctuation">[</span>cid<span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">{</span>            category<span class="token punctuation">,</span>            cid<span class="token punctuation">,</span>            <span class="token literal-property property">good_query</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        newdata<span class="token punctuation">[</span>cid<span class="token punctuation">]</span><span class="token punctuation">.</span>good_query<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> list <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>newdata<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>      <span class="token keyword">return</span><span class="token punctuation">{</span>        <span class="token literal-property property">res_cate</span><span class="token operator">:</span>res_cate<span class="token punctuation">.</span>data<span class="token punctuation">,</span>        <span class="token literal-property property">res_dis</span><span class="token operator">:</span>list      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> error  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>右键 <code>启动云函数本地调试</code></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gx4mgilkvrj217w0nzk0n.jpg"></p><p>能正确返回结果即成功，再右键选择 <code>上传并部署：云端安装依赖（不上传node_modules）</code>，查看云开发控制台中云函数列表是否部署成功</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gx4mkmbq6lj20x309fn0j.jpg"></p><h1 id="小程序端调用云函数"><a href="#小程序端调用云函数" class="headerlink" title="小程序端调用云函数"></a>小程序端调用云函数</h1><ol><li>小程序端初始化</li></ol><p>调用云函数、数据库、存储、云托管等 API 时，都需要指定所需访问的云环境 ID，意即指定访问哪个环境下的云函数/数据库/存储/云托管/…资源。有两种方式进行指定：1.使用默认示例 <code>wx.cloud</code>；2.为各个环境使用单独的实例</p><p>这里使用默认示例 <code>wx.cloud</code> 指定所需访问的云环境 ID</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// App.vue</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">env</span><span class="token operator">:</span> 云环境 <span class="token constant">ID</span><span class="token punctuation">,</span>  <span class="token literal-property property">traceUser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>小程序端调用</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages\home-page\page.vue</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">dishEs</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">callFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'要调用的云函数名称'</span><span class="token punctuation">,</span>       <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 传递给云函数的参数</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 实战 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（二）</title>
      <link href="/2021/12/06/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-er/"/>
      <url>/2021/12/06/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-er/</url>
      
        <content type="html"><![CDATA[<p>根据设计稿在 <code>pages\页面.vue</code> 文件中写好页面布局和样式，此处不述</p><h1 id="pages-json-文件"><a href="#pages-json-文件" class="headerlink" title="pages.json 文件"></a>pages.json 文件</h1><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等。<a href="https://uniapp.dcloud.io/collocation/pages">官网</a></p><p>以下内容摘自文档</p><h2 id="配置项列表"><a href="#配置项列表" class="headerlink" title="配置项列表"></a>配置项列表</h2><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th></tr></thead><tbody><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">globalStyle</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=pages">pages</a></td><td align="left">Object Array</td><td align="left">是</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=easycom">easycom</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=tabbar">tabBar</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=condition">condition</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=subpackages">subPackages</a></td><td align="left">Object Array</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=preloadrule">preloadRule</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/workers.html">workers</a></td><td align="left">String</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=leftwindow">leftWindow</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=topwindow">topWindow</a></td><td align="left">Object</td><td align="left">否</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=rightwindow">rightWindow</a></td><td align="left">Object</td><td align="left">否</td></tr></tbody></table><h2 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h2><p><code>uni-app</code> 通过 pages 节点配置应用由哪些页面组成，pages 节点接收一个数组，数组每个项都是一个对象，其属性值如下：</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">path</td><td align="left">String</td><td align="left">配置页面路径</td></tr><tr><td align="left">style</td><td align="left">Object</td><td align="left">配置页面窗口表现</td></tr></tbody></table><blockquote><p>注意</p><ul><li>pages节点的第一项为应用入口页（即首页）</li><li>应用中新增/减少页面，都需要对 pages 数组进行修改</li><li>文件名不需要写后缀，框架会自动寻找路径下的页面资源</li></ul></blockquote><p>代码示例：</p><p>开发目录为：</p><pre class="line-numbers language-none"><code class="language-none">┌─pages               │  ├─index│  │  └─index.vue    │  └─login│     └─login.vue    ├─static             ├─main.js       ├─App.vue          ├─manifest.json  └─pages.json         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则需要在 pages.json 中填写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string-property property">"pages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string-property property">"path"</span><span class="token operator">:</span> <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>             <span class="token string-property property">"style"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token string-property property">"path"</span><span class="token operator">:</span> <span class="token string">"pages/login/login"</span><span class="token punctuation">,</span>             <span class="token string-property property">"style"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 实战 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发小程序端（一）</title>
      <link href="/2021/12/03/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-yi/"/>
      <url>/2021/12/03/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-xiao-cheng-xu-duan-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="页面设计"><a href="#页面设计" class="headerlink" title="页面设计"></a>页面设计</h1><ol><li><p>欢迎页</p></li><li><p>选桌页</p></li><li><p>点餐页</p></li><li><p>菜品详情页</p></li><li><p>订单详情页</p></li><li><p>我的订单页</p></li></ol><h1 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h1><ol><li><p>打开 <code>HBuilderX</code> 创建一个默认模板的 <code>uni-app</code> 项目</p></li><li><p>在 <code>manifest.json</code> 文件配置 <code>appid</code></p></li><li><p>在 <code>pages</code> 目录创建页面文件</p></li><li><p>在 <code>pages.json</code> 文件配置路由信息</p></li><li><p>工具栏 -&gt; 运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具</p></li></ol><blockquote><p>一些乱七八糟的碎碎念<br>    原本是边做项目边写笔记的，这样记的也要清晰一些，上个月因为小孩肠胃炎+全家食物中毒+一些柴米油盐的琐事，每天用于学习的时间就愈发少了，有点无奈🍂<br>    生活一地鸡毛，扫扫还是要继续的阿</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 实战 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（十）</title>
      <link href="/2021/11/07/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi/"/>
      <url>/2021/11/07/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="菜品类目页"><a href="#菜品类目页" class="headerlink" title="菜品类目页"></a>菜品类目页</h1><h2 id="前端接口"><a href="#前端接口" class="headerlink" title="前端接口"></a>前端接口</h2><p>添加菜品类目：addcategor</p><p>获取菜品类目：obtaincate</p><h2 id="添加菜品类目"><a href="#添加菜品类目" class="headerlink" title="添加菜品类目"></a>添加菜品类目</h2><ol><li>校验函数校验是否为空</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">catecheck</span> <span class="token keyword">extends</span> <span class="token class-name">checking</span> <span class="token punctuation">{</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'请输入菜品类目'</span><span class="token punctuation">]</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Errunder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">Blank</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>菜品类目数据库集合设计</li></ol><pre class="line-numbers language-none"><code class="language-none">[{cid：'a+时间戳',//分类idcount：number,//该分类下有多少商品value: '菜品类目',label: '菜品类目',sele_quantity:0,//小程序端用户在该分类下添加了多少商品}]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.数据库操作语句</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').where({label:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).get()</span><span class="token template-punctuation string">`</span></span><span class="token comment">// 获取数据库指定类目的记录，若有记录则该类目已存在</span><span class="token keyword">const</span> cate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').add({data:{value:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',label:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',count:0,sele_quantity:0}})</span><span class="token template-punctuation string">`</span></span><span class="token comment">// 向数据库添加菜品类目记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>使用前面封装过的 <code>getToken().posteve(dataUrl, query)</code> 接口查询是否已存在，若不存在则向数据库添加记录，反之返回客户端已存在响应</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'该类目已存在'</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> cate<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'添加成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'添加失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取菜品类目"><a href="#获取菜品类目" class="headerlink" title="获取菜品类目"></a>获取菜品类目</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/obtaincate'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>page<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">let</span> sk <span class="token operator">=</span> page <span class="token operator">*</span> <span class="token number">10</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').orderBy('cid','desc').limit(10).skip('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sk<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">total</span><span class="token operator">:</span>res<span class="token punctuation">.</span>pager<span class="token punctuation">.</span>Total<span class="token punctuation">}</span>    <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span><span class="token literal-property property">result</span><span class="token operator">:</span>data<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>total<span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h2><ul><li><code>ctx.query</code> 获取解析的查询字符串, 当没有查询字符串时，返回一个空对象</li><li><code>Collection.orderBy(fieldPath: string, string: order)</code> 指定查询排序条件</li><li><code>Collection.limit(value: number)</code> 指定查询结果集数量上限</li><li><code>Collection.skip(offset: number)</code> 指定查询返回结果时从指定序列后的结果开始返回，常用于分页</li></ul><h1 id="菜品管理页"><a href="#菜品管理页" class="headerlink" title="菜品管理页"></a>菜品管理页</h1><h2 id="前端接口-1"><a href="#前端接口-1" class="headerlink" title="前端接口"></a>前端接口</h2><p>获取菜品单位：obtainunit</p><p>添加菜品单位：dishunit</p><p>获取菜品：obtaindishes</p><p>上架菜品：uploaddishes</p><p>下架菜品：fromsale</p><p>修改上架的菜品：modifydishes</p><h2 id="获取菜品单位"><a href="#获取菜品单位" class="headerlink" title="获取菜品单位"></a>获取菜品单位</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/obtainunit'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishunit').get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加菜品单位"><a href="#添加菜品单位" class="headerlink" title="添加菜品单位"></a>添加菜品单位</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/dishunit'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> unid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>unit<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">unitcheck</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishunit').where({label:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">const</span> cate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishunit').add({data:{value:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',label:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',unid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'该菜品单位已存在'</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> cate<span class="token punctuation">)</span>      <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'添加成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'添加失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取菜品"><a href="#获取菜品" class="headerlink" title="获取菜品"></a>获取菜品</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/obtaindishes'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span>page<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">let</span> sk <span class="token operator">=</span> page <span class="token operator">*</span> <span class="token number">10</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-data').orderBy('time', 'desc').limit(10).skip(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sk<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">).get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>TripUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">total</span><span class="token operator">:</span>res<span class="token punctuation">.</span>pager<span class="token punctuation">.</span>Total<span class="token punctuation">}</span>    <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span><span class="token literal-property property">result</span><span class="token operator">:</span>data<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>total<span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="上架菜品"><a href="#上架菜品" class="headerlink" title="上架菜品"></a>上架菜品</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/uploaddishes'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> category<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> image<span class="token punctuation">,</span> value<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">putoncheck</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> category<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> image<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-data').add({data:{    category:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',name:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',unitprice:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unitprice<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,unit:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',image:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,quantity:0,onsale:true,cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',time:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',monthlysale:0  }})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').where({cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).update({data:{count:db.command.inc(1)}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span><span class="token string">'提交成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'提交失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下架菜品"><a href="#下架菜品" class="headerlink" title="下架菜品"></a>下架菜品</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/fromsale'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> value<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-data').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').update({data:{onsale:false}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').where({cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).update({data:{count:db.command.inc(-1)}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'下架成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改上架的菜品"><a href="#修改上架的菜品" class="headerlink" title="修改上架的菜品"></a>修改上架的菜品</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/modifydishes'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> category<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> image<span class="token punctuation">,</span> value<span class="token punctuation">,</span> valueBefore<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">putoncheck</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> category<span class="token punctuation">,</span> name<span class="token punctuation">,</span> unitprice<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> image<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-data').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').update({data:{    category:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',name:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',unitprice:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unitprice<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,unit:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',image:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,quantity:0,onsale:true,cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',time:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'  }})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">let</span> countBefore <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').where({cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>valueBefore<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).update({data:{count:db.command.inc(-1)}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">let</span> countAfter <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('dishes-category').where({cid:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'}).update({data:{count:db.command.inc(1)}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> countBefore<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> countAfter<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'修改成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（九）</title>
      <link href="/2021/10/31/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-jiu/"/>
      <url>/2021/10/31/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-jiu/</url>
      
        <content type="html"><![CDATA[<h1 id="商家信息校验"><a href="#商家信息校验" class="headerlink" title="商家信息校验"></a>商家信息校验</h1><ul><li><p>商家信息表单字段：</p><ul><li>店铺名称</li><li>店铺地址</li><li>店铺logo</li></ul></li><li><p>需校验：</p><ul><li>所有字段不得为空</li><li>不能有空格符</li></ul><p>  在不满足条件的情况点击提交给用户相应的提醒</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Arrfun</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">Parameter</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> bvc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bvc <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>bvc<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">202</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">Blank</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> vbn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vbn<span class="token punctuation">)</span>    <span class="token keyword">let</span> bvc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>vbn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bvc <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>bvc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="上传商家信息数据到数据库"><a href="#上传商家信息数据到数据库" class="headerlink" title="上传商家信息数据到数据库"></a>上传商家信息数据到数据库</h1><p>使用<a href="https://april-cl.github.io/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-si/">实战篇笔记 扫码点餐小程序云开发（四）</a>封装的 <code>getToken().posteve(dataUrl, query)</code> API接口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/uploadshop'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> logo<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">shopinfor</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> logo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('shop-infor').add({data:{name:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',address:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',logo:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>logo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'提交成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'提交失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="从数据库拉取商家信息数据"><a href="#从数据库拉取商家信息数据" class="headerlink" title="从数据库拉取商家信息数据"></a>从数据库拉取商家信息数据</h1><p>使用<a href="https://april-cl.github.io/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-si/">实战篇笔记 扫码点餐小程序云开发（四）</a>封装的 <code>getToken().posteve(dataUrl, query)</code> API接口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/obtainshop'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('shop-infor').get()</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>Tripurl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'提交失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="修改店铺信息"><a href="#修改店铺信息" class="headerlink" title="修改店铺信息"></a>修改店铺信息</h1><p>使用<a href="https://april-cl.github.io/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-si/">实战篇笔记 扫码点餐小程序云开发（四）</a>封装的 <code>getToken().posteve(dataUrl, query)</code> API接口</p><p>和初次设置共用同一页面，通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/database/collection/Collection.doc.html">Collection.doc(id: string): Document</a> 获取集合中指定记录的引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/modifyshop'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> logo<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body  <span class="token keyword">new</span> <span class="token class-name">shopinfor</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> logo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection('shop-infor').doc('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">').update({data:{name:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',address:'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">',logo:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>logo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}})</span><span class="token template-punctuation string">`</span></span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>UpdateUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'修改成功'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">'修改失败，服务器发生错误'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（八）</title>
      <link href="/2021/10/28/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-ba/"/>
      <url>/2021/10/28/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-ba/</url>
      
        <content type="html"><![CDATA[<h1 id="腾讯云对象存储"><a href="#腾讯云对象存储" class="headerlink" title="腾讯云对象存储"></a>腾讯云对象存储</h1><p>对象存储（Cloud Object Storage，COS）是腾讯云提供的一种存储海量文件的分布式存储服务，具有高扩展性、低成本、可靠安全等优点。</p><p><a href="https://cloud.tencent.com/document/product/436">文档传送门</a></p><h2 id="安装-SDK"><a href="#安装-SDK" class="headerlink" title="安装 SDK"></a>安装 SDK</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i cos-nodejs-sdk-v5 <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h2><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvvictlcjtj21hb0nldpp.jpg"></p><h2 id="获取-SecretId、SecretKey"><a href="#获取-SecretId、SecretKey" class="headerlink" title="获取 SecretId、SecretKey"></a>获取 SecretId、SecretKey</h2><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvv43hchszj215o0dz79v.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvv43s4pppj21h90gxgsb.jpg"></p><h2 id="使用-Upload-File-接口"><a href="#使用-Upload-File-接口" class="headerlink" title="使用 Upload File 接口"></a>使用 Upload File 接口</h2><p>Upload File 实现高级上传，传入参数 SliceSize 可以控制文件大小超出一个数值（默认1MB）时自动使用分块上传，否则使用简单上传</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">COS</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cos-nodejs-sdk-v5'</span><span class="token punctuation">)</span><span class="token keyword">var</span> cos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">COS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">SecretId</span><span class="token operator">:</span> <span class="token string">'SECRETID'</span><span class="token punctuation">,</span>  <span class="token literal-property property">SecretKey</span><span class="token operator">:</span> <span class="token string">'SECRETKEY'</span><span class="token punctuation">,</span>  <span class="token literal-property property">Protocol</span><span class="token operator">:</span> <span class="token string">'https:'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> Bucket <span class="token operator">=</span> <span class="token string">'examplebucket-1250000000'</span><span class="token keyword">let</span> Region <span class="token operator">=</span> <span class="token string">'COS_REGION'</span><span class="token keyword">let</span> <span class="token function-variable function">codfun</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    cos<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      Bucket<span class="token punctuation">,</span>      Region<span class="token punctuation">,</span>      <span class="token literal-property property">Key</span><span class="token operator">:</span> filename<span class="token punctuation">,</span>        <span class="token comment">// 对象在存储桶中的唯一标识</span>      <span class="token literal-property property">FilePath</span><span class="token operator">:</span> path        <span class="token comment">// 本地文件路径</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Location<span class="token punctuation">)</span> <span class="token comment">// 对象的外网访问域名</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由页调用接口"><a href="#路由页调用接口" class="headerlink" title="路由页调用接口"></a>路由页调用接口</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>upload<span class="token punctuation">,</span> codfun<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../cos/cos.js'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/uploadres'</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">codfun</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>file<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在-postman-发送请求"><a href="#在-postman-发送请求" class="headerlink" title="在 postman 发送请求"></a>在 postman 发送请求</h2><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvvj46tytij20z60mbgvd.jpg" alt="nodemon-upload3.png"></p><h2 id="服务器端接受到文件"><a href="#服务器端接受到文件" class="headerlink" title="服务器端接受到文件"></a>服务器端接受到文件</h2><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvvj4i8lk1j21100hh43u.jpg" alt="nodemon-upload4.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（七）</title>
      <link href="/2021/10/27/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-qi/"/>
      <url>/2021/10/27/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><p>Multer 是一个 node.js 中间件，用于处理 multipart/form-data 类型的表单数据，它主要用于上传文件。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> multer <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.npmjs.com/package/multer">NPM multer</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="文件上传中间件"><a href="#文件上传中间件" class="headerlink" title="文件上传中间件"></a>文件上传中间件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@koa/multer'</span><span class="token punctuation">)</span><span class="token keyword">const</span> storage <span class="token operator">=</span> multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 配置上传文件的目录</span>  <span class="token function-variable function">destination</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'upload/image'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 更改文件名防止重名</span>  <span class="token function-variable function">filename</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>    <span class="token keyword">let</span> fileFormat <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileFormat<span class="token punctuation">)</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token string">'.'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileFormat<span class="token punctuation">[</span>fileFormat<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>storage<span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>upload<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路由页"><a href="#路由页" class="headerlink" title="路由页"></a>路由页</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>upload<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../cos/cos.js'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/uploadres'</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'111111'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 postman 中向 <code>localhost:5000/api/uploadres</code> 发送 <code>POST</code> 请求可看到文件已保存以及服务端响应</p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvtsiwhbetj206t02xq38.jpg"></p><p><img src="http://tva1.sinaimg.cn/large/eb8a9ea3gy1gvtslr0w76j207j02fq38.jpg"></p><blockquote><p>单纯想吐个槽😑<br>原本做的时候是没问题的，第二天才想着要截图又重新在 postman 发个请求结果死活发不过去，看 commit 也没修改过什么嘛，重新来一遍也不行，后来把 console.log 注释就可以了（￣.￣）写代码是一门玄学，平心静气，love &amp; peace …</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（六）</title>
      <link href="/2021/10/21/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-liu/"/>
      <url>/2021/10/21/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="实现登录功能"><a href="#实现登录功能" class="headerlink" title="实现登录功能"></a>实现登录功能</h1><p>思路：</p><ol><li><p>获取请求字段值</p></li><li><p>使用数据库查询语句 <code>db.collection("表名").where({查询条件键值对}).get()</code></p></li><li><p>判断查询结果，若没有返回数据则提示<code>账号或密码有误</code>，反之登录成功</p></li></ol><h1 id="验证-token-合法性"><a href="#验证-token-合法性" class="headerlink" title="验证 token 合法性"></a>验证 token 合法性</h1><p>使用 <code>basic-auth</code> 解析前端在 header 中传来的 token，使用 <a href="https://github.com/auth0/node-jsonwebtoken#jwtsignpayload-secretorprivatekey-options-callback"><code>jwt.verify(token, secretOrPublicKey, [options, callback])</code></a> 验证 token 合法性</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（五）</title>
      <link href="/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-wu/"/>
      <url>/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="前端字段参数校验"><a href="#前端字段参数校验" class="headerlink" title="前端字段参数校验"></a>前端字段参数校验</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">checking</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> <span class="token operator">...</span>obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> ctx    <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 校验前端传来的值为undefined</span>  <span class="token function">Errunder</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> bvc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bvc <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span><span class="token string">'参数填写错误'</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 校验前端传来的值</span>  <span class="token comment">// field：要校验的字段</span>  <span class="token comment">// msg：报错信息</span>  <span class="token comment">// num：下标</span>  <span class="token function">ValidField</span> <span class="token punctuation">(</span><span class="token parameter">field<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token comment">// 校验手机号码格式</span>      <span class="token string-property property">'phone'</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[3456789]\d{9}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">// 密码校验：6-20位数字和字母结合</span>      <span class="token string-property property">'password'</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?![\d]+$)(?![a-zA-Z]+$)(?![^\da-zA-Z]+$).{6,20}$</span><span class="token regex-delimiter">/</span></span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token number">202</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注册商家账号"><a href="#注册商家账号" class="headerlink" title="注册商家账号"></a>注册商家账号</h1><p>思路：</p><ol><li><p>使用查询语句向数据库查询手机号码之前是否已经注册过</p></li><li><p>已经注册过：返回响应结果“已经注册过了”</p></li><li><p>还没有注册过：根据注册时间生成 <code>uid</code>，使用 <code>JSON.stringify()</code> 格式化生成新纪录，向数据库执行增加记录操作</p></li></ol><h1 id="生成-token-令牌"><a href="#生成-token-令牌" class="headerlink" title="生成 token 令牌"></a>生成 token 令牌</h1><p>1.什么是Token？<br>在计算机身份认证中是令牌（临时）的意思，在词法分析中是标记的意思。一般我们所说的的token大多是指用于身份验证的token</p><p>2.为什么使用token?<br>我们需要每次都知道当前请求的人是谁，但是又不想每次都让他提交用户名和密码，这时就需要有一个等同于用户名密码也能够标识用户身份的东西，即—token.</p><p>3.基于Token的身份验证方法<br>客户端使用用户名和密码请求登录<br>服务端收到请求，验证登录是否成功<br>验证成功后，服务端会返回一个Token给客户端，反之，返回身份验证失败的信息<br>客户端收到Token后把Token用一种方式存储起来,如( cookie / localstorage / sessionstorage / 其他 )<br>客户端每次发起请求时都会将Token发给服务端<br>服务端收到请求后，验证Token的合法性，合法就返回客户端所需数据，反之，返回验证失败的信息</p><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token keyword">const</span> security <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">secretKey</span><span class="token operator">:</span> <span class="token string">'abcdefg'</span><span class="token punctuation">,</span>  <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">gentoken</span> <span class="token punctuation">(</span><span class="token parameter">uid<span class="token punctuation">,</span> scope <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>secretKey<span class="token punctuation">,</span> expiresIn<span class="token punctuation">}</span> <span class="token operator">=</span> security  <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span>uid<span class="token punctuation">,</span> scope<span class="token punctuation">}</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">,</span> <span class="token punctuation">{</span>expiresIn<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> token<span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>gentoken<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（四）</title>
      <link href="/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-si/"/>
      <url>/2021/10/19/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-si/</url>
      
        <content type="html"><![CDATA[<h1 id="操作数据库记录"><a href="#操作数据库记录" class="headerlink" title="操作数据库记录"></a>操作数据库记录</h1><p>在 <code>databaseapi.js</code> 文件中进行数据记录增删改查</p><p>思路：</p><ol><li><p>定义一个变量存储云环境 ID</p></li><li><p>定义一个变量存储对应操作的请求 URL</p></li><li><p>通过 <code>axios.post()</code> 方法向指定 URL 发送请求，请求数据为 <code>env</code> （云环境 ID）和 <code>query</code> （数据库操作语句返回值），返回一个 JSON 数据包</p></li></ol><p>示例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// databaseapi.js</span><span class="token keyword">let</span> env <span class="token operator">=</span> cloudID<span class="token keyword">let</span> AddUrl <span class="token operator">=</span> <span class="token string">'https://api.weixin.qq.com/tcb/databaseadd?access_token='</span><span class="token keyword">class</span> <span class="token class-name">getToken</span> <span class="token punctuation">{</span>  <span class="token comment">//调用云开发http api接口</span>  <span class="token keyword">async</span> <span class="token function">posteve</span><span class="token punctuation">(</span><span class="token parameter">dataUrl<span class="token punctuation">,</span> query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">gettoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>dataUrl <span class="token operator">+</span> token<span class="token punctuation">,</span> <span class="token punctuation">{</span>env<span class="token punctuation">,</span> query<span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>errcode <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>data      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token string">'请求出错'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// app.js</span><span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">db.collection("ceshi").add({data:{name:'name'}})</span><span class="token template-punctuation string">`</span></span><span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">posteve</span><span class="token punctuation">(</span>AddUrl<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h2><p>请求地址</p><pre class="line-numbers language-none"><code class="language-none">POST https://api.weixin.qq.com/tcb/databaseadd?access_token=ACCESS_TOKEN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h2><p>请求地址</p><pre class="line-numbers language-none"><code class="language-none">POST https://api.weixin.qq.com/tcb/databasedelete?access_token=ACCESS_TOKEN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>请求地址</p><pre class="line-numbers language-none"><code class="language-none">POST https://api.weixin.qq.com/tcb/databaseupdate?access_token=ACCESS_TOKEN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h2><p>请求地址</p><pre class="line-numbers language-none"><code class="language-none">POST https://api.weixin.qq.com/tcb/databasequery?access_token=ACCESS_TOKEN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（三）</title>
      <link href="/2021/10/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-san/"/>
      <url>/2021/10/17/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-san/</url>
      
        <content type="html"><![CDATA[<h1 id="获取云开发调用凭证"><a href="#获取云开发调用凭证" class="headerlink" title="获取云开发调用凭证"></a>获取云开发调用凭证</h1><p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/quickstart.html">微信官方文档</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html">auth.getAccessToken</a></p><ol><li>安装 <code>axios</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install axios <span class="token operator">--</span>save        <span class="token comment">// Ajax请求模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>创建数据库操作接口文件 <code>databaseapi.js</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./handle.js'</span><span class="token punctuation">)</span><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET'</span>   <span class="token comment">// APPID、APPSECRET 需自己传入</span><span class="token keyword">class</span> <span class="token class-name">getToken</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">async</span> <span class="token function">gettoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> token<span class="token punctuation">.</span>data<span class="token punctuation">.</span>access_token      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token string">'获取 token 错误'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>getToken<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>调用数据库操作api接口</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// login.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span>getToken<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../config/databaseapi.js'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gettoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（二）</title>
      <link href="/2021/10/16/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-er/"/>
      <url>/2021/10/16/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-er/</url>
      
        <content type="html"><![CDATA[<h1 id="设置全局异常处理中间件"><a href="#设置全局异常处理中间件" class="headerlink" title="设置全局异常处理中间件"></a>设置全局异常处理中间件</h1><ul><li><p>在开发中，为了及时的反馈信息，与前端对接好，异常处理，是后端必须去做的一种事情，反馈正确的信息，可以加快bug的解决</p></li><li><p>在 node中，由于基本都是异步方法，所以，为了能够处理好异步的异常，我们需要使用 async/await来解决</p></li></ul><ol><li>创建异常基类</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// handle.js</span><span class="token keyword">class</span> <span class="token class-name">result</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建处理异常中间件</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// abnormal.js</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./handle.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">abnormal</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> isresult <span class="token operator">=</span> err <span class="token keyword">instanceof</span> <span class="token class-name">result</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isresult<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">msg</span><span class="token operator">:</span> err<span class="token punctuation">.</span>msg      <span class="token punctuation">}</span>      ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> err<span class="token punctuation">.</span>code    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'服务器反生错误'</span>      <span class="token punctuation">}</span>      ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">500</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> abnormal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>注册全局异常处理中间件</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// app.js</span><span class="token keyword">const</span> abnormal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config/abnormal.js'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>abnormal<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="统一返回给前端的-JSON-格式"><a href="#统一返回给前端的-JSON-格式" class="headerlink" title="统一返回给前端的 JSON 格式"></a>统一返回给前端的 JSON 格式</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// result.js</span><span class="token keyword">class</span> <span class="token class-name">result</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> msg<span class="token operator">=</span><span class="token string">'SUCCESS'</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> extra<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> ctx    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data    <span class="token keyword">this</span><span class="token punctuation">.</span>extra <span class="token operator">=</span> extra  <span class="token punctuation">}</span>  <span class="token function">answer</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">,</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>      <span class="token literal-property property">extra</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>extra    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="https://blog.csdn.net/pig_is_duck/article/details/107916036?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_aggregation-2-107916036.pc_agg_rank_aggregation&amp;utm_term=node+%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86&amp;spm=1000.2123.3001.4430">KOA — 5. 全局异常处理</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烟火集——湿炒牛河</title>
      <link href="/2021/10/16/yan-huo-ji-shi-chao-niu-he/"/>
      <url>/2021/10/16/yan-huo-ji-shi-chao-niu-he/</url>
      
        <content type="html"><![CDATA[<p>做为一个常年在外生活的潮汕人，肠粉和牛肉粿的味道始终在我的乡愁中萦绕。尝试自己动手做过，肠粉一直复刻不出那种味道，不正宗的湿炒牛河倒是做了几回挺得我意的（感觉灵魂还是在于沙茶酱😋）</p><h1 id="用料"><a href="#用料" class="headerlink" title="用料"></a>用料</h1><table><thead><tr><th>食材</th><th>用量</th></tr></thead><tbody><tr><td>牛肉</td><td>根据用餐人数</td></tr><tr><td>粿条</td><td>根据用餐人数</td></tr><tr><td>鸡蛋</td><td>随意</td></tr><tr><td>酱油</td><td>适量（用于炒粿条）</td></tr><tr><td>酱油</td><td>两勺（用于湿炒料汁）</td></tr><tr><td>沙茶酱</td><td>一勺（用于腌制牛肉）</td></tr><tr><td>沙茶酱</td><td>一勺（用于湿炒料汁）</td></tr><tr><td>食用油</td><td>适量（用于腌制牛肉）</td></tr><tr><td>食用油</td><td>适量（用于炒牛河）</td></tr><tr><td>蚝油</td><td>一勺</td></tr><tr><td>生粉</td><td>适量（用于腌制牛肉）</td></tr><tr><td>生粉</td><td>适量（用于湿炒料汁）</td></tr><tr><td>水</td><td>半碗</td></tr></tbody></table><p>此菜谱用量不求精准，因为大多数时候我并没有按上面的量放</p><p>锅具：铸铁炒锅</p><h1 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h1><ul><li><p>牛肉切薄片后浸泡于清水中，出血水后沥干，加『食用油』、『沙茶酱』、『生粉』进行腌制</p></li><li><p>『鸡蛋』磕入碗中打散备着</p></li><li><p>调湿炒料汁：『沙茶酱』 + 『酱油』 + 『蚝油』 + 『生粉』 + 『水』</p></li></ul><h1 id="湿炒步骤"><a href="#湿炒步骤" class="headerlink" title="湿炒步骤"></a>湿炒步骤</h1><ol><li><p>大火起锅烧干水分，转小火放油烧至有点小烟，放入鸡蛋液小炒至无流动液体状态（鸡蛋留在锅中亦可）</p></li><li><p>放入粿条炒至干爽状态，加入鸡蛋酱油调味炒均匀起锅</p></li><li><p>热油加入牛肉炒至变色</p></li><li><p>加入湿炒料汁大火煮开</p></li><li><p>将炒熟的牛肉码在粿条上，淋上料汁即可</p></li></ol><h1 id="成品图"><a href="#成品图" class="headerlink" title="成品图"></a>成品图</h1><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gvgjypeoxoj6334334qv802.jpg" alt="湿炒牛河.jpg"></p><p>这个菜谱做出来的是不能和外面买的相比，但解解馋还是OK的😎</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 菜谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战篇笔记 扫码点餐小程序云开发（一）</title>
      <link href="/2021/10/15/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-yi/"/>
      <url>/2021/10/15/shi-zhan-pian-bi-ji-sao-ma-dian-can-xiao-cheng-xu-yun-kai-fa-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>依旧是写在前面的碎碎念：💭<br>    学习编程我觉得最好的方式就是动手写代码⌨️<br>    相对于阅读文档，在提出需求解决需求的过程中以主动探索为驱动对于我来说能够更快速掌握技巧并加深印象🧠<br>    之前做过的项目也都会在笔记本上作记录，但后来发现这种纸质记录优势查询起来有些困难也不太利于回顾，所以现在要慢慢养成用博客来记录的习惯☺️</p></blockquote><h1 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h1><ol><li><p>使用 <code>npm init</code> 初始化项目</p></li><li><p>安装所需要的框架模块</p></li></ol><pre class="line-numbers language-none"><code class="language-none">npm install koa --save                  //koa框架npm install koa-json --save             //返回给前端的json对象npm install koa-bodyparser --save       //post提交的对象npm install koa-router --save           //路由npm install koa2-cors --sav             //解决跨区npm install nodemon --save              //启动服务器端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建 <code>.gitignore</code> 文件</li></ol><pre class="line-numbers language-none"><code class="language-none">/.idea/node_modulespackage-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>创建入口文件 <code>app.js</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-json'</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2-cors'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>在编辑器终端输入 <code>nodemon app.js</code></li></ol><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gvgigm0j4yj60ba0440u002.jpg"></p><p>搭建完成🎉</p><h1 id="访问登录页"><a href="#访问登录页" class="headerlink" title="访问登录页"></a>访问登录页</h1><ol><li>创建登录页 <code>login.js</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'login.js'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在 <code>app.js</code> 注入接口</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router/login/login.js'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> login<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>在编辑器终端输入 <code>nodemon app.js</code></p></li><li><p>在浏览器访问 <code>http://localhost:4000/api/register</code></p></li><li><p>回到编辑器终端可以看到</p></li></ol><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gvgixcu0boj60ay04v3zy02.jpg"></p><p>访问成功🎉</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> Node.js </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烟火集——鲍鱼鸡汤</title>
      <link href="/2021/10/07/yan-huo-ji-bao-yu-ji-tang/"/>
      <url>/2021/10/07/yan-huo-ji-bao-yu-ji-tang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言<br>    最近刚好想把日常菜谱记录下来，以往都是记在了下厨房，前两天写博客突然想到反正是记录，那就开个 Tag 来写菜谱叭~</p></blockquote><p>首次尝试炖鲍鱼鸡汤，本来我是对此类补汤无感的，但味道竟意外地好喝，所以记下来🤤</p><h1 id="用料"><a href="#用料" class="headerlink" title="用料"></a>用料</h1><table><thead><tr><th>食材</th><th>用量</th></tr></thead><tbody><tr><td>鲍鱼</td><td>5个</td></tr><tr><td>鸡架</td><td>1只</td></tr><tr><td>鱼胶</td><td>一小把</td></tr><tr><td>石斛</td><td>一小把</td></tr><tr><td>红枣</td><td>一小把</td></tr><tr><td>姜</td><td>一片</td></tr><tr><td>盐</td><td>3小勺</td></tr><tr><td>开水</td><td>5碗</td></tr></tbody></table><p>此菜谱用量不求精准，根据用餐人数调整用量🙆</p><p>炖汤电器：隔水炖</p><h1 id="泡发清洗准备"><a href="#泡发清洗准备" class="headerlink" title="泡发清洗准备"></a>泡发清洗准备</h1><ul><li><p>鱼胶提前泡水，此次泡了约3个小时</p></li><li><p>鲍鱼洗干净，可以用牙刷刷鲍鱼壳</p></li><li><p>鸡架洗干净，鸡架买的时候叫老板娘切成小块</p></li><li><p>红枣洗干净</p></li><li><p>石斛洗干净</p></li></ul><h1 id="炖汤过程"><a href="#炖汤过程" class="headerlink" title="炖汤过程"></a>炖汤过程</h1><ol><li><p>将洗净的鲍鱼带壳放入电饭锅中</p></li><li><p>先把鸡架焯水，即冷水下锅，同时放入姜片去腥，水沸腾后撇去浮沫至不再或仅有少量浮沫产生，将鸡架捞起放入凉水中洗净表面后放入电炖锅中</p></li><li><p>将洗净的红枣、石斛和鱼胶放入电炖锅中</p></li><li><p>倒入煮开的生命源泉</p></li><li><p>调整炖汤时间为3.5h，开始炖起✨</p></li><li><p>剩余0.1h时加入适量盐（这次实际上是加了4勺，喝着感觉咸了）</p></li></ol><p>稍稍等待片刻，美味即将到来🍲</p><p>哈哈哈这里应该放个成品图，但是今晚着急喝没拍好，下次补图📷</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 菜谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析 URL</title>
      <link href="/2021/10/07/qian-xi-url/"/>
      <url>/2021/10/07/qian-xi-url/</url>
      
        <content type="html"><![CDATA[<h1 id="URL（统一资源定位符）"><a href="#URL（统一资源定位符）" class="headerlink" title="URL（统一资源定位符）"></a>URL（统一资源定位符）</h1><p>通常是指用户在浏览器中输入的地址</p><pre class="line-numbers language-none"><code class="language-none">URL=协议://域名或IP:端口/路径?查询参数#锚点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><p>服务器一般使用两种协议：<code>HTTP</code>和<code>HTTPS</code></p><h1 id="域名或IP"><a href="#域名或IP" class="headerlink" title="域名或IP"></a>域名或IP</h1><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>IP 主要约定了两件事：</p><ol><li>如何定位一台设备，比如说我家在某市某区某村某门牌号，这就是我家的物理 IP</li><li>如何封装数据报文以跟其他设备交流</li></ol><p>IP 分为：</p><ol><li>内网 IP</li></ol><p>路由器在家中创建一个内网，家里通过路由器上网的设备会分配一个内网 IP</p><ol start="2"><li>外网 IP</li></ol><p>用户向网络服务商租用带宽所分配的 IP</p><p>外网 IP 和内网 IP 的互相访问需要经过路由器中转，但在同一网络的设备可以直接互相访问</p><p>特殊 IP</p><ol><li>127.0.0.1 表示自己</li><li>localhost 通过 host 指定为自己</li><li>0.0.0.0 不表示任何设备</li></ol><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>域名可以说是一个 IP 地址的代称，目的是为了便于记忆后者</p><p>可以通过 <code>ping</code> 命令获取一个域名对应的 IP</p><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv65e6xhasj60d205cq6i02.jpg" alt="ping截图.png"></p><p>域名和 IP 通过 <code>DNS</code> 对应起来，它们之间可以是一对多的关系</p><ul><li>一个域名对应多个 IP</li></ul><p>均衡负载，防止一台服务器崩溃，假想一下若是阿里域名只对应了一个 IP，双十一的访问量激增会导致怎样的后果</p><ul><li>一个 IP 对应多个域名</li></ul><p>共享主机。预算不足优选。</p><p>延伸：xxx.github.io 和 yyy.github.io 有同一个一级域名（github.io），但是是两个不同的网站</p><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>一个端口提供一种服务，就像你无法在电影院的售票口买到爆米花</p><p><a href="https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8">端口维基百科</a></p><p>端口和 IP 缺一不可</p><h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><p>可以用于请求不同页面</p><h1 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a>查询参数</h1><p>可以在同一页面显示不同内容</p><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv65j1b5b9j61bl0c0q8402.jpg" alt="查询参数.png"></p><h1 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h1><p>可以定位到页面位置，不会发送到服务器</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈浏览器的 Event Loop</title>
      <link href="/2021/10/02/tan-tan-event-loop/"/>
      <url>/2021/10/02/tan-tan-event-loop/</url>
      
        <content type="html"><![CDATA[<p>关于 Event Loop 网络上的文章写得很详尽，多看几篇反复思考勤动笔记录大致就能明白些了，这也是我一贯的学习方法。</p><p>在了解 Event Loop 之前先理解什么是<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack">执行栈（调用栈）</a>，记住，<strong>执行栈是存储</strong> <em><strong>函数调用</strong></em> <strong>的栈结构，遵循先进后出的原则</strong>（我因为这一点没想明白所以花了好多时间 😭）</p><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p>先看下这个形象的<a href="https://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html">类比</a></p><p>把计算机的核心 CPU 比作一座时刻运行的工厂。</p><p>进程就好比工厂的车间，它代表 CPU 所能处理的单个任务。任一时刻，CPU 总是运行一个进程，其他进程处于非运行状态。『进程是 CPU 资源分配的最小单位』</p><p>线程就好比车间里的工人，车间的房间（内存资源）对于工人共享的，这些工人协同完成一个任务。『线程是 CPU 调度的最小单位』</p><h1 id="单线程的-JavaScript"><a href="#单线程的-JavaScript" class="headerlink" title="单线程的 JavaScript"></a>单线程的 JavaScript</h1><p>所谓单线程，是指在 JavaScript 引擎中负责解释和执行 JavaScript 代码的线程唯一，同一时间上只能执行一件任务。假设 JavaScript 支持多线程，当一个线程在某 DOM 节点上添加内容，而另一个线程同时执行删除该 DOM 节点的任务，这时就会把浏览器搞懵了，所以，为了避免复杂性，从一诞生，JavaScript 就是单线程，这已经成了这门语言的核心特征。</p><h1 id="同步任务和异步任务"><a href="#同步任务和异步任务" class="headerlink" title="同步任务和异步任务"></a>同步任务和异步任务</h1><p>既然 JavaScript 是单线程的，那么当有多个任务则需要排队执行，如果前一个任务耗时很长，后一个任务就不得不一直等着，那么程序可能因为等待会出现假死状态，这对于一个用户体验很强的语言来说是非常不友好的。</p><p>为了解决这个问题，JavaScript 语言将任务的执行模式分为两种：同步和异步。</p><p>同步任务：必须等到结果来了之后才能做其他的事情，举例来说就是逛街时买衣服，你必须付了款才能把衣服带走。</p><p>异步任务：不需要等到结果来了才能继续往下走，等结果期间可以做其他的事情，结果来了会收到通知。举例来说就是要吃火锅，要排号等叫到了号才能进去吃，排号期间你可以继续逛街。</p><h1 id="执行栈和任务队列"><a href="#执行栈和任务队列" class="headerlink" title="执行栈和任务队列"></a>执行栈和任务队列</h1><p>JavaScript 的代码执行时：</p><ol><li><p>主线程会从上到下一步步的执行代码，同步任务会被依次加入执行栈中先执行。</p></li><li><p>主线程之外，还存在一个”任务队列”（task queue）。只要<strong>异步任务有了运行结果</strong>，就在”任务队列”之中放置一个事件。</p></li><li><p>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p></li><li><p>主线程不断重复上面的第三步。</p></li></ol><h1 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h1><p>那么问题来了，如果在执行异步任务回调事件的过程中突然有重要的数据需要获取，或是说有事件突然需要处理一下，按照队列遵循先进先出的原则，后来的事件都是被加在队尾等到前面的事件执行完了才会被执行。这个时候就催生了宏任务和微任务，微任务使得一些异步任务得到及时的处理。</p><p>也就是在上文 『<code>2. 主线程之外，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件</code>』 这一步中，将微任务放到本层循环的微任务队列（优先级高），将宏任务放到下层循环的宏任务队列（优先级低）。</p><p>这里也更正一下上文 『<code>3. 一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</code>』 ，应当是 『<code>一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"微任务任务队列"并将事件压入执行栈中执行至"微任务任务队列"为空（到这里也就是完成了一轮事件循环），完毕后将"宏任务队列"队头的第一个宏任务压入执行栈执行（后面就对应了上文步骤1、步骤2，有相关的微任务就进入微任务队列，宏任务就插到宏任务队列队尾）</code>』</p><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv4hdicllnj60p309nju202.jpg" alt="任务队列.png"></p><p>关于宏任务和微任务这有个<a href="https://juejin.cn/post/6844903657264136200#heading-0">例子</a>解释得很形象。</p><p>记住：<strong>在当前的微任务没有执行完成时，是不会执行下一个宏任务的</strong></p><p>先介绍一下(浏览器环境的)宏任务和微任务大致有哪些：</p><ul><li><p>宏任务</p><ul><li>script全部代码</li><li>setTimeout</li><li>setInterval    </li><li>I/O    </li><li>mouseover(之类的事件)</li><li>Web API大部分异步返回方法(XHR,fetch)</li></ul></li><li><p>微任务</p><ul><li>Promise.then catch finally</li><li>MutationObserver</li><li>queueMicrotask</li></ul></li></ul><h1 id="浏览器中的-Event-Loop"><a href="#浏览器中的-Event-Loop" class="headerlink" title="浏览器中的 Event Loop"></a>浏览器中的 Event Loop</h1><p>终于进入正题了，看前面的文字可能还有些晕乎，现在我们先来通过代码理解。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制这段代码到控制台，会发现输出顺序为：</p><pre class="line-numbers language-none"><code class="language-none">script startscript endpromise1promise2setTimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，联系上文提及的 <code>执行栈</code>、<code>宏任务</code>、<code>微任务</code> 来解释一下。</p><p>主线程会从上到下一步步的执行代码，同步任务会被依次加入执行栈中先执行，而异步任务会在任务队列中放置一个回调事件，等待执行栈清空后执行。而根据事件的优先级将事件划分到对应的宏任务和微任务队列中。</p><pre class="line-numbers language-none"><code class="language-none">宏任务：Run script | setTimeout callback 微任务：Promise then | Promise then执行栈：Promise callback控制台输入：script start | script end | promise1 | promise2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv3sj3wlrog60gc0e4k3h02.gif" alt="第一次执行"></p><p>到这里事件循环的第一层循环结束，开始第二层循环</p><pre class="line-numbers language-none"><code class="language-none">宏任务：setTimeout callback 微任务：执行栈：setTimeout callback控制台输入：script start | script end | promise1 | promise2 | setTimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv4hgiaujqg60gc0e4q4r02.gif" alt="第二次执行.gif"></p><p>动图体验戳<a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">这里</a></p><p>再来看一个比较复杂的案例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2 end'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1'</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1 Promise'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1 Promise then'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1 setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1 setTimeout Promise'</span><span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout1 setTimeout Promise then'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise'</span><span class="token punctuation">)</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise then'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout2'</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout2 Promise'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout2 Promise then'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把代码copy到浏览器控制台运行可以看到如下输出</p><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1gv651lb5mij60jf09340102.jpg" alt="运行结果.png"></p><p>用上面同样的思路解释下</p><p>第一次循环</p><pre class="line-numbers language-none"><code class="language-none">宏任务Run script | setTimeout1 callback | setTimeout2 callback微任务async1 end | Promise then控制台输出script start | async2 end | Promise | script end | async1 end | Promise then<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第二次循环</p><pre class="line-numbers language-none"><code class="language-none">宏任务setTimeout1 callback | setTimeout2 callback | setTimeout1 setTimeout callback微任务setTimeout1 Promise then控制台输出setTimeout1 | setTimeout1 Promise | setTimeout1 Promise then<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第三次循环</p><pre class="line-numbers language-none"><code class="language-none">宏任务setTimeout2 callback | setTimeout1 setTimeout callback微任务setTimeout2 Promise then控制台输出setTimeout2 | setTimeout2 Promise | setTimeout2 Promise then<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第四次循环</p><pre class="line-numbers language-none"><code class="language-none">宏任务setTimeout1 setTimeout callback微任务setTimeout1 setTimeout Promise then控制台输出setTimeout1 setTimeout | setTimeout1 setTimeout Promise | setTimeout1 setTimeout Promise then<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>本来还要再写 Node.js 中的 Event Loop 的，但是因为时间关系而且我发现我的理解还是有些模糊，这个就留着搞明白了再写写~</p><p>参考文章：</p><p><a href="https://www.ruanyifeng.com/blog/2014/10/event-loop.html">JavaScript 运行机制详解：再谈Event Loop</a></p><p><a href="https://segmentfault.com/a/1190000038783854">我是这样理解EventLoop的</a></p><p><a href="https://juejin.cn/post/6844903764202094606#heading-19">一次弄懂Event Loop（彻底解决此类面试问题）</a></p><p><a href="https://juejin.cn/post/6844904106121936903">这一次，Event Loop 一波带走</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深夜吃糖，理解 async 和 await</title>
      <link href="/2021/09/29/shen-ye-chi-tang-li-jie-async-he-await/"/>
      <url>/2021/09/29/shen-ye-chi-tang-li-jie-async-he-await/</url>
      
        <content type="html"><![CDATA[<h1 id="async-关键字"><a href="#async-关键字" class="headerlink" title="async 关键字"></a>async 关键字</h1><p>放在函数声明之前，生成一个异步函数，保证函数的返回值为 promise</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"Hello"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1guwu5pbd5bj608m0370tg02.jpg" alt="async.png"></p><ul><li><p>将 async 关键字加到函数申明中，可以告诉它们返回的是 promise，而不是直接返回值</p></li><li><p>避免了同步函数为支持使用 await 带来的任何潜在开销</p></li><li><p>在函数声明为 async 时，JavaScript引擎会添加必要的处理以优化程序</p></li></ul><h1 id="await-关键字"><a href="#await-关键字" class="headerlink" title="await 关键字"></a>await 关键字</h1><p>await 只在异步函数里面才起作用。它可以放在任何异步的，基于 promise 的函数之前。它会暂停代码在该行上，直到 promise 完成，然后返回结果值。在暂停的同时，其他正在等待执行的代码就有机会执行了。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">takeLongTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"long_time_value"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">takeLongTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva1.sinaimg.cn/large/004jr3A7gy1guxxujikq9j608v06gdgr02.jpg" alt="await.png"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://segmentfault.com/a/1190000007535316">理解 JavaScript 的 async/await</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/05/async.html">async 函数的含义和用法</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 uni-app（四）路由</title>
      <link href="/2021/09/28/xiao-bai-cai-bi-ji-uni-app-si-lu-you/"/>
      <url>/2021/09/28/xiao-bai-cai-bi-ji-uni-app-si-lu-you/</url>
      
        <content type="html"><![CDATA[<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>框架统一管理，需要在 pages.json 里配置每个路由页面的路径及页面样式。</p><h1 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h1><h2 id="使用-navigator-组件跳转"><a href="#使用-navigator-组件跳转" class="headerlink" title="使用 navigator 组件跳转"></a>使用 navigator 组件跳转</h2><p>类似 HTML 中的 <code>&lt;a&gt;</code> 组件，但只能跳转本地页面。目标页面必须在 pages.json 中注册。</p><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">String</td><td align="left"></td><td align="left">应用内的跳转链接，值为相对路径或绝对路径，注意不能加 <code>.vue</code> 后缀</td></tr><tr><td align="left">open-type</td><td align="left">String</td><td align="left">navigate</td><td align="left">跳转方式，有效值：navigate、redirect、switchTab、reLaunch、navigateBack、exit</td></tr><tr><td align="left">delta</td><td align="left">Number</td><td align="left"></td><td align="left">当 open-type 为 ‘navigateBack’ 时有效，表示回退的层数</td></tr><tr><td align="left">animation-type</td><td align="left">String</td><td align="left">pop-in/out</td><td align="left">当 open-type 为 navigate、navigateBack 时有效，窗口的显示/关闭动画效果</td></tr><tr><td align="left">animation-duration</td><td align="left">Number</td><td align="left">300</td><td align="left">当 open-type 为 navigate、navigateBack 时有效，窗口显示/关闭动画的持续时间。</td></tr><tr><td align="left">hover-class</td><td align="left">String</td><td align="left">navigator-hover</td><td align="left">指定点击时的样式类，当hover-class=”none”时，没有点击态效果</td></tr><tr><td align="left">hover-stop-propagation</td><td align="left">Boolean</td><td align="left">false</td><td align="left">指定是否阻止本节点的祖先节点出现点击态</td></tr><tr><td align="left">hover-start-time</td><td align="left">Number</td><td align="left">50</td><td align="left">按住后多久出现点击态，单位毫秒</td></tr><tr><td align="left">hover-stay-time</td><td align="left">Number</td><td align="left">600</td><td align="left">手指松开后点击态保留时间，单位毫秒</td></tr><tr><td align="left">target</td><td align="left">String</td><td align="left">self</td><td align="left">在哪个小程序目标上发生跳转，默认当前小程序，值域self/miniProgram</td></tr></tbody></table><h2 id="调用-API-跳转"><a href="#调用-API-跳转" class="headerlink" title="调用 API 跳转"></a>调用 API 跳转</h2><table><thead><tr><th align="left">API</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://uniapp.dcloud.io/api/router?id=navigateto">uni.navigateTo</a></td><td align="left">保留当前页面，跳转到应用内的某个页面，使用uni.navigateBack可以返回到原页面，相当于 open-type=”navigate”</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/api/router?id=redirectto">uni.redirectTo</a></td><td align="left">关闭当前页面，跳转到应用内的某个页面，相当于 open-type=”redirect”</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/api/router?id=relaunch">uni.reLaunch</a></td><td align="left">关闭所有页面，打开到应用内的某个页面，相当于 open-type=”reLaunch”</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/api/router?id=switchtab">uni.switchTab</a></td><td align="left">跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面，相当于 open-type=”switchTab”</td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/api/router?id=navigateback">uni.navigateBack</a></td><td align="left">关闭当前页面，返回上一页面或多级页面，相当于 open-type=”navigateBack”</td></tr></tbody></table><h1 id="页面栈"><a href="#页面栈" class="headerlink" title="页面栈"></a>页面栈</h1><p>框架以栈的形式管理当前所有页面， 当发生路由切换的时候，页面栈的表现如下：</p><table><thead><tr><th>由方式</th><th>页面栈表现</th><th>触发时机</th></tr></thead><tbody><tr><td>初始化</td><td>新页面入栈</td><td>uni-app 打开的第一个页面</td></tr><tr><td>打开新页面</td><td>新页面入栈</td><td>调用 API <code>uni.navigateTo</code>、使用组件 <code>&lt;navigator open-type="navigator"/&gt;</code></td></tr><tr><td>页面重定向</td><td>当前页面出栈，新页面入栈</td><td>调用 API <code>uni.redirectTo</code>、使用组件 <code>&lt;navigator open-type="redirect"/&gt;</code></td></tr><tr><td>页面返回</td><td>页面不断出栈，直到目标返回页</td><td>调用 API <code>uni.navigateBack</code>、使用组件 <code>&lt;navigator open-type="navigateBack"/&gt;</code>、用户按左上角返回按钮、安卓用户点击物理back按键</td></tr><tr><td>Tab 切换</td><td>页面全部出栈，只留下新的 Tab 页面</td><td>调用 API <code>uni.switchTab</code>、使用组件 <code>&lt;navigator open-type="switchTab"/&gt;</code>、用户切换 Tab</td></tr><tr><td>重加载</td><td>页面全部出栈，只留下新的页面</td><td>调用 API <code>uni.reLaunch</code>、使用组件 <code>&lt;navigator open-type="reLaunch"/&gt;</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 uni-app（三）生命周期</title>
      <link href="/2021/09/24/xiao-bai-cai-bi-ji-uni-app-san-sheng-ming-zhou-qi/"/>
      <url>/2021/09/24/xiao-bai-cai-bi-ji-uni-app-san-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h1><blockquote><p>应用生命周期仅可在App.vue中监听，在其它页面监听无效</p></blockquote><table><thead><tr><th align="left">函数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">onLaunch</td><td align="left">当 <code>uni-app</code> 初始化完成时触发（全局只触发一次）</td></tr><tr><td align="left">onShow</td><td align="left">当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td align="left">onHide</td><td align="left">当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td align="left">onError</td><td align="left">当 <code>uni-app</code> 报错时触发</td></tr><tr><td align="left">onUniNViewMessage</td><td align="left">对 <code>nvue</code> 页面发送的数据进行监听</td></tr><tr><td align="left">onUnhandledRejection</td><td align="left">对未处理的 Promise 拒绝事件监听函数</td></tr><tr><td align="left">onPageNotFound</td><td align="left">页面不存在监听函数</td></tr><tr><td align="left">onThemeChange</td><td align="left">监听系统主题变化</td></tr></tbody></table><h1 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h1><blockquote><p>在每个页面中定义</p></blockquote><table><thead><tr><th align="left">函数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">onInit</td><td align="left">监听页面初始化，其参数同 onLoad 参数，为上个页面传递的数据，参数类型为 Object（用于页面传参），触发时机早于 onLoad</td></tr><tr><td align="left">onLoad</td><td align="left">监听页面加载，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参）</td></tr><tr><td align="left">onShow</td><td align="left">监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td></tr><tr><td align="left">onReady</td><td align="left">监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发</td></tr><tr><td align="left">onHide</td><td align="left">监听页面隐藏</td></tr><tr><td align="left">onUnload</td><td align="left">监听页面卸载</td></tr><tr><td align="left">onResize</td><td align="left">监听窗口尺寸变化</td></tr><tr><td align="left">onPullDownRefresh</td><td align="left">监听用户下拉动作，一般用于下拉刷新</td></tr><tr><td align="left">onReachBottom</td><td align="left">页面滚动到底部的事件（不是scroll-view滚到底），常用于下拉下一页数据</td></tr><tr><td align="left">onTabItemTap</td><td align="left">点击 tab 时触发，参数为Objec</td></tr><tr><td align="left">onShareAppMessage</td><td align="left">用户点击右上角分享</td></tr><tr><td align="left">onPageScroll</td><td align="left">监听页面滚动，参数为Object</td></tr><tr><td align="left">onNavigationBarButtonTap</td><td align="left">监听原生标题栏按钮点击事件，参数为Object</td></tr><tr><td align="left">onBackPress</td><td align="left">监听页面返回</td></tr><tr><td align="left">onNavigationBarSearchInputChanged</td><td align="left">监听原生标题栏搜索输入框输入内容变化事件</td></tr><tr><td align="left">onNavigationBarSearchInputConfirmed</td><td align="left">监听原生标题栏搜索输入框搜索事件，用户点击软键盘上的“搜索”按钮时触发。</td></tr><tr><td align="left">onNavigationBarSearchInputClicked</td><td align="left">监听原生标题栏搜索输入框点击事件（pages.json 中的 searchInput 配置 disabled 为 true 时才会触发）</td></tr><tr><td align="left">onShareTimeline</td><td align="left">监听用户点击右上角转发到朋友圈</td></tr><tr><td align="left">onAddToFavorites</td><td align="left">监听用户点击右上角收藏</td></tr></tbody></table><h1 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h1><blockquote><p>和 vue 组件中的生命周期一致</p></blockquote><table><thead><tr><th align="left">函数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">在实例初始化之后被调用</td></tr><tr><td align="left">created</td><td align="left">在实例创建完成后被立即调用</td></tr><tr><td align="left">beforeMount</td><td align="left">在挂载开始之前被调用</td></tr><tr><td align="left">mounted</td><td align="left">挂载到实例上去之后调用</td></tr><tr><td align="left">beforeUpdate</td><td align="left">数据更新时调用，发生在虚拟 DOM 打补丁之前</td></tr><tr><td align="left">updated</td><td align="left">由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子</td></tr><tr><td align="left">beforeDestroy</td><td align="left">实例销毁之前调用</td></tr><tr><td align="left">destroyed</td><td align="left">Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</td></tr></tbody></table><h1 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h1><ol><li>beforeCreate</li><li>onLoad</li><li>created</li><li>onShow</li><li>beforeMount</li><li>onReady</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>返回上一页时，会执行onUnLoad，并未执行destroyed，并未执行onHide</li><li>进入下一页时，会执行onHide</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 uni-app（二）基础篇</title>
      <link href="/2021/09/23/xiao-bai-cai-bi-ji-uni-app-er-ji-chu-pian/"/>
      <url>/2021/09/23/xiao-bai-cai-bi-ji-uni-app-er-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h1><ul><li>页面文件遵循 Vue 单文件组件 (SFC) 规范，即含三种类型的顶级语言块 <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code></li><li>组件标签靠近小程序规范，详见 <a href="https://uniapp.dcloud.io/component/">uni-app 组件规范</a>。uni-app 的组件分为基础组件和扩展组件。基础组件在 uni-app 框架中已经内置，比如 <code>&lt;view&gt;</code> 组件。扩展组件需要将组件导入项目中才可以使用</li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 wx 替换为 uni，详见 <a href="https://uniapp.dcloud.io/api/README">uni-app 接口规范</a></li><li>生命周期：<a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%E5%BA%94%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">应用生命周期</a>、<a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a>、<a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">组件生命周期（同 Vue 规范）</a></li><li>建议使用flex布局</li></ul><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>┌─uniCloud              云空间目录，阿里云为uniCloud-aliyun,腾讯云为uniCloud-tcb（详见uniCloud）<br>│─components            符合vue组件规范的uni-app组件目录<br>│  └─comp-a.vue         可复用的a组件<br>├─hybrid                App端存放本地html文件的目录，<a href="https://uniapp.dcloud.io/component/web-view">详见</a><br>├─platforms             存放各平台专用页面的目录，<a href="https://uniapp.dcloud.io/platform?id=%E6%95%B4%E4%BD%93%E7%9B%AE%E5%BD%95%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91">详见</a><br>├─pages                 业务页面文件存放的目录<br>│  ├─index<br>│  │  └─index.vue       index页面<br>│  └─list<br>│     └─list.vue        list页面<br>├─static                存放应用引用的本地静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此<br>├─uni_modules           存放<code>[uni_module](/uni_modules)</code>规范的插件。<br>├─wxcomponents          存放小程序组件的目录<br>├─main.js               Vue初始化入口文件<br>├─App.vue               应用配置，用来配置App全局样式以及监听应用生命周期<br>├─manifest.json         配置应用名称、appid、logo、版本等打包信息，<a href="https://uniapp.dcloud.io/collocation/manifest">详见</a><br>└─pages.json            配置页面路由、导航条、选项卡等页面类信息，<a href="https://uniapp.dcloud.io/collocation/pages">详见</a></p><h2 id="关于编译"><a href="#关于编译" class="headerlink" title="关于编译"></a>关于编译</h2><ul><li><p>static 目录下的文件均会被完整打包进去，且不会编译。该目录下的 js 文件不会被编译，如果里面有 es6 的代码，不经过转换直接运行，在手机设备上会报错。</p></li><li><p>非 static 目录下的文件（vue、js、css 等）只有被引用到才会被打包编译进去。</p></li></ul><h1 id="引入静态资源"><a href="#引入静态资源" class="headerlink" title="引入静态资源"></a>引入静态资源</h1><h2 id="模板内"><a href="#模板内" class="headerlink" title="模板内"></a>模板内</h2><p>可以使用相对路径或者绝对路径</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 绝对路径，/static指根目录下的static目录，在cli项目中/static指src目录下的static目录 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@/static/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 相对路径 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../static/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js文件"><a href="#js文件" class="headerlink" title="js文件"></a>js文件</h2><p>可以使用相对路径或者绝对路径</p><p>不支持使用 <code>/</code> 开头的方式引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 绝对路径，@指向项目根目录，在cli项目中@指向src目录</span><span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">'@/common/add.js'</span><span class="token comment">// 相对路径</span><span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">'../../common/add.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css引入"><a href="#css引入" class="headerlink" title="css引入"></a>css引入</h2><p>可以使用相对路径或者绝对路径</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 绝对路径 */</span><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/common/uni.css'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'@/common/uni.css'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span class="token comment">/* 相对路径 */</span><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../../common/uni.css'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 uni-app（一）初体验</title>
      <link href="/2021/09/10/xiao-bai-cai-bi-ji-xiao-cheng-xu-yi-chu-ti-yan/"/>
      <url>/2021/09/10/xiao-bai-cai-bi-ji-xiao-cheng-xu-yi-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<p>最近又开始鼓捣学习 uni-app 啦，虽然带娃基本没多少时间但我真的超爱学习新玩意带来的满足感的（读书时候要有这觉悟该多好哇😳）</p><p>按照以往的学习经验，首先要去官网看一遍教程，然后跟着示例撸一个 HelloWorld 出来。</p><p><a href="https://uniapp.dcloud.io/README">什么是 uni-app</a></p><p><a href="https://ask.dcloud.net.cn/article/id-35657__page-2">白话uni-app 【也是html、vue、小程序的区别】</a></p><p><a href="https://segmentfault.com/a/1190000015684864">vue和微信小程序的区别、比较</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信官方文档 · 小程序</a></p><p>PS：这个系列佛性更新，尽量把笔记记录下来 🤦</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie、Session、Token 到底是个啥</title>
      <link href="/2021/09/04/sha-sha-fen-bu-qing-zhi-cookie-session-token/"/>
      <url>/2021/09/04/sha-sha-fen-bu-qing-zhi-cookie-session-token/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-协议是一个无状态协议"><a href="#HTTP-协议是一个无状态协议" class="headerlink" title="HTTP 协议是一个无状态协议"></a>HTTP 协议是一个无状态协议</h1><p>HTTP是无状态的：在同一个连接中，两个执行成功的请求之间是没有关系的。这就带来了一个问题，用户没有办法在同一个网站中进行连续的交互，比如在一个电商网站里，用户把某个商品加入到购物车，切换一个页面后再次添加了商品，这两次添加商品的请求之间没有关联，浏览器无法知道用户最终选择了哪些商品。</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>既然 Web 服务器记不住东西，那么我们就在外部想办法记住。</p><p>以电商网站为例，当我们（客户端浏览器）第一次访问电商网站（服务端）时，电商网站给我们发放一张记录独特身份标识数据「会员卡」，格式为 <code>&lt;cookie名&gt;=&lt;cookie值&gt;</code>，放入到 <code>Set-Cookie</code> 字段里（即在响应头里面添加一个 <code>Set-Cookie</code> 选项），随着响应报文发给浏览器</p><pre class="line-numbers language-none"><code class="language-none">HTTP/1.0 200 OKContent-type: text/htmlSet-Cookie: test_cookie=test[页面内容]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器接收到「会员卡」字段以后就把这张「会员卡」保存起来。（以 Chrome 浏览器为例，可以打开浏览器控制台 -&gt; <code>Application</code> -&gt; <code>Cookies</code> 查看Cookie）</p><p>下次请求时浏览器会自动将此「会员卡」值放入到 <code>Cookie</code> 字段中发给服务端。</p><pre class="line-numbers language-none"><code class="language-none">GET /sample_page.html HTTP/1.1Host: www.example.orgCookie: test_cookie=test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>服务端收到请求报文后，发现Cookie字段中有值，就能根据此值识别用户的身份然后提供个性化的服务。</p><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gu67ok9y8tj60k108hq4y02.jpg" alt="Cookie.png"></p><p>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p><p>Cookie 保存在客户端中，按在客户端中的存储位置，可分为内存 Cookie 和硬盘 Cookie。内存 Cookie 由浏览器维护，保存在内存中，浏览器关闭即消失，存在时间短暂。硬盘 Cookie 保存在硬盘里，有过期时间，除非用户手动清理或到了过期时间，硬盘Cookie不会清除，存在时间较长。所以，按存在时间，可分为非持久 Cookie 和持久 Cookie 。</p><h2 id="Cookie-主要用途"><a href="#Cookie-主要用途" class="headerlink" title="Cookie 主要用途"></a>Cookie 主要用途</h2><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><h2 id="Cookie-语法"><a href="#Cookie-语法" class="headerlink" title="Cookie 语法"></a>Cookie 语法</h2><pre class="line-numbers language-none"><code class="language-none">Cookie: &lt;cookie-list&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;cookie-list&gt;</code>：一系列的名称/值对，形式为 <code>&lt;cookie-name&gt;=&lt;cookie-value&gt;</code>。名称/值对之间用分号和空格 (‘; ‘)隔开。设置 Cookie 的名称及相对应的值，都必须是<strong>字符串类型</strong> - 如果值为 Unicode 字符，需要为字符编码。 - 如果值为二进制数据，则需要使用 BASE64 编码。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><strong>domain</strong></td><td>指定了哪些主机可以接受 Cookie。如果不指定，默认为 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Origin">origin</a>，<strong>不包含子域名</strong>。如果指定了<code>Domain</code>，则一般包含子域名。因此，指定 <code>Domain</code> 比省略它的限制要少。</td></tr><tr><td><strong>path</strong></td><td>指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 <code>%x2F</code> (“/“) 作为路径分隔符，子路径也会被匹配。</td></tr><tr><td><strong>maxAge</strong></td><td>cookie 失效的时间，单位秒。如果为整数，则该 cookie 在 maxAge 秒后失效。如果为负数，该 cookie 为临时 cookie ，关闭浏览器即失效，浏览器也不会以任何形式保存该 cookie 。如果为 0，表示删除该 cookie 。默认为 -1。 - <strong>比 expires 好用</strong>。</td></tr><tr><td><strong>expires</strong></td><td>过期时间，在设置的某个时间点后该 cookie 就会失效。 一般浏览器的 cookie 都是默认储存的，当关闭浏览器结束这个会话的时候，这个 cookie 也就会被删除</td></tr><tr><td><strong>secure</strong></td><td>该 cookie 是否仅被使用安全协议传输。安全协议有 HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false。 当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效。</td></tr><tr><td><strong>httpOnly</strong></td><td><strong>如果给某个 cookie 设置了 httpOnly 属性，则无法通过 JS 脚本 读取到该 cookie 的信息，但还是能通过 Application 中手动修改 cookie，所以只是在一定程度上可以防止 XSS 攻击，不是绝对的安全</strong></td></tr></tbody></table><p>在上面提到查看 Cookie 的方式（打开浏览器控制台 -&gt; <code>Application</code> -&gt; <code>Cookies</code>），在详情面板可以发现 Cookie 是可编辑的，这就提供了 Cookie 被篡改的可能。另外，很多第三方可以获取到 Cookie，服务器无法判断 Cookie 是不是真实用户发送的，所以可以伪造 Cookie 实现登录进行一些 HTTP 请求。</p><p>为了防篡改 Cookie，有两种思路：</p><p>思路一：把信息隐藏在服务器中（Session）</p><p>思路二：加密（Token）</p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>Session 是另一种记录服务器和客户端会话状态的机制，它是基于 Cookie 实现的，在一次会话中将重要信息保存在 Session 中（Session 存储在服务器端），浏览器只记录 SessionId（一个 SessionId 对应一次会话请求，SessionId 存储在客户端的 Cookie 中）。</p><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gu7dewfgbaj60m106wgn302.jpg" alt="Session.png"></p><h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><p>Token 的意思是「令牌」，是服务端生成的一串字符串，作为客户端进行请求的一个标识。通常使用 <a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JWT</a> 加密认证。</p><p>当用户第一次登录后，服务器生成一个 Token 并将此 Token 返回给客户端，以后客户端只需带上这个 Token 前来请求数据即可，无需再次带上用户名和密码。</p><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gu7en0ln4sj60m106d3zq02.jpg" alt="Token.png"></p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="Cookie-和-Session-的区别"><a href="#Cookie-和-Session-的区别" class="headerlink" title="Cookie 和 Session 的区别"></a>Cookie 和 Session 的区别</h2><p>安全性： Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。<br>存取值的类型不同：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。<br>有效期不同： Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。<br>存储大小不同：单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。</p><h2 id="Token-和-Session-的区别"><a href="#Token-和-Session-的区别" class="headerlink" title="Token 和 Session 的区别"></a>Token 和 Session 的区别</h2><p>状态：Session 是一种记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息。而 Token 是访问资源接口（API）时所需要的资源凭证，使服务端无状态化，不会存储会话信息。</p><p>扩展性：如果是服务器集群，或者是跨域的服务导向架构，就要求 Session 数据共享，每台服务器都能够读取 Session。由于 Token 是客户端访问时直接带着数据，因此无需做共享数据的操作。</p><p>参考文章</p><p><a href="https://juejin.cn/post/6844904009061367821#heading-0">一文彻底搞懂Cookie、Session、Token到底是什么</a></p><p><a href="https://juejin.cn/post/6844904034181070861">傻傻分不清之 Cookie、Session、Token、JWT</a></p><p><a href="https://segmentfault.com/a/1190000017831088">session，cookie和token究竟是什么</a></p><p><a href="https://blog.csdn.net/think2me/article/details/38726429">彻底弄清楚session是什么？</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript常用继承方案，看完不再emo</title>
      <link href="/2021/08/31/javascript-chang-yong-ji-cheng-fang-an-kan-wan-bu-zai-emo/"/>
      <url>/2021/08/31/javascript-chang-yong-ji-cheng-fang-an-kan-wan-bu-zai-emo/</url>
      
        <content type="html"><![CDATA[<p>前段时间写了一篇关于<a href="https://april-cl.github.io/2021/08/20/js-de-san-zuo-da-shan-zhi-yuan-xing/">原型</a>的博客，好似打通了任督二脉，以前斩不断理还乱的各种继承方式突然看得明白了，赶紧记下来✍~~~</p><p>—— 以下是正文 ——</p><h1 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h1><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>将父类的实例作为子类的原型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建SuperType的实例，并将该实例赋值给SubType.prototype</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 所有涉及到原型链继承的继承方式都要修改子类构造函数的指向，否则子类实例的构造函数会指向SuperType。</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Person'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token operator">||</span> <span class="token number">0</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span> <span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">// 为父类新增一个方法</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 子类</span><span class="token keyword">function</span> <span class="token function">Student</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token comment">// 继承（注意,继承必须要写在子类方法定义的前面）</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token comment">// 为子类新增一个方法（在继承之后,否则会被覆盖）</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">study</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am studing'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'April'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span>           <span class="token comment">// April            --子类覆盖父类的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>age<span class="token punctuation">)</span>            <span class="token comment">// 0                --父类的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>score<span class="token punctuation">)</span>          <span class="token comment">// 90               --子类自己的属性</span>student<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment">// I am a person    --继承自父类的方法</span>student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment">// I am studing     --子类自己的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存在的缺点"><a href="#存在的缺点" class="headerlink" title="存在的缺点"></a>存在的缺点</h2><p>多个实例对引用类型的操作会被篡改</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,basketball</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h1><h2 id="核心-1"><a href="#核心-1" class="headerlink" title="核心"></a>核心</h2><p>将父类构造函数的内容复制给了子类的构造函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>SubType<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="举个例子-1"><a href="#举个例子-1" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span> <span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 子类</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading</span>stu1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存在的缺点-1"><a href="#存在的缺点-1" class="headerlink" title="存在的缺点"></a>存在的缺点</h2><ul><li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li><li>无法实现复用，每个子类都有父类实例函数的副本，影响性能</li></ul><h1 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h1><h2 id="核心-2"><a href="#核心-2" class="headerlink" title="核心"></a>核心</h2><p>用原型链实现对原型属性和方法的继承，用借用构造函数技术来实现实例属性的继承</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="举个例子-2"><a href="#举个例子-2" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span><span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">// 父类函数</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 子类</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>               <span class="token comment">// 构造函数继承(继承属性)</span><span class="token punctuation">}</span><span class="token comment">// 原型链继承(继承方法)</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token comment">// 实例化</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>           <span class="token comment">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>           <span class="token comment">// music,reading</span>stu1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment">// I am a person</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存在的缺点-2"><a href="#存在的缺点-2" class="headerlink" title="存在的缺点"></a>存在的缺点</h2><p>在使用子类创建实例对象时，其原型中会存在两份相同的属性/方法</p><h1 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h1><h2 id="核心-3"><a href="#核心-3" class="headerlink" title="核心"></a>核心</h2><p>利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者用 <code>ES 5</code> 的 <code>Object.create()</code> 代替上面的 object 方法</p><h2 id="举个例子-3"><a href="#举个例子-3" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> anotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>anotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span>anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rob"</span><span class="token punctuation">)</span><span class="token keyword">var</span> yetAnotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>yetAnotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span>yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Barbie"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span>   <span class="token comment">// Shelby,Court,Van,Rob,Barbie</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存在的缺点-3"><a href="#存在的缺点-3" class="headerlink" title="存在的缺点"></a>存在的缺点</h2><ul><li><p>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。</p></li><li><p>无法传递参数</p></li></ul><h1 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h1><h2 id="核心-4"><a href="#核心-4" class="headerlink" title="核心"></a>核心</h2><p>寄生式继承其实就是在原型式继承的基础上，做了一些增强</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 通过调用 object() 函数创建一个新对象</span>  <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span>   <span class="token comment">// 以某种方式来增强对象</span>  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 返回这个对象</span>  <span class="token keyword">return</span> clone <span class="token comment">// 返回这个对象</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="举个例子-4"><a href="#举个例子-4" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span>  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> clone<span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> anotherPerson <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>anotherPerson<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存在的缺点-4"><a href="#存在的缺点-4" class="headerlink" title="存在的缺点"></a>存在的缺点</h2><ul><li><p>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。</p></li><li><p>无法传递参数</p></li></ul><h1 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h1><h2 id="核心-5"><a href="#核心-5" class="headerlink" title="核心"></a>核心</h2><p>结合借用构造函数传递参数和寄生模式实现继承</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">subType<span class="token punctuation">,</span> superType</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 创建对象，创建父类原型的一个副本</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType                    <span class="token comment">// 增强对象，弥补因重写原型而失去的默认的constructor 属性</span>  subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype                      <span class="token comment">// 指定对象，将新创建的对象赋值给子类的原型</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="举个例子-5"><a href="#举个例子-5" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">subType<span class="token punctuation">,</span> superType</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType   subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">}</span><span class="token comment">// 父类初始化实例属性和原型属性</span><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Person'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token operator">||</span> <span class="token number">0</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span> <span class="token string">'reading'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 借用构造函数传递增强子类实例属性（支持传参和避免篡改）</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 将父类原型指向子类</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> Person<span class="token punctuation">)</span><span class="token comment">// 新增子类原型属性</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">study</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am studing'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"stu1"</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"stu2"</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'swimming'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,swimming</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这个继承方案是目前最成熟的方案</strong></p><h1 id="ES6类继承extends"><a href="#ES6类继承extends" class="headerlink" title="ES6类继承extends"></a>ES6类继承extends</h1><h2 id="核心-6"><a href="#核心-6" class="headerlink" title="核心"></a>核心</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes">ES6 类的定义</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">SubType</span> <span class="token keyword">extends</span> <span class="token class-name">SuperType</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="举个例子-6"><a href="#举个例子-6" class="headerlink" title="举个例子"></a>举个例子</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Person'</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token operator">||</span> <span class="token number">0</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span> <span class="token string">'reading'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am a person'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">90</span>    <span class="token punctuation">}</span>    <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am studing'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"stu1"</span><span class="token punctuation">)</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"stu2"</span><span class="token punctuation">)</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'basketball'</span><span class="token punctuation">)</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'swimming'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,basketball</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span>   <span class="token comment">// music,reading,swimming</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="https://juejin.cn/post/6844903696111763470">JavaScript常用八种继承方案</a></p><p><a href="https://segmentfault.com/a/1190000015727237">一篇文章理解JS继承——原型链/构造函数/组合/原型式/寄生式/寄生组合/Class extends</a></p><p><a href="https://segmentfault.com/a/1190000014476341">JS中的继承(上)</a></p><p><a href="https://github.com/noahlam/articles/blob/master/JS%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF(%E4%B8%8B).md">JS中的继承(下)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 Vue （五）生命周期</title>
      <link href="/2021/08/30/xiao-bai-cai-bi-ji-vue-wu-sheng-ming-zhou-qi/"/>
      <url>/2021/08/30/xiao-bai-cai-bi-ji-vue-wu-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期图示"></p><h1 id="选项-生命周期钩子"><a href="#选项-生命周期钩子" class="headerlink" title="选项-生命周期钩子"></a>选项-生命周期钩子</h1><p>所有的生命周期钩子自动绑定 this 上下文到实例中，不能使用箭头函数来定义一个生命周期方法 </p><h2 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h2><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p><h2 id="created"><a href="#created" class="headerlink" title="created"></a>created</h2><p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el property 目前尚不可用。</p><h2 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h2><p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h2><p>实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。</p><p>注意 mounted 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 mounted 内部使用 vm.$nextTick</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h2><p>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</p><p><strong>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</strong></p><h2 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h2><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p><p>注意 updated 不会保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以在 updated 里使用 vm.$nextTick：</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="activated"><a href="#activated" class="headerlink" title="activated"></a>activated</h2><p>被 keep-alive 缓存的组件激活时调用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="deactivated"><a href="#deactivated" class="headerlink" title="deactivated"></a>deactivated</h2><p>被 keep-alive 缓存的组件停用时调用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h2><p>实例销毁之前调用。在这一步，实例仍然完全可用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h2><p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="errorCaptured"><a href="#errorCaptured" class="headerlink" title="errorCaptured"></a>errorCaptured</h2><p>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p><h1 id="实例方法-生命周期"><a href="#实例方法-生命周期" class="headerlink" title="实例方法 / 生命周期"></a>实例方法 / 生命周期</h1><h2 id="vm-mount-elementOrSelector"><a href="#vm-mount-elementOrSelector" class="headerlink" title="vm.$mount( [elementOrSelector] )"></a>vm.$mount( [elementOrSelector] )</h2><ul><li><p>参数：</p><ul><li><p>{Element | string} [elementOrSelector]</p></li><li><p>{boolean} [hydrating]</p></li></ul></li><li><p>返回值：vm - 实例自身</p></li><li><p>用法：</p><p>  如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例。</p><p>  如果没有提供 elementOrSelector 参数，模板将被渲染为文档之外的的元素，并且你必须使用原生 DOM API 把它插入文档中。</p><p>  这个方法返回实例自身，因而可以链式调用其它实例方法。</p></li></ul><h2 id="vm-forceUpdate"><a href="#vm-forceUpdate" class="headerlink" title="vm.$forceUpdate()"></a>vm.$forceUpdate()</h2><ul><li><p>用法：</p><p>  迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</p></li></ul><h2 id="vm-nextTick-callback"><a href="#vm-nextTick-callback" class="headerlink" title="vm.$nextTick( [callback] )"></a>vm.$nextTick( [callback] )</h2><ul><li><p>参数：</p><p>  {Function} [callback]</p></li><li><p>用法：</p><p>  将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。</p></li></ul><h2 id="vm-destroy"><a href="#vm-destroy" class="headerlink" title="vm.$destroy()"></a>vm.$destroy()</h2><ul><li><p>用法：</p><p>  完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。</p><p>  触发 beforeDestroy 和 destroyed 的钩子。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 Vue （四）组件</title>
      <link href="/2021/08/29/xiao-bai-cai-bi-ji-vue-si-zu-jian/"/>
      <url>/2021/08/29/xiao-bai-cai-bi-ji-vue-si-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>组件系统是Vue的一个重要概念，它允许我们使用小型、独立和通常可复用的组件构建大型应用。</p><h1 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h1><ul><li>全局组件</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义一个名为 button-counter 的新组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'button-counter'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'&lt;button v-on:click="count++"&gt;You clicked me {{ count }} times.&lt;/button&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#components-demo'</span><span class="token punctuation">,</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div id="components-demo"&gt;  &lt;button-counter&gt;&lt;/button-counter&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>单文件组件</li></ul><p>单文件组件保存在文件扩展名为<code>.vue</code>的文件中，在<code>main.js</code>文件中用<code>import</code>引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"count++"</span><span class="token operator">&gt;</span>      You clicked me <span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span> times<span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>相比于全局组件，单文件组件没有唯一命名的限制，而且支持CSS，可以用预处理器构建。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 Vue （三）修饰符</title>
      <link href="/2021/08/28/xiao-bai-cai-bi-ji-vue-san-xiu-shi-fu/"/>
      <url>/2021/08/28/xiao-bai-cai-bi-ji-vue-san-xiu-shi-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><p>修饰符 (modifier) 是以半角句号<code>.</code>指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。</p><p>常见的修饰符</p><ul><li><code>.stop</code>：阻止事件冒泡</li><li><code>.prevent</code>：取消事件默认行为</li><li><code>.sync</code>：用于对<code>prop</code>的双向绑定</li></ul><p>这里有一个关于<code>.sync</code>用法的<a href="https://codesandbox.io/s/musing-greider-pk5ze?file=/src/App.vue">例子</a></p><p>父组件代码</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;template&gt;  &lt;div id="app"&gt;    {{total}}&lt;br/&gt;    使用@update:total    &lt;Child :total="total" @update:total="total = $event"&gt;&lt;/Child&gt;    使用.sync    &lt;Child :total.sync="total"&gt;&lt;/Child&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Child from "./Child.vue"export default {  name: "App",  data: () =&gt; {    return {      total: 100    }  },  components: {    Child: Child  }};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件代码</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;template&gt;&lt;div&gt;  &lt;button @click="$emit('update:total', total+10)"&gt;+10&lt;/button&gt;  &lt;button @click="$emit('update:total', total-10)"&gt;-10&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  props: ['total']}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码实现通过点击子组件按钮修改父组件数据。通过例子可以看到<code>.sync</code>能够实现和<code>@update:total="total = $event"</code>一样的效果。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 MVC</title>
      <link href="/2021/08/27/qian-xi-mvc/"/>
      <url>/2021/08/27/qian-xi-mvc/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>官方一点的解释：设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结</p><p>emmmmmm 浅显一点理解就是<strong>对通用代码写法模式取个名字</strong></p><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><ul><li><p>M(Model)</p><p>模型层，用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法</p></li><li><p>V(View)</p><p>视图层，界面设计人员进行图形界面设计，是用户看到并与之交互的界面</p></li><li><p>C(Controller)</p><p>控制层，连接视图和模型桥梁，处理业务逻辑操作，根据视图层输入的指令，选取模型层数据，进行相应操作整合将结果反馈给视图层</p></li></ul><p>用一个简单的计算器为例</p><p>Model / View / Controller 伪代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Model.js</span>Model <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* 程序需要操作的数据或信息 */</span> <span class="token punctuation">}</span>，    <span class="token literal-property property">create</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* 增数据 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">delete</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* 删数据 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>data<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token comment">//使用新数据替换旧数据</span>       eventBus<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'m:upate'</span><span class="token punctuation">)</span> <span class="token comment">// eventBus触发'm:update'信息, 通知View刷新 </span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">get</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">/* 获取数据 */</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment">// View.js</span>View <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token comment">/* 需要刷新的元素 */</span><span class="token punctuation">,</span>    <span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">显示在页面上的内容</span><span class="token template-punctuation string">`</span></span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        v<span class="token punctuation">.</span>el<span class="token operator">:</span> <span class="token comment">/* 需要刷新的元素 */</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/* 刷新页面 */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Controller.js</span>Controller <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      v<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// View初始化</span>      v<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 第一次渲染</span>      c<span class="token punctuation">.</span><span class="token function">autoBindEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 自动的事件绑定</span>      eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'m:update'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> v<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 当eventBus触发'm:update'时View刷新</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">events</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">/* 事件以哈希表方式记录 */</span> <span class="token punctuation">}</span>，   <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data <span class="token operator">=</span> <span class="token comment">/* 改变后的新数据 */</span>      m<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token punctuation">}</span>，   <span class="token function">autoBindEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 自动绑定事件 */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://codesandbox.io/s/goofy-zeh-enq6s?file=/src/index.js">在 codesandbox 上预览</a></p><h1 id="抽象思维"><a href="#抽象思维" class="headerlink" title="抽象思维"></a>抽象思维</h1><h2 id="最小知识原则"><a href="#最小知识原则" class="headerlink" title="最小知识原则"></a>最小知识原则</h2><p>需要知道的知识越少越好</p><p>例子 🌰</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// XXX.js</span><span class="token keyword">import</span> <span class="token string">'XXX.css'</span>  <span class="token comment">// 导入样式文件</span><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;页面要写的内容&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token comment">/* 其他代码 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在  <code>.html</code> 文件中引入这个 <code>.js</code> 文件（下面‘模块’指这个 <code>.js</code> 文件）即可获得这个模块有关的 Dom 元素、样式和行为，对于 <code>.html</code> 文件而言不需要再引入一个相关的样式文件，并且也不需要编写这个模块所需的 Dom 结构</p><p>这样做会使得页面一开始是空白的，可以用加菊花图、加骨架、加占位内容等方法解决</p><h2 id="以不变应万变"><a href="#以不变应万变" class="headerlink" title="以不变应万变"></a>以不变应万变</h2><p>既然 MVC 模式可以适用每个模块的写法，那就每个模块都这样写好了（这里需要两个例子对比）</p><p>代价是有时候会有一些多余不用的代码</p><h2 id="表驱动编程"><a href="#表驱动编程" class="headerlink" title="表驱动编程"></a>表驱动编程</h2><p>表驱动编程是指将重要的信息存储在哈希表中，利用表来编程简化重复的代码，从而不必使用很多的逻辑（if 或 switch）语句</p><p>在上例中 c 对象的 events 属性就是一个哈希表</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token string-property property">'click #add1'</span><span class="token operator">:</span> <span class="token string">'add'</span><span class="token punctuation">,</span>   <span class="token string-property property">'click #minus1'</span><span class="token operator">:</span> <span class="token string">'minus'</span><span class="token punctuation">,</span>   <span class="token string-property property">'click #mul2'</span><span class="token operator">:</span> <span class="token string">'mul'</span><span class="token punctuation">,</span>   <span class="token string-property property">'click #divide2'</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当触发点击事件的对象是#add1时则执行add函数，代码效果等同于直接在#add1元素上绑定click事件执行add函数。当在事件类型或监听对象多时使用哈希表的优点就更加明显：代码复杂度稳定更易于理解</p><h2 id="事不过三"><a href="#事不过三" class="headerlink" title="事不过三"></a>事不过三</h2><p>“重复即是原罪”</p><p>同样的代码写三遍，就应该抽离成一个函数</p><p>同样的属性写三遍，就应该做成共有属性（原型或类）</p><p>同样的原型写三遍，就应该用继承</p><h2 id="俯瞰全局"><a href="#俯瞰全局" class="headerlink" title="俯瞰全局"></a>俯瞰全局</h2><p>把所有的对象看成点</p><p>一个点和一个点怎么通信</p><p>一个点和多个点怎么通信</p><p>多个点和多个点怎么通信</p><p>找出一个专用的点 EventBus（事件总线）负责通信</p><p>EventBus 主要用于对象间的通信。如上例中通过定义一个 jQuery 包装的 window 对象获取 jQuery 方法，如 <code>on()</code>、 <code>trigger()</code> 等。</p><h2 id="view-render-data"><a href="#view-render-data" class="headerlink" title="view = render(data)"></a>view = render(data)</h2><p>通过 render 改变视图，只要改变data，就可以得到对应的view, 使用虚拟 DOM 能让 render 只更新该更新的地方，从而解决性能问题</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 Vue （二）指令</title>
      <link href="/2021/08/26/xiao-bai-cai-bi-ji-vue-er-zhi-ling/"/>
      <url>/2021/08/26/xiao-bai-cai-bi-ji-vue-er-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>文档关于指令的解释：</p><pre class="line-numbers language-none"><code class="language-none">指令 (Directives) 是带有 v- 前缀的特殊 attribute。指令 attribute 的值预期是单个 JavaScript 表达式 (v-for 是例外情况)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>v-text</code>：相当于<code>{{ 数据 }}</code>。</li><li><code>v-html</code>：可用于数据内容含有HTML不希望被作为Vue模版进行编译时。</li><li><code>v-show</code>：根据表达式的值切换元素的显示和隐藏。</li><li><code>v-if</code>：根据表达式的真值条件渲染元素。</li><li><code>v-else</code>：前一兄弟元素必须有<code>v-if</code>或<code>v-else-if</code>。</li><li><code>v-else-if</code>：前一兄弟元素必须有<code>v-if</code>或<code>v-else-if</code>。</li><li><code>v-for</code>：基于源数据多次渲染元素或模板块。此</li><li><code>v-on</code>：可缩写成<code>@</code>，用于绑定事件监听器。</li><li><code>v-bind</code>：可缩写成<code>:</code>，用于绑定vue属性。</li><li><code>v-model</code>：在表单控件或者组件上创建双向绑定。</li><li><code>v-slot</code></li><li><code>v-pre</code>：不编译内容。</li><li><code>v-cloak</code></li><li><code>v-once</code></li></ul><h1 id="指令参数"><a href="#指令参数" class="headerlink" title="指令参数"></a>指令参数</h1><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。如</p><pre class="line-numbers language-none"><code class="language-none">v-bind:class="className"v-on:click="doSomething"v-on:[eventName]="doSomething"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的<code>class</code>、<code>click</code>、<code>[eventName]</code>就是参数，<code>[eventName]</code>可以动态监听事件类型，比如当 eventName 的值为 “click” 时，v-on:[eventName] 将等价于 v-on:click。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记 Vue （一）基础篇</title>
      <link href="/2021/08/25/xiao-bai-cai-bi-ji-vue-yi-ji-chu-pian/"/>
      <url>/2021/08/25/xiao-bai-cai-bi-ji-vue-yi-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<p>写在前面：</p><p><strong>学习Vue要转化思想</strong>：不要想着怎么操作 DOM，而是想着如何操作数据！</p><p>Vue 的文档很通俗易懂，学习细节移步<a href="https://cn.vuejs.org/v2/guide/">官网</a></p><h1 id="关于-Vue"><a href="#关于-Vue" class="headerlink" title="关于 Vue"></a>关于 Vue</h1><p>Vue 是一套用于构建用户界面的渐进式（由浅入深）框架。</p><p>使用方式</p><ul><li>使用 <code>&lt;script&gt;</code> 引入，可以到 <a href="https://www.bootcdn.cn/">BootCDN</a> 搜索 <code>Vue</code></li><li>使用 NPM 安装</li><li>使用 <a href="https://cli.vuejs.org/zh/guide/"><code>vue-cli</code></a> 创建 Vue 应用</li></ul><h1 id="Vue-的两个构建版本"><a href="#Vue-的两个构建版本" class="headerlink" title="Vue 的两个构建版本"></a>Vue 的两个构建版本</h1><ul><li><p>完整版：同时包含编译器和运行时的版本。</p><p>对应文件名：vue.js/vue.min.js</p></li><li><p>运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</p><p>对应文件名：vue.runtime.js/vue.runtime.min.js</p></li></ul><p>PS：.min.js 文件为无注释无格式被压缩的 js 文件</p><p>两个版本的区别：</p><p>完整版能够编译 <code>template</code>，比如传入一个字符串给 template 选项（<code>.vue</code>文件/单文件组件），或挂载到一个元素上并以其 DOM 内部的 HTML 作为模板。</p><p>使用 webpack 或 @vue/cli 引入时需额外设置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 单文件组件</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>greeting<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">greeting</span><span class="token operator">:</span> <span class="token string">"Hello World!"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style scoped<span class="token operator">&gt;</span><span class="token comment">/* 一些样式 */</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行时版本不能编译 <code>template</code> ，它通过 <code>render(createElement)</code> 渲染节点。</p><p>使用 webpack 或 @vue/cli 引入时默认使用此版</p><p>上面的例子用 <code>render</code> 渲染</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'Hello World!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最佳实践：总是使用运行时版本，配合使用 <a href="https://vue-loader.vuejs.org/zh/#vue-loader-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"><code>vue-loader</code></a> 在构建时把 <code>.vue</code> 文件内部的模板预编译成 JavaScript </p><h1 id="Vue-实例"><a href="#Vue-实例" class="headerlink" title="Vue 实例"></a>Vue 实例</h1><p>每个 Vue 应用都是通过用 Vue 函数创建一个新的 Vue 实例开始的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 选项</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://codesandbox.io/s/vue">开始使用 Vue 吧 🌝</a></p><p>🤫 可以康康 public/index.html、src/main.js 和 src/App.vue 先熟悉下 Vue 是怎么用的</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记--React（五）受控组件与非受控组件</title>
      <link href="/2021/08/23/xiao-bai-cai-bi-ji-react-wu-shou-kong-zu-jian-yu-fei-shou-kong-zu-jian/"/>
      <url>/2021/08/23/xiao-bai-cai-bi-ji-react-wu-shou-kong-zu-jian-yu-fei-shou-kong-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h1><p>在HTML的表单元素中，它们通常自己维护一套state，并随着用户的输入自己进行UI上的更新，这种行为是不被我们程序所管控的。而如果将React里的state属性和表单元素的值建立依赖关系，再通过onChange事件与setState()结合更新state属性，就能达到控制用户输入过程中表单发生的操作。被React以这种方式控制取值的表单输入元素就叫做受控组件</p><p>上面这段描述用代码翻译大概是这样子的：</p><p>假设 HTML 中有一个这样的表单</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>    名字:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户在界面上的输入框输入内容时，表单元素会根据用户的输入自己进行 UI 上的更新（表单元素上抽象的 state 作用）</p><p>在 React 中，如果我们想要控制输入框内容，可以在 this.state 中定义一个 value属性，并将表单元素上的 value 指定为这个属性</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">NameForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          名字:          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而当我们尝试在表单元素中输入内容时就会发现这个表单元素的内容并没有进行更新，这是因为表单元素的 value 被 this.state.value 控制，当用户输入新的内容时，this.state.value 并不会自动更新。但是可以用一个 onChange 事件来监听输入内容的改变并使用 setState 更新 this.state.value</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">NameForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleSubmit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 通过 this.state.value 获取</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提交的名字: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          名字:          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是受控组件的常用姿势了，在表单元素上设置 value 属性，通过 onChange 事件与 setState() 结合更新 value 属性</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FInput</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>fn<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h1><p>有时我们仅仅是想要获取某个表单元素的值，而不关心它是如何改变的，那么我们可以使用 ref 来从 DOM 节点中获取表单数据，并不需要为每个状态更新都编写数据处理函数</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">NameForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleSubmit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 通过 this.input.current.value 获取</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'A name was submitted: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          Name:          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非受控组件看起来更像传统的 HTML 表单，简单来写就是：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FInput</span></span> <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>input<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h1><p>大多数情况下，官方推荐使用受控组件来处理表单数据</p><table><thead><tr><th>应用场景</th><th>非受控组件</th><th>受控组件</th></tr></thead><tbody><tr><td>一次性值检索（例如提交时）</td><td>✅</td><td>✅</td></tr><tr><td>提交时验证</td><td>✅</td><td>✅</td></tr><tr><td>即时验证</td><td>❌</td><td>✅</td></tr><tr><td>有条件禁用按钮</td><td>❌</td><td>✅</td></tr><tr><td>强制输入格式</td><td>❌</td><td>✅</td></tr><tr><td>一个数据的多个输入</td><td>❌</td><td>✅</td></tr><tr><td>动态输入</td><td>❌</td><td>✅</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年，被 AJAX 折磨的前端小白</title>
      <link href="/2021/08/22/js-de-san-zuo-da-shan-zhi-ajax/"/>
      <url>/2021/08/22/js-de-san-zuo-da-shan-zhi-ajax/</url>
      
        <content type="html"><![CDATA[<p>在刚开始学 <code>JavaScript</code> 时，最深恶痛绝的三个 JS怪👹：<strong>this妖</strong>、<strong>原型精</strong>和 <strong>AJAX魔</strong></p><p>最近在写总结回顾时竟意外发现这三大怪早已在不知不觉中被我消化吸收了，趁着热乎记下来✍~~~</p><p>有请今天的出场嘉宾🎤：AJAX魔</p><h1 id="什么是-AJAX"><a href="#什么是-AJAX" class="headerlink" title="什么是 AJAX"></a>什么是 AJAX</h1><p>AJAX 是一种用于创建快速动态网页的技术，它使用 <code>XMLHttpRequest</code> 对象与服务器通信。 它可以使用JSON，XML，HTML和text文本等格式发送和接收数据。AJAX最吸引人的就是它的“<strong>异步</strong>”特性，它可以在不重新刷新页面的情况下与服务器通信，交换数据，或更新页面。</p><h1 id="什么是异步"><a href="#什么是异步" class="headerlink" title="什么是异步"></a>什么是异步</h1><p>不等任务执行完，直接执行下一个任务</p><p>举个例子 🌰</p><p>周末我和闺蜜去逛gai，我们打算去吃海底捞，排队的人很多，于是我们手机扫码排号，然后继续逛gai，过一会收到叫号通知就可以进去吃火锅啦~</p><p>「排号」这件事并没有立即得到结果（进去吃火锅），所以这是一个异步任务</p><p>AJAX 请求数据流程与此类似。</p><p>浏览器通过 <code>XMLHttpRequest</code> 对象向服务器发出HTTP请求与接收HTTP响应，浏览器接着做其他事情，等收到 <code>XMLHttpRequest</code> 对象返回来的数据再渲染页面。</p><h1 id="AJAX-的使用"><a href="#AJAX-的使用" class="headerlink" title="AJAX 的使用"></a>AJAX 的使用</h1><h2 id="1-创建Ajax核心对象XMLHttpRequest"><a href="#1-创建Ajax核心对象XMLHttpRequest" class="headerlink" title="1. 创建Ajax核心对象XMLHttpRequest"></a>1. 创建Ajax核心对象XMLHttpRequest</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> httpRequest <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Mozilla, Safari, IE7+ ...</span>    httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// IE 6 and older</span>    httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-发送HTTP请求"><a href="#2-发送HTTP请求" class="headerlink" title="2. 发送HTTP请求"></a>2. 发送HTTP请求</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">httpRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> async<span class="token punctuation">)</span>httpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>method：HTTP请求方法 - 有GET，POST，HEAD以及服务器支持的其他方法</p><p>url：文件在服务器上的位置。由于安全原因，默认不能调用第三方URL域名</p><p>async：用于设置请求true（异步）或 false（同步） </p><p>send() 方法的参数可以是任何你想发送给服务器的内容。</p><p>如果是 POST 请求的话，需注意：</p><ul><li>在调用 send() 方法获取表单数据前要设置请求头的格式内容</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">httpRequest<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>发送表单数据时应该用服务器可以解析的格式，像查询语句，JSON，XML等</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 举例</span>httpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"name=xcl&amp;anothername=April"</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-处理服务器响应"><a href="#3-处理服务器响应" class="headerlink" title="3. 处理服务器响应"></a>3. 处理服务器响应</h2><p>有关的 API ：</p><ul><li><p>XMLHttpRequest.onreadystatechange：只要 readyState 属性发生变化，就会调用相应的处理函数 </p></li><li><p>XMLHttpRequest.response：返回响应的正文，返回的类型取决于 responseType 属性</p></li><li><p>XMLHttpRequest.responseText：服务器以文本字符的形式返回</p></li><li><p>XMLHttpRequest.responseXML：以 XMLDocument 对象方式返回，之后就可以使用JavaScript来处理</p></li><li><p>XMLHttpRequest.readyState：返回一个 XMLHttpRequest 代理当前所处的状态（请求的状态码），它的值含义：</p><ul><li><p>0 未初始化 – 尚未调用.open()方法</p></li><li><p>1 启动 – 已经调用.open()方法，但尚未调用.send()方法</p></li><li><p>2 发送 – 已经调用.send()方法，但尚未接收到响应</p></li><li><p>3 接收 – 已经接收到部分响应数据</p></li><li><p>4 完成 – 已经接收到全部响应数据，而且已经可以在客户端使用了</p></li></ul></li><li><p>XMLHttpRequest.status：返回了 XMLHttpRequest 响应中的数字状态（请求的响应状态码），它的值含义：</p><ul><li><p>1** 信息 – 服务器收到请求，需要请求者继续执行操作</p></li><li><p>2** 成功 – 操作被成功接收并处理</p></li><li><p>3** 重定向 – 需要进一步的操作以完成请求</p></li><li><p>4** 客户端错误 – 请求包含语法错误或无法完成请求</p></li><li><p>5** 服务器错误 – 服务器在处理请求的过程中发生了错误</p></li></ul><p>  一般通过检查响应码 200 OK 判断 AJAX 有没有成功</p></li></ul><p>一般我们会使用异步 AJAX（即 open() 的第三个参数未特别指定或设为 true），在发送请求时，提供一个回调函数负责处理响应，代码大概长这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">httpRequest<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> httpRequest<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">/* 对 httpRequest.response 的一些操作 */</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是使用同步 AJAX（即 open() 的第三个参数设为 false），则直接在 send() 方法之后执行要进行的操作即可。但不建议这样做，它的用户体验很糟糕，可能会使页面在请求期间卡住</p><p>AJAX 的用法大概就是如此，把所有代码整合到一块是这样的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> httpRequest <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Mozilla, Safari, IE7+ ...</span>    httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// IE 6 and older</span>    httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>httpRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> async<span class="token punctuation">)</span>httpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>httpRequest<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> httpRequest<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">/* 对 httpRequest.response 的一些操作 */</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="手动封装-AJAX"><a href="#手动封装-AJAX" class="headerlink" title="手动封装 AJAX"></a>手动封装 AJAX</h1><p>这里会用到 <code>Promise</code> 对象【<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN传送门</a>】</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">ajax</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>success<span class="token punctuation">,</span> fail<span class="token punctuation">}</span> <span class="token operator">=</span> options        <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span>        request<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>response<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个封装只是为了熟悉 <code>Promise</code> 的用法，尚还存在许多问题（post 无法上传数据、不能设置请求头等）</p><h1 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h1><p><a href="https://www.jquery123.com/jQuery.ajax/">jQuery.ajax() 文档</a></p><p>用法：</p><ul><li><p>jQuery.ajax()</p></li><li><p>jQuery.ajax( url [, settings ] )</p></li><li><p>jQuery.ajax( [settings ] )</p></li></ul><p>返回 jqXHR 对象，常用 API：</p><ul><li><p>jqXHR.done(function(data, textStatus, jqXHR) {})：一个可供选择的 success 回调选项的构造函数</p></li><li><p>jqXHR.fail(function(jqXHR, textStatus, errorThrown) {})：一种可供选择的 error 回调选项的构造函数</p></li><li><p>jqXHR.always(function(data|jqXHR, textStatus, jqXHR|errorThrown) { })：一种可供选择的 complete 回调选项的构造函数</p></li><li><p>jqXHR.then(function(data, textStatus, jqXHR) {}, function(jqXHR, textStatus, errorThrown) {})：包含了 .done() 和 .fail()方法的功能</p></li></ul><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p><a href="http://www.axios-js.com/zh-cn/docs/">axios 文档</a></p><p>参考文章：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX/Getting_Started">Ajax 文档 MDN</a></p><p><a href="https://juejin.cn/post/6844903618764603399">Ajax原理一篇就够了</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年，被原型折磨的前端小白</title>
      <link href="/2021/08/20/js-de-san-zuo-da-shan-zhi-yuan-xing/"/>
      <url>/2021/08/20/js-de-san-zuo-da-shan-zhi-yuan-xing/</url>
      
        <content type="html"><![CDATA[<p>在刚开始学 <code>JavaScript</code> 时，最深恶痛绝的三个 JS怪👹：<strong>this妖</strong>、<strong>原型精</strong>和 <strong>AJAX魔</strong></p><p>最近在写总结回顾时竟意外发现这三大怪早已在不知不觉中被我消化吸收了，趁着热乎记下来✍~~~</p><p>有请今天的出场嘉宾🎤：原型精</p><h1 id="内存图学习法"><a href="#内存图学习法" class="headerlink" title="内存图学习法"></a>内存图学习法</h1><p>在了解原型前，先来学一个内存图的简单画法。</p><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtq38p614lj60k20c6dhz02.jpg" alt="内存图画法示例.png"></p><p>注：图示对象属性不完全，<code>#数字</code>代表内存地址，其数值为虚拟数值，仅作示例，下同</p><p>以 <code>window</code> 对象为例，属性名保存属性值地址，例如，属性 <code>Object</code> 保存 <code>Object 对象</code>的地址，即 <code>window</code> 对象的属性 <code>Object</code> 指向内存中的<code>Object 对象</code></p><p>【这里要明白 <code>Object </code>和 <code>Object 对象</code>是两个东西，<code>Object </code>是存放 <code>Object 对象</code>的地址，而 <code>Object 对象</code>是 Heap 中的一坨内存数据，同理，<code>console</code> 和 <code>console 对象</code>、<code>Array</code> 和 <code>Array 对象</code>不是同一个东西 🔑 】</p><h1 id="你有我有全都有"><a href="#你有我有全都有" class="headerlink" title="你有我有全都有"></a>你有我有全都有</h1><p>假设现在要声明一个士兵，士兵要包含的属性：[编号，生命值，攻击（动作），防御（动作）]</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 士兵 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">编号</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">生命力</span><span class="token operator">:</span> <span class="token number">59</span><span class="token punctuation">,</span>    <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">防御</span><span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>画个内存图看看</p><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtq52cd045j60dg07fwfn02.jpg" alt="一个士兵内存图.png"></p><p>好啦，那现在如果要制造一百个士兵呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 士兵们 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">var</span> 士兵<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> 士兵 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">编号</span><span class="token operator">:</span> i<span class="token punctuation">,</span>        <span class="token literal-property property">生命力</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">防御</span><span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    士兵们<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>士兵<span class="token punctuation">)</span><span class="token punctuation">}</span>兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtq59j0fdyj60fn0mqwjp02.jpg" alt="一百个士兵内存图.png"></p><p>从内存图不难看出，这样的代码十分浪费内存。</p><p>对于每个士兵而言，编号和生命值是各不一样的，所以需要创建一百次，但攻击、防御是一样的，只需要各自引用同一个函数就可以了。</p><p>既然如此，那为什么不把这些相同的代码整合到一个地方，让这些士兵都能从这个地方拿到这些属性，另外又对每个士兵自身的属性进行单独赋值</p><p>这里引入两个知识点：</p><ul><li><p>每个实例对象（<code>object</code>）都有一个私有属性（称之为<code>__proto__</code>）指向它的构造函数的原型对象<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">「MDN 传送门」</a></p></li><li><p><code>Object.create()</code> 方法创建一个新对象，使用现有的对象来提供新创建的对象的 <code>__proto__</code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">「MDN 传送门」</a></p></li></ul><p>这个原型对象不就可以用来充当那个整合相同代码的地方，然后让「士兵」的 <code>__proto__</code> 指向「士兵原型」</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 士兵原型 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">防御</span><span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> 士兵们 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">var</span> 士兵<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>士兵原型<span class="token punctuation">)</span>    士兵<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>编号 <span class="token operator">=</span> i    士兵<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>生命力 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span>兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtswk5jlv2j60od0d8dir02.jpg" alt="士兵原型图第1版.png"></p><p>现在假若兵营要再制造50名士兵，那么制造士兵（for循环内）的代码就要再重新写一遍。既然如此，那就把制造士兵抽离成一个函数，后面有需要就调用这个函数好了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 士兵原型 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">防御</span><span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> 士兵们 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">var</span> 士兵数 <span class="token operator">=</span> 士兵们<span class="token punctuation">.</span>length<span class="token keyword">function</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span><span class="token parameter">编号i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> 士兵 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>士兵原型<span class="token punctuation">)</span>    士兵<span class="token punctuation">.</span>编号 <span class="token operator">=</span> 编号i    士兵<span class="token punctuation">.</span>生命力 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> 士兵<span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>士兵数 <span class="token operator">=</span> 士兵们<span class="token punctuation">.</span>length兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> 士兵数<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 士兵数 <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtswkp12bkj60wr0ge45o02.jpg" alt="士兵原型图第2版.png"></p><p>注：内存图中蓝色区域是 JS 内置的，只是前面的图没有补全</p><p>从内存图不难看出，虽然制造士兵函数制造出来的士兵的 <code>__proto__</code> 是指向士兵原型的，但制造士兵函数本身和士兵原型却没有联系，这样显得代码分散。那么试着把制造士兵函数和士兵原型结合一起</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 士兵们 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">var</span> 士兵数 <span class="token operator">=</span> 士兵们<span class="token punctuation">.</span>length<span class="token keyword">function</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span><span class="token parameter">编号i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> 士兵 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>制造士兵<span class="token punctuation">.</span>士兵原型<span class="token punctuation">)</span>    士兵<span class="token punctuation">.</span>编号 <span class="token operator">=</span> 编号i    士兵<span class="token punctuation">.</span>生命力 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> 士兵<span class="token punctuation">}</span>制造士兵<span class="token punctuation">.</span>士兵原型 <span class="token operator">=</span> <span class="token punctuation">{</span>       <span class="token comment">// 这步把制造士兵和士兵原型绑定</span>    <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">防御</span><span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span>    <span class="token literal-property property">constructor</span><span class="token operator">:</span> 制造士兵   <span class="token comment">// 这步把士兵原型和制造士兵绑定</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>士兵数 <span class="token operator">=</span> 士兵们<span class="token punctuation">.</span>length兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> 士兵数<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 士兵数 <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>兵营<span class="token punctuation">.</span><span class="token function">批量制造</span><span class="token punctuation">(</span>士兵们<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://ww1.sinaimg.cn/large/004jr3A7gy1gtt2jrkzecj60v90gedme02.jpg" alt="士兵原型图第3版.png"></p><p>好啦，现在就通过这个图来了解有关<strong>原型</strong>的概念</p><ul><li><p>原型</p><p>  在javascript中，函数可以有属性。 每个<strong>函数</strong>都有一个特殊的<strong>属性</strong>叫作原型（prototype），默认指向一个自带属性constructor（这个属性值指向函数本身）的对象，这个对象可以重写（联系上面代码 <code>制造士兵.士兵原型 = {/* 一些代码 */}</code>）</p></li><li><p>原型对象</p><p>  每个实例<strong>对象</strong>都有一个私有属性（__proto__）指向它的<strong>构造函数的原型对象</strong>（如内存图中的 <code>#789士兵原型对象</code>）。该原型对象也有一个自己的原型对象（__proto__），层层向上直到一个对象的原型对象为 null。注意<strong>函数也是对象</strong></p></li><li><p>原型链</p><p>  内存图中通过__proto__指向原型的链接</p><p>  图中 士兵-&gt;士兵原型-&gt;Object.prototype-&gt;null 这条线就是一条原型链</p></li><li><p>构造函数</p><p>  制造士兵函数就是构造函数。</p><p>  构造函数本身负责给对象本身添加属性（如 士兵.编号 = 编号i）</p><p>  构造函数.prototype负责保存对象的共有属性（如 士兵原型）</p><p>  所有构造函数（专门由于创建对象的函数）首字母大写</p><p>  所有被构造出来的对象首字母小写</p></li></ul><h1 id="原型精-CP-—-prototype-和-proto"><a href="#原型精-CP-—-prototype-和-proto" class="headerlink" title="原型精 CP — prototype 和 __proto__"></a>原型精 CP — prototype 和 __proto__</h1><p>看完有关<strong>原型</strong>的概念，最迷惑的就是 prototype 和 __proto__ 到底有什么区别 🤔</p><p><code>prototype</code> 和 <code>__proto__</code> 都存着原型的地址</p><p><code>prototype</code> ：挂在<strong>函数</strong>上，被构造函数创建的实例对象的 __proto__ 指向构造函数的 prototype 属性，用来实现基于原型的继承与属性的共享</p><p><code>__proto__</code> ：挂在<strong>对象</strong>上，它的值指向构造函数的原型对象，构成原型链，同样用于实现基于原型的继承</p><p>三个重要知识 🧨：</p><ol><li><p>对象.__proto__ === 构造函数.prototype</p></li><li><p>Object.prototype 是所有对象的（直接或间接）原型对象，Object.prototype 的原型对象为 null</p></li><li><p>任何函数.__proto__ === Function.prototype</p></li></ol><p>下面来一个无奖问答 🎮</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>true，根据知识2</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>true，根据知识2</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>f<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>true，根据知识3</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>true，根据知识1</p><h1 id="new-运算符"><a href="#new-运算符" class="headerlink" title="new 运算符"></a>new 运算符</h1><p>new 关键字会进行如下的操作：</p><ol><li>创建一个空的简单JavaScript对象（即{}）</li><li>为步骤1新创建的对象添加属性__proto__，将该属性链接至构造函数的原型对象 </li><li>将步骤1新创建的对象作为this的上下文 </li><li>如果该函数没有返回对象，则返回this</li></ol><p>回到制造士兵最后那段代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 省略部分代码</span><span class="token keyword">function</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span><span class="token parameter">编号i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> 士兵 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>制造士兵<span class="token punctuation">.</span>士兵原型<span class="token punctuation">)</span>    士兵<span class="token punctuation">.</span>编号 <span class="token operator">=</span> 编号i    士兵<span class="token punctuation">.</span>生命力 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> 士兵<span class="token punctuation">}</span>制造士兵<span class="token punctuation">.</span>士兵原型 <span class="token operator">=</span> <span class="token punctuation">{</span>       <span class="token comment">// 这步把制造士兵和士兵原型绑定</span>    <span class="token function-variable function">攻击</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">防御</span><span class="token operator">:</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span>    <span class="token literal-property property">constructor</span><span class="token operator">:</span> 制造士兵   <span class="token comment">// 这步把士兵原型和制造士兵绑定</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 省略部分代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>换成 new 写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 省略部分代码</span><span class="token keyword">function</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span><span class="token parameter">编号i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>编号 <span class="token operator">=</span> 编号i    <span class="token keyword">this</span><span class="token punctuation">.</span>生命力 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token class-name">制造士兵</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">攻击</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 呼一巴掌 */</span><span class="token punctuation">}</span><span class="token class-name">制造士兵</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>攻击 <span class="token operator">=</span> <span class="token function">funcrion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 闪 */</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    士兵们<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">制造士兵</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 省略部分代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="https://zhuanlan.zhihu.com/p/23987456">JS 的 new 到底是干什么的？</a></p><p><a href="https://www.zhihu.com/question/34183746">js中__proto__和prototype的区别和关系？</a></p><hr><p>写在后面：因为时间关系，这篇文章写得有些分散杂乱，有空再好好梳理一遍。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记--React（四） Class 组件事件绑定</title>
      <link href="/2021/08/20/xiao-bai-cai-bi-ji-react-si-shi-jian-bang-ding/"/>
      <url>/2021/08/20/xiao-bai-cai-bi-ji-react-si-shi-jian-bang-ding/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>click1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">click2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>click<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>click1<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>click2<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依次点击4个按钮，控制台输出</p><pre class="line-numbers language-none"><code class="language-none">undefinedA {props: Object, context: Object, refs: Object, updater: Object, click1: ƒ bound click()…}A {props: Object, context: Object, refs: Object, updater: Object, click1: ƒ bound click()…}A {props: Object, context: Object, refs: Object, updater: Object, click1: ƒ bound click()…}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一种情况与 <a href="https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/">JavaScript 函数工作原理</a>有关，this 最终是指向 window 的。</p><p>在 Class 组件中，事件绑定的正确姿势应该是这样 ⬇</p><p>传一个匿名函数给 onClick</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 bind 绑定 this</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>click1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>click1<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用箭头函数定义</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">click2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 下面这种写法和在 constructor 中写 this.click2 = () =&gt; {} 是等价的</span><span class="token comment">// click2 = () =&gt; {}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>click2<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在类中 <code>click() {}</code> 和 <code>click = () =&gt; {}</code> 两种写法的区别：</p><ul><li><code>click() {}</code> 是对象的共有属性（也就是原型上的属性）</li><li><code>click = () =&gt; {}</code> 是对象本身的属性</li></ul><blockquote><p>觉得 this 麻烦，那用函数组件就好啦 😊</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记--React（三）函数组件</title>
      <link href="/2021/08/19/xiao-bai-cai-bi-ji-react-san-han-shu-zu-jian/"/>
      <url>/2021/08/19/xiao-bai-cai-bi-ji-react-san-han-shu-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>写在前面：学习 <code>React</code> 要时刻告诉自己就是在写 <code>JavaScript</code></p><h1 id="函数组件的创建方式"><a href="#函数组件的创建方式" class="headerlink" title="函数组件的创建方式"></a>函数组件的创建方式</h1><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 箭头函数形式</span><span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// function 形式</span><span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>就是如此，和 JS 函数的创建一样（心里默念学习 <code>React</code> 要时刻告诉自己就是在写 <code>JavaScript</code>）</p><h1 id="Props-外部数据"><a href="#Props-外部数据" class="headerlink" title="Props 外部数据"></a>Props 外部数据</h1><p>就是函数组件的参数</p><h1 id="State-和生命周期"><a href="#State-和生命周期" class="headerlink" title="State 和生命周期"></a>State 和生命周期</h1><p><strong>没有</strong> </p><p>那我走？ 🤷‍♀️</p><p>别急，React v16.8.0 推出 Hooks API，可厉害了，了解下吧~</p><h1 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h1><p>Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的<strong>函数</strong>，使用它们有两个额外的规则：</p><ul><li>只能在<strong>函数最外层</strong>调用 Hook。不要在循环、条件判断或者子函数中调用。</li><li>只能在 <strong>React 的函数组件</strong>中调用 Hook。不要在其他 JavaScript 函数中调用。</li></ul><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>还记得在 Class 组件中怎么使用 <code>state</code> 的吗</p><p>看这个例子 🌰</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">You clicked </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token plain-text"> times</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          Click me        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过在构造函数中设置 state 初始值为 { count: 0 } ，当用户点击按钮后，我们通过调用 this.setState() 来增加 state.count。</p><p>回顾一下上面函数组件的创建方式，我们似乎无法很方便地向里面添加一些 state 使得 state 变化时能自动更新 UI</p><p>这时就该主角 <code>useState</code> 登场啦 😎</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">You clicked </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token plain-text"> times</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">       Click me      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 useState 定义 state 变量返回的是一个有两个值的数组。第一个值是当前的 state，第二个值是更新 state 的函数。</p><p>useState() 方法里面唯一的参数就是初始 state。这里声明了一个叫 count 的 state 变量，然后把它设为 0。</p><p>通过调用 setCount 来更新当前的 count。</p><blockquote><p>注意事项：</p><ol><li>如果 state 是一个对象，不能部分 setState，因为 setState 不会合并属性</li><li>对于 setState(obj)，如果 obj 地址不变，那么 React 就认为数据没有变化</li></ol></blockquote><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p>useEffect 给函数组件增加了操作副作用的能力。它跟 Class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API。</p><p>来看下 useEffect 的用法</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 模拟 componentDidMount，注意第二个参数</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 只在第一次渲染时会执行 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 模拟 componentDidUpdate，注意第二个参数</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 任意属性更新就会执行，第一次渲染也会 */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 只有n更新才会执行，第一次渲染也会 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 模拟 componentWillUnmount，注意第一个参数的 return 语句</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 执行组件卸载的时候清除操作（保护环境） */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果同时存在多个 useEffect，会按照出现次序执行</p></blockquote><h2 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h2><p>在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染。在浏览器执行绘制之前，useLayoutEffect 内部的更新计划将被同步刷新。</p><blockquote><p>特点</p><ul><li>useLayoutEffect 总是比 useEffect 先执行</li><li>useLayoutEffect 里的任务最好是影响了 Layout</li></ul></blockquote><pre class="line-numbers language-none"><code class="language-none">App() ---&gt; 执行 ---&gt; VDOM ---&gt; DOM ---&gt; 改变外观 ---&gt; useEffect                                    ↑                              useLayoutEffect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><p>用法</p><ol><li>声明一个 context 对象<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用 &lt;MyContext.Provider&gt; 圈定作用域<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">520</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Childlren</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyContext.Provider</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在作用域内使用 useContext(MyContext) 获取上下文<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Chrilren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><p>使用官网上的例子</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 第 1 步：创建初始值 initialCount</span><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">initialCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> initialCount<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第 2 步：创建所有操作 reducer(state, action)</span><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'increment'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'decrement'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'reset'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token function">init</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>initialCount<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 第 3 步：传给 useReducer ，得到读写 API</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialCount<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      Count: </span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token comment">// 第 4 步：调用 dispatch({type: '操作类型'})</span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'reset'</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> initialCount<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        Reset      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'decrement'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">-</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'increment'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p>使用背景：React 默认有多余的 render</p><pre class="line-numbers language-none"><code class="language-none">&lt;父组件&gt;    &lt;子组件 /&gt;&lt;/父组件&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当 &lt;父组件&gt; 中 state 变化时， &lt;子组件&gt; 跟着重新渲染，但如果 &lt;子组件&gt; 的 props 没有变化是没必要重新渲染的。</p><p>用 &lt;子组件2&gt; = React.memo(&lt;子组件&gt;) 可以解决，但是有 Bug ：在 &lt;子组件&gt; 内添加了监听函数后就会失效。原因是函数是对象， &lt;父组件&gt; 重新渲染会导致函数地址不同从而使 props 发生变化。</p><p>用 useMemo 包装 &lt;子组件&gt; 内的监听函数。</p><p>用法</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把“创建”函数和依赖项数组作为参数传入 <code>useMemo</code>，它仅会在某个依赖项改变时才重新计算 <code>memoized</code> 值</p><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><p>useCallback(fn, deps) 相当于 useMemo(() =&gt; fn, deps)</p><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> refContainer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>useRef 返回一个可变的 <code>ref</code> 对象，其 <code>.current</code> 属性被初始化为传入的参数（<code>initialValue</code>）。返回的 <code>ref</code> 对象在组件的整个生命周期内持续存在。</p><p>读取方式：refContainer.current</p><p><code>useRef</code> 常用于访问子组件</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">TextInputWithFocusButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> inputEl <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">onButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// `current` 指向已挂载到 DOM 上的文本输入元素&lt;input&gt;</span>    inputEl<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputEl<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onButtonClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Focus the input</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h2><p>自定义 Hook 是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook，通常用于封装数据操作。</p><p>下面是一个自定义 Hook 示例</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// useRecords.jsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useRecords</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>records<span class="token punctuation">,</span> setRecords<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 一些增删查改的操作</span>  <span class="token keyword">const</span> <span class="token function-variable function">findRecord</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> <span class="token function-variable function">addRecord</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> <span class="token function-variable function">deleteRecord</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> <span class="token function-variable function">updateRecord</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>records<span class="token punctuation">,</span> addRecord<span class="token punctuation">,</span> deleteRecord<span class="token punctuation">,</span> findRecord<span class="token punctuation">,</span> updateRecord<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义 Hook </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>records<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 其他代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年，被 this 折磨的前端小白</title>
      <link href="/2021/08/18/js-de-san-zuo-da-shan-zhi-this/"/>
      <url>/2021/08/18/js-de-san-zuo-da-shan-zhi-this/</url>
      
        <content type="html"><![CDATA[<p>在刚开始学 <code>JavaScript</code> 时，最深恶痛绝的三个 JS怪👹：<strong>this妖</strong>、<strong>原型精</strong>和 <strong>AJAX魔</strong></p><p>最近在写总结回顾时竟意外发现这三大怪早已在不知不觉中被我消化吸收了，趁着热乎记下来✍~~~</p><p>有请今天的出场嘉宾🎤：this妖</p><h1 id="this妖-的前世今生"><a href="#this妖-的前世今生" class="headerlink" title="this妖 的前世今生"></a>this妖 的前世今生</h1><p>假设现在有一对象🐘🐘</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'April-cl'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 待补充</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我想要调用 person.sayHi(…)，打印出「你好，我是 April-cl，今年 18 岁」</p><p>emmmmmmmmm 我要怎样写 <code>sayHi</code> 呢，这样吗？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好，我是 ${name}，今年 ${age} 岁'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用方式：<code>person.sayHi(person.name, person.age)</code></p><p>这似乎可以，但是…看起来傻傻的😳</p><p>那要不，给 <code>sayHi</code> 传入一个对象？代码改成这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">self</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好，我是 ${self.name}，今年 ${self.age} 岁'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用方式：<code>person.sayHi(person)</code></p><p>心里嘀嘀咕：可我就想把参数里的 <code>person</code> 省掉</p><p>💡 有了，给参数里的 <code>person</code> 穿上隐身衣。可是没有了实参，<code>sayHi</code> 声明的形参怎么办？</p><p>好办，给 <code>self</code> 也穿上隐身衣，用一个驻守的小妖精 <code>this</code> 来代替：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// this 就是 self</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好，我是 ${this.name}，今年 ${this.age} 岁'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>调用方式：<code>person.sayHi()</code></p><p>现在看着明了了，<code>this</code> 是 <code>sayHi</code> 隐藏的第一个形参。在调用 <code>person.sayHi()</code> 时，这个 <code>person</code> 会「变成」 <code>this</code></p><h1 id="令小白闻风丧胆的-this妖-现身啦"><a href="#令小白闻风丧胆的-this妖-现身啦" class="headerlink" title="令小白闻风丧胆的 this妖 现身啦"></a>令小白闻风丧胆的 this妖 现身啦</h1><p>俗话说知彼知己方能百战百胜，那就先要了解 <code>this</code> 的5种绑定方式</p><ul><li>默认绑定</li><li>隐式绑定</li><li>显示绑定</li><li>new绑定</li><li>箭头函数绑定</li></ul><h2 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h2><p>前置知识（系统丢给了你一本秘籍 📓 ）：</p><p>在全局块级作用域</p><ul><li>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员</li><li>非严格模式下 this 指向 window</li><li>用 let 或 const 声明不会被绑定到 window 上</li></ul><p>好了，接下来打怪升级 ⬆</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo a:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo b:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this a:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this b:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据秘籍</p><p><code>a</code> 和 <code>foo</code> 变量会被绑定在 <code>window</code> 上，而 <code>b</code> 则不会（即 <code>window.b</code> 是 <code>undefined</code>），而 <code>this</code> 指向 <code>window</code>，所以答案是</p><pre class="line-numbers language-none"><code class="language-none">this a:1this b:undefinedfoo a:1foo b:undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h2><p>回顾上文『this妖 的前世今生』，<code>this</code> 隐式绑定的对象其实就是穿了隐身衣的 <code>person</code></p><p>✨ Get 新秘籍：当函数引用有上下文对象时, 如 obj.foo() 的调用方式, foo 内的 this 指向 obj </p><p>但是江湖险恶，若是有人披着层「马甲」诓骗 this妖，就会造成 this妖 和穿着隐身衣的正主形同陌路，请看题：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开照妖镜（控制台），会发现此时结果</p><pre class="line-numbers language-none"><code class="language-none">12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>？？？</p><p>不难理解 <code>obj.foo()</code> 的结果是 1，但 <code>foo2()</code> 居然打印出的是<code>window</code> 下的 <code>a</code> 😮</p><p>这便是这层「马甲」的厉害之处了：使用另一个变量来给函数取别名造成丢失绑定对象（秘籍升级 ⬆︎ ）</p><h2 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h2><p>嘿嘿 😏 你有张良计，我有过墙梯 ~</p><p>拿出哆啦A梦的道具『非生物催眠喇叭📢』： <code>call</code> <code>apply</code> <code>bind</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>      <span class="token comment">// 上面代码与隐式绑定示例一致，新增此行代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当当当，<code>foo2.call(obj)</code> 打印出的是 1。</p><p>这就是利用 <code>call</code> 、 <code>apply</code> 或者 <code>bind</code> 方法改变函数内this的指向的显示绑定。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">MDN Function.prototype.call()</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">MDN Function.prototype.apply()</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">MDN Function.prototype.bind()</a></p><h2 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h2><p>使用new来调用一个函数，会构造一个新对象并把这个新对象绑定到调用函数中的this</p><p><del>这里留坑</del>，等<a href="https://april-cl.github.io/2021/08/20/js-de-san-zuo-da-shan-zhi-yuan-xing/#toc-heading-4">关于 <code>new</code> 的博客</a>写好了再来填</p><h2 id="箭头函数绑定"><a href="#箭头函数绑定" class="headerlink" title="箭头函数绑定"></a>箭头函数绑定</h2><p>实际上箭头函数里并没有 this，如果在箭头函数里看到 this，直接把它当作箭头函数外面的 this 即可。外面的 this 是什么，箭头函数里面的 this 就还是什么，因为箭头函数本身不支持 this。</p><p>参考文章：</p><p><a href="https://zhuanlan.zhihu.com/p/23804247">this 的值到底是什么？一次说清楚</a></p><p><a href="https://zhuanlan.zhihu.com/p/25991271">你怎么还没搞懂 this？</a></p><p><a href="https://zhuanlan.zhihu.com/p/30164164">JS 里为什么会有 this</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记--React（二）Class 组件</title>
      <link href="/2021/08/17/xiao-bai-cai-bi-ji-react-er-class-zu-jian/"/>
      <url>/2021/08/17/xiao-bai-cai-bi-ji-react-er-class-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="两种方式创建-Class-组件"><a href="#两种方式创建-Class-组件" class="headerlink" title="两种方式创建 Class 组件"></a>两种方式创建 Class 组件</h1><ol><li><p>ES5 方式（已过时）</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hi</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ES6 方式</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hi</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">B</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>强行记忆点：<code>extends</code> 、<code>constructor</code>、<code>super</code>。<br>如果写了 <code>constructor</code> 没写 <code>super</code> 会报错，所以要么不写 <code>constructor</code> （即不初始化），要么就写全。<code>super</code> 的作用：将父类的this对象继承给子类。</p></blockquote></li></ol><h1 id="Props-外部数据"><a href="#Props-外部数据" class="headerlink" title="Props 外部数据"></a>Props 外部数据</h1><p>作用：接受外部数据或函数<br>读取：this.props<br>与之相关的钩子：UNSAFE_componentWillReceiveProps(newProps)<br>注意事项：永远不要改写 Props，应该由 Props 的主人对数据进行更改</p><h1 id="State-和-setState"><a href="#State-和-setState" class="headerlink" title="State 和 setState"></a>State 和 setState</h1><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token comment">// 初始化 state</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'April-cl'</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// setState 的第一个参数是新的 state，注意这里并没有改变 state.m</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 这里控制台打印 n 的值为 1 ，setState 不会立即改变 this.state，会在当前代码运行完后再去更新 this.state，从而触发 UI 更新</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function-variable function">onClick1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// setState 的第一个参数是函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> state<span class="token punctuation">.</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> state<span class="token punctuation">.</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function-variable function">onClick2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// setState 的第二个参数是成功后执行的回调函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>m<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">         </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClick1<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClick2<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+3</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意点</p><ul><li>setState 不会立即改变 this.state</li><li>setState 的第一个参数可以接受两种形式的参数，推荐使用函数</li></ul></blockquote><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="生命周期执行顺序"><a href="#生命周期执行顺序" class="headerlink" title="生命周期执行顺序"></a>生命周期执行顺序</h2><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><ul><li>constructor</li><li>static getDerivedStateFromProps</li><li>render</li><li>componentDidMount</li></ul><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul><li>static getDerivedStateFromProps</li><li>shouldComponentUpdate</li><li>render</li><li>getSnapshotBeforeUpdate</li><li>componentDidUpdate</li></ul><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><ul><li>componentWillUnmount</li></ul><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>在 <code>React</code> 组件挂载之前被调用，在为 <code>React.Component</code> 子类实现构造函数时，应在其他语句之前调用 <code>super()</code></p><p>用途：</p><ul><li><p>初始化 state，但不能调用 setState</p></li><li><p>为<a href="https://zh-hans.reactjs.org/docs/handling-events.html">事件处理函数</a>绑定实例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">/* 其它代码略 */</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面也可以用新语法代替 👇</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* 其它代码略 */</span><span class="token punctuation">}</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#constructor">官方文档</a></p><h3 id="static-getDerivedStateFromProp-（不常用）"><a href="#static-getDerivedStateFromProp-（不常用）" class="headerlink" title="static getDerivedStateFromProp （不常用）"></a>static getDerivedStateFromProp （不常用）</h3><p>在调用 <code>render</code> 方法之前调用，在初始化和后续更新都会被调用</p><p>返回一个对象来更新 state，如果返回 null 则不更新任何内容</p><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromprops">官方文档</a></p><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>是 <code>Class 组件</code>中唯一必须实现的方法</p><p>用于展现视图</p><p>只能有一个根元素，如果有多个元素则需用 <code>&lt;&gt;&lt;/&gt;</code> 包裹起来</p><p><code>render</code> 里面可以写</p><ul><li>if … else …</li><li>? : 表达式</li><li>array.map 循环</li></ul><blockquote><p>如果 <code>shouldComponentUpdate()</code> 返回 <code>false</code>，则不会调用 <code>render()</code></p></blockquote><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#render">官方文档</a></p><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><p>在组件挂载后（插入 DOM 树中）立即调用</p><p>官方推荐在此处发起<strong>加载数据</strong>的 <code>AJAX</code> 请求</p><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#componentdidmount">官方文档</a></p><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p>返回 true 时允许更新 UI，返回 false 时阻止更新 UI</p><p>允许手动判断师傅要进行组件更新，我们可以根据应用场景灵活地设置返回值，以避免不必要的更新</p><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate">官方文档</a></p><h3 id="getSnapshotBeforeUpdate-（不常用）"><a href="#getSnapshotBeforeUpdate-（不常用）" class="headerlink" title="getSnapshotBeforeUpdate （不常用）"></a>getSnapshotBeforeUpdate （不常用）</h3><p>在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期方法的任何返回值将作为参数传递给 <code>componentDidUpdate</code></p><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#getsnapshotbeforeupdate">官方文档</a></p><h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><p>在视图更新后执行代码，首次渲染不会执行</p><p>在此处直接调用 <code>setState</code> 必须被包裹在一个条件语句里</p><p>官方推荐在此处发起<strong>更新数据</strong>的 <code>AJAX</code> 请求</p><blockquote><p>如果 <code>shouldComponentUpdate()</code> 返回值为 <code>false</code>，则不会调用 <code>componentDidUpdate()</code></p></blockquote><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#componentdidupdate">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 的配置和常用命令</title>
      <link href="/2021/08/16/git-de-pei-zhi-he-chang-yong-ming-ling/"/>
      <url>/2021/08/16/git-de-pei-zhi-he-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="本地仓库配置"><a href="#本地仓库配置" class="headerlink" title="本地仓库配置"></a>本地仓库配置</h1><p>打开 Cmder （任意目录均可，因为是全局安装），逐行执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name 你的英文名<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email 你的邮箱<span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default simple<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.quotepath <span class="token boolean">false</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.editor <span class="token string">"code --wait"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="远程仓库配置（GitHub）"><a href="#远程仓库配置（GitHub）" class="headerlink" title="远程仓库配置（GitHub）"></a>远程仓库配置（GitHub）</h1><ol><li>运行 <code>$ ssh-keygen -t rsa -b 4096 -C 你的GitHub电子邮件地址</code>，一直回车到没有提示。</li><li>运行 <code>cat ~/.ssh/id_rsa.pub</code>，复制公钥内容。</li><li>登录 GitHub，Setting -&gt; SSh and GPG keys -&gt; New SSH key -&gt; Title 可以随便命名，就是电脑的代号，然后粘贴刚刚复制的公钥内容到 Key 文本框点击 Add SSH key 即可。</li></ol><p>参考链接 🔗<br><a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">GitHub Docs 生成 SSH 密钥</a></p><h1 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h1><p>初始化仓库：<code>git init</code></p><p>把修改添加到仓库：<code>git add 修改的文件名</code></p><p>把修改提交到仓库：<code>git commit -m '提交名'</code></p><p>查看当前仓库修改状态：<code>git status</code></p><p>查看历史提交记录：<code>git log</code></p><p>回退到上一版本：<code>git reset --hard HEAD^</code></p><p>回退到指定版本号：<code>git reset --hard 版本号前n位（我一般复制6-10位）</code></p><p>推送到远程仓库（第一次创建远程仓库时 GitHub 有提示下面代码）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin 远程仓库ssh链接<span class="token function">git</span> branch <span class="token parameter variable">-M</span> main<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>推送到远程仓库（已经推送过远程仓库了）：<code>git push</code></p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git brach 分支名</code></p><p>切换分支：<code>git checkout 分支名</code></p><p>参考链接 🔗<br><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的 Git 教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些常用的命令行</title>
      <link href="/2021/08/16/yi-xie-chang-yong-de-ming-ling-xing/"/>
      <url>/2021/08/16/yi-xie-chang-yong-de-ming-ling-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>程序员的宿命 —— 增删改查</p></blockquote><h1 id="查：查看文件或目录"><a href="#查：查看文件或目录" class="headerlink" title="查：查看文件或目录"></a>查：查看文件或目录</h1><ul><li>查看当前目录绝对路径：pwd</li><li>查看当前目录内容：ls</li><li>查看指定目录内容：ls 路径</li><li>查看文件内容<ul><li>查看全部内容：cat 路径</li><li>查看前 xx 行内容：head -n xx 路径</li><li>查看后 xx 行内容：tail -n xx 路径</li><li>分屏查看内容：less 路径</li></ul></li></ul><h1 id="增：创建文件或目录"><a href="#增：创建文件或目录" class="headerlink" title="增：创建文件或目录"></a>增：创建文件或目录</h1><ul><li>创建文件<ul><li>生成空文件：touch 文件名</li><li>生成有内容的文件（文件名重复会替换旧内容）：echo 内容 &gt; 文件名</li><li>将内容追加在文件中（不会替换旧内容）：echo 内容 &gt;&gt; 文件名</li><li>不编译内容中的转义字符：echo -e “内容” &gt; 文件名</li><li>同时生成多个文件：touch 文件名11 文件名22</li><li>复制文件：cp 文件名1 文件名2</li></ul></li><li>创建目录<ul><li>生成空目录：mkdir 目录名</li><li>生成多级目录： mkdir -p 目录名1/目录名2/目录名3</li><li>同时生成多个目录：mkdir -p 目录名1 目录名2/目录名3</li><li>复制目录：cp -r 目录名1 目录名2</li></ul></li></ul><h1 id="删：删除文件或目录"><a href="#删：删除文件或目录" class="headerlink" title="删：删除文件或目录"></a>删：删除文件或目录</h1><ul><li>删除文件：rm 文件名</li><li>删除目录<ul><li>删除目录： rm -r 目录名</li><li>强制删除目录：rm -rf 目录名</li></ul></li></ul><p><strong>不要手贱把系统文件删了~~~</strong></p><p>为避免误删系统文件，进入命令行第一件事执行 <code>cd ~</code> 进入到用户目录。</p><h1 id="改：修改文件或目录"><a href="#改：修改文件或目录" class="headerlink" title="改：修改文件或目录"></a>改：修改文件或目录</h1><ul><li>重命名文件：mv 文件名1 文件名2</li><li>移动文件到别的目录：mv 文件名 目录名</li><li>更新文件最后的修改时间（和生成空文件一样）：生成空文件：touch 文件名</li><li>使用默认程序打开文件：start 文件名</li><li>使用VSCode打开文件：code 文件名</li></ul><h1 id="命令组合"><a href="#命令组合" class="headerlink" title="命令组合"></a>命令组合</h1><ul><li>命令1成功后执行命令2：命令1 &amp;&amp; 命令2</li><li>不管命令1运行结果如何都执行命令2：命令1 ; 命令2</li></ul><h1 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h1><ol><li>创建一个文件，后缀可有可无。</li><li>执行 <code>chmod +x 文件</code>，添加可执行权限。</li><li>把要执行的命令写到文件里（下面代码举例说明，这里的 <code>$1</code> 后面通过参数传入）。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token variable">$1</span><span class="token builtin class-name">cd</span> <span class="token variable">$1</span><span class="token function">touch</span> new.txt<span class="token builtin class-name">echo</span> Hello <span class="token operator">&gt;</span> new.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>执行 <code>sh 文件 参数</code> 或 <code>./文件</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新手前端的装机攻略，拿来吧你</title>
      <link href="/2021/08/16/xin-shou-qian-duan-de-zhuang-ji-gong-lue-na-lai-ba-ni/"/>
      <url>/2021/08/16/xin-shou-qian-duan-de-zhuang-ji-gong-lue-na-lai-ba-ni/</url>
      
        <content type="html"><![CDATA[<p>前段时间买了新电脑，装了很多学习用的软件，这里记下来方便后面查找 🔍</p><h1 id="Chrome-浏览器"><a href="#Chrome-浏览器" class="headerlink" title="Chrome 浏览器"></a>Chrome 浏览器</h1><h1 id="Cmder-控制台软件"><a href="#Cmder-控制台软件" class="headerlink" title="Cmder 控制台软件"></a>Cmder 控制台软件</h1><p>安装后配置：</p><ul><li>默认命令行改为 bash。设置 -&gt; 通用 -&gt; 选择你的启动任务或者带参数的shell -&gt; {bash::bash}</li></ul><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><p>安装后配置：</p><ul><li>使用淘宝源。 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">-g</span> nrmnrm <span class="token function">ls</span>nrm use taobao<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><h1 id="7zip-解压软件"><a href="#7zip-解压软件" class="headerlink" title="7zip 解压软件"></a>7zip 解压软件</h1><h1 id="Everything-文件搜索"><a href="#Everything-文件搜索" class="headerlink" title="Everything 文件搜索"></a>Everything 文件搜索</h1><h1 id="微信-PC-版"><a href="#微信-PC-版" class="headerlink" title="微信 PC 版"></a>微信 PC 版</h1><h1 id="Snipaste-截图软件"><a href="#Snipaste-截图软件" class="headerlink" title="Snipaste 截图软件"></a>Snipaste 截图软件</h1><h1 id="VSCode-编辑器"><a href="#VSCode-编辑器" class="headerlink" title="VSCode 编辑器"></a>VSCode 编辑器</h1><p>安装后配置：</p><ul><li>自动保存。设置 -&gt; Auto Save: onFocusChange</li><li>汉化。扩展 -&gt; 搜索 chinese</li><li>检查拼写。扩展 -&gt; 搜索 Code Spell Checker</li><li>git 操作。扩展 -&gt; Git Easy</li><li><a href="https://github.com/cmderdev/cmder/wiki/Seamless-VS-Code-Integration">配合 Cmder</a>。</li></ul><p>快捷键：<br>找文件 ctrl + p<br>输命令 ctrl + shift + p<br>多位置输入 at + 单击</p><h1 id="WebStorm-编辑器"><a href="#WebStorm-编辑器" class="headerlink" title="WebStorm 编辑器"></a>WebStorm 编辑器</h1><p>安装后配置：</p><ul><li>配合 Cmder。Setting -&gt; Tools -&gt; Terminal -&gt; Shell Path -&gt; 用 Everything 搜索 <code>git-for-windows</code> ，复制包含 <code>cmder\vendor\git-for-windows\bin\bash.exe</code> 的路径。</li><li>配置 Git。Setting -&gt; Version Control -&gt; Git -&gt; Path to Git executable -&gt;  用 Everything 搜索 <code>git-for-windows</code> ，复制包含 <code>cmder\vendor\git-for-windows\bin\git.exe</code> 的路径。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白菜笔记--React（一）基础篇</title>
      <link href="/2021/08/14/xiao-bai-cai-bi-ji-react-yi/"/>
      <url>/2021/08/14/xiao-bai-cai-bi-ji-react-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面的碎碎念💬："><a href="#写在前面的碎碎念💬：" class="headerlink" title="写在前面的碎碎念💬："></a>写在前面的碎碎念💬：</h2><p>从大学自学前端到毕业做非前端工作再到裸辞重新学前端，两次学习的体会还是有所不同的。第一次学习的经历就像盲人摸象，摸到啥是啥，跟着网上的教程做，自己设置需求然后不断写bug，当时还是学生，时间也多，做了几个自认为不错的项目，凭着一股初生牛犊不怕虎的劲儿兴冲冲的找工作，当然结果是没找着，好像一股热情被浇了盆冰水。后面在亲戚介绍下做了份不搭边的工作，算是温水煮青蛙的过了三年，期间也有段时间在坚持学习前端知识，但终究还是迫于时间和工作的压力，顶多算是学了点水花。因为工作的关系，为提高效率，后来花了很多时间在学习VBA和Excel函数。虽然只算涉猎了些皮毛，但庆幸自己一直在坚持学习，脑子不太生锈，第二次学习虽然不如第一次掌握得快，但多嚼几遍总能加深印象。当然了，第二次学习更加是得益于有了系统的学习方法和前人的指导，内心里还是十分感激这些老师们的。好像说得有点多，这个等有空再整理出来吧。因为是刚写完几个React的项目，所以想着趁热打铁把笔记写到博客里，方便温故知新。</p><h1 id="React-怎么用"><a href="#React-怎么用" class="headerlink" title="React 怎么用"></a>React 怎么用</h1><ol><li><p>通过 CDN 引入</p><p> 用 &lt;script&gt; 先引入 <code>react.x.min.js</code> 再引入 <code>react-dom.x.min.js</code><br> 可以到 <a href="https://www.bootcdn.cn/">BootCDN</a> 搜索 CDN</p></li><li><p>通过 webpack 引入</p><p> 使用你喜欢的包管理器进行安装</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> react react-dom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 在项目中通过 <code>import</code> 引入</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>通入 Create React App 引入</p><p> 前置条件：<code>Node.js</code> <code>Cmder</code></p><p> 在预备创建项目的地方打开 <code>Cmder</code> 执行以下命令（<del>关于 <code>Cmder</code> 等安装配置后面有空整理出来</del> 整理好了，在这：<a href="https://april-cl.github.io/2021/08/16/xin-shou-qian-duan-de-zhuang-ji-gong-lue-na-lai-ba-ni/">新手前端的装机攻略，拿来吧你</a> 🙆‍♀）</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx create-react-app my-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 因为是自己做项目，所以一般用的第3种方式创建 React 应用，这种方式会配置好开发环境。成功后的目录是这样的</p> <pre class="line-numbers language-none"><code class="language-none">my-app├─ .git├─ .gitignore├─ package.json├─ public│  ├─ favicon.ico│  ├─ index.html│  ├─ logo192.png│  ├─ logo512.png│  ├─ manifest.json│  └─ robots.txt├─ README.md├─ src│  ├─ App.css│  ├─ App.js│  ├─ App.test.js│  ├─ index.css│  ├─ index.js│  ├─ logo.svg│  ├─ reportWebVitals.js│  └─ setupTests.js└─ yarn.lock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="JSX-是什么"><a href="#JSX-是什么" class="headerlink" title="JSX 是什么"></a>JSX 是什么</h1><p>先来看一段有趣的代码吧</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>咋一看会以为是一个普通的 <code>JavaScript</code> 变量声明，但仔细看这个变量的值是一个并没有用引号包裹的 <code>HTML</code> 标签。这就是 <code>JSX</code>，它是一个 <code>JavaScript</code> 的语法扩展。一般建议在 <code>React</code> 中配合使用 <code>JSX</code>，<code>JSX</code> 可以很好地描述 UI 应该呈现出它应有交互的本质形式。<code>JSX</code> 具有 <code>JavaScript</code> 的全部功能，并且可以生成 <code>React</code> “元素”。</p><p><code>webpack</code> 内置了 <code>babel-loader</code>，可以将 JSX 编译成 JS 代码，这里涉及到编译原理不述，上面的代码被编译成：</p><pre class="line-numbers language-none"><code class="language-none">var element = React.createElement("h1", null, "Hello, world!");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么使用 <code>JSX</code> <a href="https://zh-hans.reactjs.org/docs/introducing-jsx.html">官网</a>有解释，这里就不赘述了。</p><p>使用 <code>JSX</code> 的注意事项  </p><ul><li>驼峰命名法<br>  因为 <code>JSX</code> 语法上更接近 <code>JavaScript</code> 而不是 <code>HTML</code>，所以 <code>React DOM</code> 使用 <code>camelCase</code>（驼峰命名法）来定义属性的名称，而不使用 <code>HTML</code> 属性名称的命名约定。例如，<code>JSX</code> 里的 <code>class</code> 变成了 <code>className</code>。</li><li>嵌入表达式<br>  标签里的所有 <code>JS</code> 代码都要用 <code>{}</code> 包起来。例如，使用到变量 <code>n</code>，则需写成 <code>{n}</code>；使用到对象 <code>{n: 1}</code>，则需写成 <code>{{n: 1}}</code></li><li>养成 <code>return</code> 后面加 <code>()</code> 的习惯</li></ul><h1 id="React-元素"><a href="#React-元素" class="headerlink" title="React 元素"></a>React 元素</h1><p>元素是构成 <code>React</code> 应用的最小单位。<code>React DOM</code> 负责更新 <code>DOM</code> 来与 <code>React 元素</code>保持一致。</p><h2 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h2><p>通过 <code>ReactDOM.render(element, container[, callback])</code> 将 <code>React 元素(element)</code>渲染到 <code>DOM 节点(container)</code>。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里假设HTML 文件某处有一个 <code>id</code> 为 <code>root</code> 的 <code>div</code>。</p><p><code>React 元素</code>是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。更新 UI 唯一的方式是创建一个全新的元素，并将其传入 <code>ReactDOM.render()</code>。<code>React DOM</code> 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 <code>DOM</code> 达到预期的状态。</p><h1 id="React-组件"><a href="#React-组件" class="headerlink" title="React 组件"></a>React 组件</h1><h2 id="Element元素-VS-Component组件"><a href="#Element元素-VS-Component组件" class="headerlink" title="Element元素 VS Component组件"></a>Element元素 VS Component组件</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> div <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>         <span class="token comment">// div 是 React 元素</span><span class="token keyword">const</span> <span class="token function-variable function">Div</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>   <span class="token comment">// Div 是 React 组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>简单理解就是一个返回 <code>React 元素</code> 的 <strong><code>函数</code></strong> 就是组件。</p><p>在自定义组件中， <code>JSX</code> 所接收的属性以及子组件会被转换为单个对象传递给组件，这个对象被称之为 <code>props</code>。</p><blockquote><p>注意： 组件名称必须以<strong>大写字母</strong>开头。React 会将以小写字母开头的组件视为原生 DOM 标签。</p></blockquote><h2 id="class-组件"><a href="#class-组件" class="headerlink" title="class 组件"></a>class 组件</h2><p>使用 ES6 的 class 定义组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><p>使用 JavaScript 函数 定义组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="组件渲染"><a href="#组件渲染" class="headerlink" title="组件渲染"></a>组件渲染</h2><p>上面例子 class 组件和函数组件是这样调用的：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Welcome</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>April-cl<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在页面上会渲染成 <code>Hello, April-cl</code></p><p><code>&lt;Welcome name='April-cl' /&gt;</code> 会被编译成 <code>React.createElement(Welcome, {name: 'April-cl'})</code></p><p><code>React.createElement</code>的逻辑：</p><ul><li>如果传入一个字符串 <code>'div'</code>，则会创建一个 <code>div</code></li><li>如果传入一个<code>函数</code>，则会调用该函数，<code>获取其返回值</code></li><li>如果传入一个<code>类</code>，则在类前面加个 <code>new</code> （这会导致执行 <code>constructor</code>），获取一个组件对象，然后调用对象的 <code>render</code> 方法，<code>获取其返回值</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
